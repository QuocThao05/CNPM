<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/ContentCreationActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/ContentCreationActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.android.material.tabs.TabLayout;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class ContentCreationActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TabLayout tabLayout;&#10;    private CardView cardLessonCreation, cardQuizCreation, cardVocabularyList;&#10;    private LinearLayout layoutLessonForm, layoutQuizForm, layoutVocabularyForm;&#10;&#10;    // Lesson creation components&#10;    private EditText etLessonTitle, etLessonDescription, etLessonContent;&#10;    private Spinner spinnerLessonCategory, spinnerDifficulty;&#10;    private Button btnSaveLesson, btnPreviewLesson;&#10;&#10;    // Quiz creation components&#10;    private EditText etQuizTitle, etQuizDescription;&#10;    private EditText etQuestion, etOption1, etOption2, etOption3, etOption4;&#10;    private RadioGroup rgCorrectAnswer;&#10;    private RecyclerView rvQuestions;&#10;    private Button btnAddQuestion, btnSaveQuiz, btnPreviewQuiz;&#10;&#10;    // Vocabulary components&#10;    private EditText etWord, etMeaning, etExample, etPronunciation;&#10;    private Spinner spinnerWordCategory;&#10;    private Button btnAddWord, btnSaveVocabulary;&#10;    private RecyclerView rvVocabularyList;&#10;&#10;    private FloatingActionButton fabPublish;&#10;    private TextView tvContentCount;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String mode; // &quot;lesson&quot;, &quot;quiz&quot;, &quot;vocabulary&quot;&#10;    private String teacherId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_content_creation);&#10;&#10;        // Get mode from intent&#10;        mode = getIntent().getStringExtra(&quot;mode&quot;);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        if (mAuth.getCurrentUser() != null) {&#10;            teacherId = mAuth.getCurrentUser().getUid();&#10;        }&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupTabs();&#10;        setupClickListeners();&#10;        handleModeSpecificSetup();&#10;        loadExistingContent();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tabLayout = findViewById(R.id.tab_layout);&#10;&#10;        // Cards&#10;        cardLessonCreation = findViewById(R.id.card_lesson_creation);&#10;        cardQuizCreation = findViewById(R.id.card_quiz_creation);&#10;        cardVocabularyList = findViewById(R.id.card_vocabulary_list);&#10;&#10;        // Layouts&#10;        layoutLessonForm = findViewById(R.id.layout_lesson_form);&#10;        layoutQuizForm = findViewById(R.id.layout_quiz_form);&#10;        layoutVocabularyForm = findViewById(R.id.layout_vocabulary_form);&#10;&#10;        // Lesson creation&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#10;        etLessonDescription = findViewById(R.id.et_lesson_description);&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#10;        spinnerLessonCategory = findViewById(R.id.spinner_lesson_category);&#10;        spinnerDifficulty = findViewById(R.id.spinner_difficulty);&#10;        btnSaveLesson = findViewById(R.id.btn_save_lesson);&#10;        btnPreviewLesson = findViewById(R.id.btn_preview_lesson);&#10;&#10;        // Quiz creation&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#10;        etQuizDescription = findViewById(R.id.et_quiz_description);&#10;        etQuestion = findViewById(R.id.et_question);&#10;        etOption1 = findViewById(R.id.et_option1);&#10;        etOption2 = findViewById(R.id.et_option2);&#10;        etOption3 = findViewById(R.id.et_option3);&#10;        etOption4 = findViewById(R.id.et_option4);&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#10;        rvQuestions = findViewById(R.id.rv_questions);&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#10;        btnSaveQuiz = findViewById(R.id.btn_save_quiz);&#10;        btnPreviewQuiz = findViewById(R.id.btn_preview_quiz);&#10;&#10;        // Vocabulary&#10;        etWord = findViewById(R.id.et_word);&#10;        etMeaning = findViewById(R.id.et_meaning);&#10;        etExample = findViewById(R.id.et_example);&#10;        etPronunciation = findViewById(R.id.et_pronunciation);&#10;        spinnerWordCategory = findViewById(R.id.spinner_word_category);&#10;        btnAddWord = findViewById(R.id.btn_add_word);&#10;        btnSaveVocabulary = findViewById(R.id.btn_save_vocabulary);&#10;        rvVocabularyList = findViewById(R.id.rv_vocabulary_list);&#10;&#10;        // Other components&#10;        fabPublish = findViewById(R.id.fab_publish);&#10;        tvContentCount = findViewById(R.id.tv_content_count);&#10;&#10;        // Setup RecyclerViews&#10;        if (rvQuestions != null) {&#10;            rvQuestions.setLayoutManager(new LinearLayoutManager(this));&#10;        }&#10;        if (rvVocabularyList != null) {&#10;            rvVocabularyList.setLayoutManager(new LinearLayoutManager(this));&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Tạo nội dung&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupTabs() {&#10;        if (tabLayout != null) {&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Bài học&quot;));&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Quiz&quot;));&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Từ vựng&quot;));&#10;&#10;            tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {&#10;                @Override&#10;                public void onTabSelected(TabLayout.Tab tab) {&#10;                    switchContentType(tab.getPosition());&#10;                }&#10;&#10;                @Override&#10;                public void onTabUnselected(TabLayout.Tab tab) {}&#10;&#10;                @Override&#10;                public void onTabReselected(TabLayout.Tab tab) {}&#10;            });&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Lesson creation&#10;        if (btnSaveLesson != null) {&#10;            btnSaveLesson.setOnClickListener(v -&gt; saveLesson());&#10;        }&#10;        if (btnPreviewLesson != null) {&#10;            btnPreviewLesson.setOnClickListener(v -&gt; previewLesson());&#10;        }&#10;&#10;        // Quiz creation&#10;        if (btnAddQuestion != null) {&#10;            btnAddQuestion.setOnClickListener(v -&gt; addQuestion());&#10;        }&#10;        if (btnSaveQuiz != null) {&#10;            btnSaveQuiz.setOnClickListener(v -&gt; saveQuiz());&#10;        }&#10;        if (btnPreviewQuiz != null) {&#10;            btnPreviewQuiz.setOnClickListener(v -&gt; previewQuiz());&#10;        }&#10;&#10;        // Vocabulary&#10;        if (btnAddWord != null) {&#10;            btnAddWord.setOnClickListener(v -&gt; addWord());&#10;        }&#10;        if (btnSaveVocabulary != null) {&#10;            btnSaveVocabulary.setOnClickListener(v -&gt; saveVocabularyList());&#10;        }&#10;&#10;        // FAB&#10;        if (fabPublish != null) {&#10;            fabPublish.setOnClickListener(v -&gt; publishContent());&#10;        }&#10;    }&#10;&#10;    private void handleModeSpecificSetup() {&#10;        if (&quot;lesson&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#10;            tabLayout.getTabAt(0).select();&#10;            switchContentType(0);&#10;        } else if (&quot;quiz&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#10;            tabLayout.getTabAt(1).select();&#10;            switchContentType(1);&#10;        } else if (&quot;vocabulary&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#10;            tabLayout.getTabAt(2).select();&#10;            switchContentType(2);&#10;        }&#10;    }&#10;&#10;    private void switchContentType(int position) {&#10;        // Hide all layouts first&#10;        hideAllLayouts();&#10;&#10;        switch (position) {&#10;            case 0: // Lesson&#10;                if (layoutLessonForm != null) {&#10;                    layoutLessonForm.setVisibility(View.VISIBLE);&#10;                }&#10;                break;&#10;            case 1: // Quiz&#10;                if (layoutQuizForm != null) {&#10;                    layoutQuizForm.setVisibility(View.VISIBLE);&#10;                }&#10;                break;&#10;            case 2: // Vocabulary&#10;                if (layoutVocabularyForm != null) {&#10;                    layoutVocabularyForm.setVisibility(View.VISIBLE);&#10;                }&#10;                break;&#10;        }&#10;    }&#10;&#10;    private void hideAllLayouts() {&#10;        if (layoutLessonForm != null) layoutLessonForm.setVisibility(View.GONE);&#10;        if (layoutQuizForm != null) layoutQuizForm.setVisibility(View.GONE);&#10;        if (layoutVocabularyForm != null) layoutVocabularyForm.setVisibility(View.GONE);&#10;    }&#10;&#10;    private void saveLesson() {&#10;        if (teacherId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không thể xác định giáo viên&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String title = etLessonTitle != null ? etLessonTitle.getText().toString().trim() : &quot;&quot;;&#10;        String description = etLessonDescription != null ? etLessonDescription.getText().toString().trim() : &quot;&quot;;&#10;        String content = etLessonContent != null ? etLessonContent.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (title.isEmpty() || content.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập đầy đủ tiêu đề và nội dung&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#10;        lessonData.put(&quot;teacherId&quot;, teacherId);&#10;        lessonData.put(&quot;title&quot;, title);&#10;        lessonData.put(&quot;description&quot;, description);&#10;        lessonData.put(&quot;content&quot;, content);&#10;        lessonData.put(&quot;type&quot;, &quot;lesson&quot;);&#10;        lessonData.put(&quot;createdAt&quot;, System.currentTimeMillis());&#10;        lessonData.put(&quot;status&quot;, &quot;draft&quot;);&#10;&#10;        db.collection(&quot;content&quot;)&#10;                .add(lessonData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    Toast.makeText(this, &quot;Bài học đã được lưu thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                    clearLessonForm();&#10;                    updateContentCount();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void previewLesson() {&#10;        Intent intent = new Intent(this, CourseListActivity.class);&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#10;        intent.putExtra(&quot;title&quot;, etLessonTitle != null ? etLessonTitle.getText().toString() : &quot;&quot;);&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void addQuestion() {&#10;        String question = etQuestion != null ? etQuestion.getText().toString().trim() : &quot;&quot;;&#10;        String option1 = etOption1 != null ? etOption1.getText().toString().trim() : &quot;&quot;;&#10;        String option2 = etOption2 != null ? etOption2.getText().toString().trim() : &quot;&quot;;&#10;        String option3 = etOption3 != null ? etOption3.getText().toString().trim() : &quot;&quot;;&#10;        String option4 = etOption4 != null ? etOption4.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (question.isEmpty() || option1.isEmpty() || option2.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập câu hỏi và ít nhất 2 đáp án&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        int correctAnswer = 0;&#10;        if (rgCorrectAnswer != null &amp;&amp; rgCorrectAnswer.getCheckedRadioButtonId() != -1) {&#10;            RadioButton selectedButton = findViewById(rgCorrectAnswer.getCheckedRadioButtonId());&#10;            // Logic to determine correct answer index&#10;        }&#10;&#10;        // Add question to list (implementation would involve adapter)&#10;        Toast.makeText(this, &quot;Câu hỏi đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#10;        clearQuestionForm();&#10;    }&#10;&#10;    private void saveQuiz() {&#10;        // Implementation similar to saveLesson&#10;        Toast.makeText(this, &quot;Quiz đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void previewQuiz() {&#10;        Intent intent = new Intent(this, QuizActivity.class);&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void addWord() {&#10;        String word = etWord != null ? etWord.getText().toString().trim() : &quot;&quot;;&#10;        String meaning = etMeaning != null ? etMeaning.getText().toString().trim() : &quot;&quot;;&#10;        String example = etExample != null ? etExample.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (word.isEmpty() || meaning.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập từ và nghĩa&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Add word to vocabulary list&#10;        Toast.makeText(this, &quot;Từ vựng đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#10;        clearVocabularyForm();&#10;    }&#10;&#10;    private void saveVocabularyList() {&#10;        Toast.makeText(this, &quot;Danh sách từ vựng đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void publishContent() {&#10;        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Xuất bản nội dung&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xuất bản nội dung này? Học viên sẽ có thể truy cập.&quot;)&#10;                .setPositiveButton(&quot;Xuất bản&quot;, (dialog, which) -&gt; {&#10;                    Toast.makeText(this, &quot;Nội dung đã được xuất bản!&quot;, Toast.LENGTH_SHORT).show();&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void clearLessonForm() {&#10;        if (etLessonTitle != null) etLessonTitle.setText(&quot;&quot;);&#10;        if (etLessonDescription != null) etLessonDescription.setText(&quot;&quot;);&#10;        if (etLessonContent != null) etLessonContent.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void clearQuestionForm() {&#10;        if (etQuestion != null) etQuestion.setText(&quot;&quot;);&#10;        if (etOption1 != null) etOption1.setText(&quot;&quot;);&#10;        if (etOption2 != null) etOption2.setText(&quot;&quot;);&#10;        if (etOption3 != null) etOption3.setText(&quot;&quot;);&#10;        if (etOption4 != null) etOption4.setText(&quot;&quot;);&#10;        if (rgCorrectAnswer != null) rgCorrectAnswer.clearCheck();&#10;    }&#10;&#10;    private void clearVocabularyForm() {&#10;        if (etWord != null) etWord.setText(&quot;&quot;);&#10;        if (etMeaning != null) etMeaning.setText(&quot;&quot;);&#10;        if (etExample != null) etExample.setText(&quot;&quot;);&#10;        if (etPronunciation != null) etPronunciation.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void loadExistingContent() {&#10;        updateContentCount();&#10;    }&#10;&#10;    private void updateContentCount() {&#10;        if (teacherId != null) {&#10;            db.collection(&quot;content&quot;)&#10;                    .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                    .get()&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                        int count = queryDocumentSnapshots.size();&#10;                        if (tvContentCount != null) {&#10;                            tvContentCount.setText(&quot;Đã tạo: &quot; + count + &quot; nội dung&quot;);&#10;                        }&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        Intent intent = new Intent(this, TeacherDashboardActivity.class);&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.RadioButton;&#13;&#10;import android.widget.RadioGroup;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import androidx.cardview.widget.CardView;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#13;&#10;import com.google.android.material.tabs.TabLayout;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class ContentCreationActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private TabLayout tabLayout;&#13;&#10;    private CardView cardLessonCreation, cardQuizCreation, cardVocabularyList;&#13;&#10;    private LinearLayout layoutLessonForm, layoutQuizForm, layoutVocabularyForm;&#13;&#10;&#13;&#10;    // Lesson creation components&#13;&#10;    private EditText etLessonTitle, etLessonDescription, etLessonContent;&#13;&#10;    private Spinner spinnerLessonCategory, spinnerDifficulty;&#13;&#10;    private Button btnSaveLesson, btnPreviewLesson;&#13;&#10;&#13;&#10;    // Quiz creation components&#13;&#10;    private EditText etQuizTitle, etQuizDescription;&#13;&#10;    private EditText etQuestion, etOption1, etOption2, etOption3, etOption4;&#13;&#10;    private RadioGroup rgCorrectAnswer;&#13;&#10;    private RecyclerView rvQuestions;&#13;&#10;    private Button btnAddQuestion, btnSaveQuiz, btnPreviewQuiz;&#13;&#10;&#13;&#10;    // Vocabulary components&#13;&#10;    private EditText etWord, etMeaning, etExample, etPronunciation;&#13;&#10;    private Spinner spinnerWordCategory;&#13;&#10;    private Button btnAddWord, btnSaveVocabulary;&#13;&#10;    private RecyclerView rvVocabularyList;&#13;&#10;&#13;&#10;    private FloatingActionButton fabPublish;&#13;&#10;    private TextView tvContentCount;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String mode; // &quot;lesson&quot;, &quot;quiz&quot;, &quot;vocabulary&quot;&#13;&#10;    private String teacherId;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_content_creation);&#13;&#10;&#13;&#10;        // Get mode from intent&#13;&#10;        mode = getIntent().getStringExtra(&quot;mode&quot;);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        if (mAuth.getCurrentUser() != null) {&#13;&#10;            teacherId = mAuth.getCurrentUser().getUid();&#13;&#10;        }&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupTabs();&#13;&#10;        setupClickListeners();&#13;&#10;        handleModeSpecificSetup();&#13;&#10;        loadExistingContent();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        tabLayout = findViewById(R.id.tab_layout);&#13;&#10;&#13;&#10;        // Cards&#13;&#10;        cardLessonCreation = findViewById(R.id.card_lesson_creation);&#13;&#10;        cardQuizCreation = findViewById(R.id.card_quiz_creation);&#13;&#10;        cardVocabularyList = findViewById(R.id.card_vocabulary_list);&#13;&#10;&#13;&#10;        // Layouts&#13;&#10;        layoutLessonForm = findViewById(R.id.layout_lesson_form);&#13;&#10;        layoutQuizForm = findViewById(R.id.layout_quiz_form);&#13;&#10;        layoutVocabularyForm = findViewById(R.id.layout_vocabulary_form);&#13;&#10;&#13;&#10;        // Lesson creation&#13;&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#13;&#10;        etLessonDescription = findViewById(R.id.et_lesson_description);&#13;&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#13;&#10;        spinnerLessonCategory = findViewById(R.id.spinner_lesson_category);&#13;&#10;        spinnerDifficulty = findViewById(R.id.spinner_difficulty);&#13;&#10;        btnSaveLesson = findViewById(R.id.btn_save_lesson);&#13;&#10;        btnPreviewLesson = findViewById(R.id.btn_preview_lesson);&#13;&#10;&#13;&#10;        // Quiz creation&#13;&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#13;&#10;        etQuizDescription = findViewById(R.id.et_quiz_description);&#13;&#10;        etQuestion = findViewById(R.id.et_question);&#13;&#10;        etOption1 = findViewById(R.id.et_option1);&#13;&#10;        etOption2 = findViewById(R.id.et_option2);&#13;&#10;        etOption3 = findViewById(R.id.et_option3);&#13;&#10;        etOption4 = findViewById(R.id.et_option4);&#13;&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#13;&#10;        rvQuestions = findViewById(R.id.rv_questions);&#13;&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#13;&#10;        btnSaveQuiz = findViewById(R.id.btn_save_quiz);&#13;&#10;        btnPreviewQuiz = findViewById(R.id.btn_preview_quiz);&#13;&#10;&#13;&#10;        // Vocabulary&#13;&#10;        etWord = findViewById(R.id.et_word);&#13;&#10;        etMeaning = findViewById(R.id.et_meaning);&#13;&#10;        etExample = findViewById(R.id.et_example);&#13;&#10;        etPronunciation = findViewById(R.id.et_pronunciation);&#13;&#10;        spinnerWordCategory = findViewById(R.id.spinner_word_category);&#13;&#10;        btnAddWord = findViewById(R.id.btn_add_word);&#13;&#10;        btnSaveVocabulary = findViewById(R.id.btn_save_vocabulary);&#13;&#10;        rvVocabularyList = findViewById(R.id.rv_vocabulary_list);&#13;&#10;&#13;&#10;        // Other components&#13;&#10;        fabPublish = findViewById(R.id.fab_publish);&#13;&#10;        tvContentCount = findViewById(R.id.tv_content_count);&#13;&#10;&#13;&#10;        // Setup RecyclerViews&#13;&#10;        if (rvQuestions != null) {&#13;&#10;            rvQuestions.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        }&#13;&#10;        if (rvVocabularyList != null) {&#13;&#10;            rvVocabularyList.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#13;&#10;            getSupportActionBar().setTitle(&quot;Tạo nội dung&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupTabs() {&#13;&#10;        if (tabLayout != null) {&#13;&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Bài học&quot;));&#13;&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Quiz&quot;));&#13;&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Từ vựng&quot;));&#13;&#10;&#13;&#10;            tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {&#13;&#10;                @Override&#13;&#10;                public void onTabSelected(TabLayout.Tab tab) {&#13;&#10;                    switchContentType(tab.getPosition());&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onTabUnselected(TabLayout.Tab tab) {}&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onTabReselected(TabLayout.Tab tab) {}&#13;&#10;            });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        // Lesson creation&#13;&#10;        if (btnSaveLesson != null) {&#13;&#10;            btnSaveLesson.setOnClickListener(v -&gt; saveLesson());&#13;&#10;        }&#13;&#10;        if (btnPreviewLesson != null) {&#13;&#10;            btnPreviewLesson.setOnClickListener(v -&gt; previewLesson());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Quiz creation&#13;&#10;        if (btnAddQuestion != null) {&#13;&#10;            btnAddQuestion.setOnClickListener(v -&gt; addQuestion());&#13;&#10;        }&#13;&#10;        if (btnSaveQuiz != null) {&#13;&#10;            btnSaveQuiz.setOnClickListener(v -&gt; saveQuiz());&#13;&#10;        }&#13;&#10;        if (btnPreviewQuiz != null) {&#13;&#10;            btnPreviewQuiz.setOnClickListener(v -&gt; previewQuiz());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Vocabulary&#13;&#10;        if (btnAddWord != null) {&#13;&#10;            btnAddWord.setOnClickListener(v -&gt; addWord());&#13;&#10;        }&#13;&#10;        if (btnSaveVocabulary != null) {&#13;&#10;            btnSaveVocabulary.setOnClickListener(v -&gt; saveVocabularyList());&#13;&#10;        }&#13;&#10;&#13;&#10;        // FAB&#13;&#10;        if (fabPublish != null) {&#13;&#10;            fabPublish.setOnClickListener(v -&gt; publishContent());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleModeSpecificSetup() {&#13;&#10;        if (&quot;lesson&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#13;&#10;            tabLayout.getTabAt(0).select();&#13;&#10;            switchContentType(0);&#13;&#10;        } else if (&quot;quiz&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#13;&#10;            tabLayout.getTabAt(1).select();&#13;&#10;            switchContentType(1);&#13;&#10;        } else if (&quot;vocabulary&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#13;&#10;            tabLayout.getTabAt(2).select();&#13;&#10;            switchContentType(2);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void switchContentType(int position) {&#13;&#10;        // Hide all layouts first&#13;&#10;        hideAllLayouts();&#13;&#10;&#13;&#10;        switch (position) {&#13;&#10;            case 0: // Lesson&#13;&#10;                if (layoutLessonForm != null) {&#13;&#10;                    layoutLessonForm.setVisibility(View.VISIBLE);&#13;&#10;                }&#13;&#10;                break;&#13;&#10;            case 1: // Quiz&#13;&#10;                if (layoutQuizForm != null) {&#13;&#10;                    layoutQuizForm.setVisibility(View.VISIBLE);&#13;&#10;                }&#13;&#10;                break;&#13;&#10;            case 2: // Vocabulary&#13;&#10;                if (layoutVocabularyForm != null) {&#13;&#10;                    layoutVocabularyForm.setVisibility(View.VISIBLE);&#13;&#10;                }&#13;&#10;                break;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void hideAllLayouts() {&#13;&#10;        if (layoutLessonForm != null) layoutLessonForm.setVisibility(View.GONE);&#13;&#10;        if (layoutQuizForm != null) layoutQuizForm.setVisibility(View.GONE);&#13;&#10;        if (layoutVocabularyForm != null) layoutVocabularyForm.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveLesson() {&#13;&#10;        if (teacherId == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không thể xác định giáo viên&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String title = etLessonTitle != null ? etLessonTitle.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String description = etLessonDescription != null ? etLessonDescription.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String content = etLessonContent != null ? etLessonContent.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (title.isEmpty() || content.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng nhập đầy đủ tiêu đề và nội dung&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#13;&#10;        lessonData.put(&quot;teacherId&quot;, teacherId);&#13;&#10;        lessonData.put(&quot;title&quot;, title);&#13;&#10;        lessonData.put(&quot;description&quot;, description);&#13;&#10;        lessonData.put(&quot;content&quot;, content);&#13;&#10;        lessonData.put(&quot;type&quot;, &quot;lesson&quot;);&#13;&#10;        lessonData.put(&quot;createdAt&quot;, System.currentTimeMillis());&#13;&#10;        lessonData.put(&quot;status&quot;, &quot;draft&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;content&quot;)&#13;&#10;                .add(lessonData)&#13;&#10;                .addOnSuccessListener(documentReference -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Bài học đã được lưu thành công!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    clearLessonForm();&#13;&#10;                    updateContentCount();&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void previewLesson() {&#13;&#10;        Intent intent = new Intent(this, CourseListActivity.class);&#13;&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#13;&#10;        intent.putExtra(&quot;title&quot;, etLessonTitle != null ? etLessonTitle.getText().toString() : &quot;&quot;);&#13;&#10;        startActivity(intent);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addQuestion() {&#13;&#10;        String question = etQuestion != null ? etQuestion.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option1 = etOption1 != null ? etOption1.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option2 = etOption2 != null ? etOption2.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option3 = etOption3 != null ? etOption3.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option4 = etOption4 != null ? etOption4.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (question.isEmpty() || option1.isEmpty() || option2.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng nhập câu hỏi và ít nhất 2 đáp án&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        int correctAnswer = 0;&#13;&#10;        if (rgCorrectAnswer != null &amp;&amp; rgCorrectAnswer.getCheckedRadioButtonId() != -1) {&#13;&#10;            RadioButton selectedButton = findViewById(rgCorrectAnswer.getCheckedRadioButtonId());&#13;&#10;            // Logic to determine correct answer index&#13;&#10;        }&#13;&#10;&#13;&#10;        // Add question to list (implementation would involve adapter)&#13;&#10;        Toast.makeText(this, &quot;Câu hỏi đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;        clearQuestionForm();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveQuiz() {&#13;&#10;        // Implementation similar to saveLesson&#13;&#10;        Toast.makeText(this, &quot;Quiz đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void previewQuiz() {&#13;&#10;        Intent intent = new Intent(this, QuizActivity.class);&#13;&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#13;&#10;        startActivity(intent);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addWord() {&#13;&#10;        String word = etWord != null ? etWord.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String meaning = etMeaning != null ? etMeaning.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String example = etExample != null ? etExample.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (word.isEmpty() || meaning.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng nhập từ và nghĩa&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Add word to vocabulary list&#13;&#10;        Toast.makeText(this, &quot;Từ vựng đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;        clearVocabularyForm();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveVocabularyList() {&#13;&#10;        Toast.makeText(this, &quot;Danh sách từ vựng đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void publishContent() {&#13;&#10;        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this);&#13;&#10;        builder.setTitle(&quot;Xuất bản nội dung&quot;)&#13;&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xuất bản nội dung này? Học viên sẽ có thể truy cập.&quot;)&#13;&#10;                .setPositiveButton(&quot;Xuất bản&quot;, (dialog, which) -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Nội dung đã được xuất bản!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                })&#13;&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#13;&#10;                .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void clearLessonForm() {&#13;&#10;        if (etLessonTitle != null) etLessonTitle.setText(&quot;&quot;);&#13;&#10;        if (etLessonDescription != null) etLessonDescription.setText(&quot;&quot;);&#13;&#10;        if (etLessonContent != null) etLessonContent.setText(&quot;&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void clearQuestionForm() {&#13;&#10;        if (etQuestion != null) etQuestion.setText(&quot;&quot;);&#13;&#10;        if (etOption1 != null) etOption1.setText(&quot;&quot;);&#13;&#10;        if (etOption2 != null) etOption2.setText(&quot;&quot;);&#13;&#10;        if (etOption3 != null) etOption3.setText(&quot;&quot;);&#13;&#10;        if (etOption4 != null) etOption4.setText(&quot;&quot;);&#13;&#10;        if (rgCorrectAnswer != null) rgCorrectAnswer.clearCheck();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void clearVocabularyForm() {&#13;&#10;        if (etWord != null) etWord.setText(&quot;&quot;);&#13;&#10;        if (etMeaning != null) etMeaning.setText(&quot;&quot;);&#13;&#10;        if (etExample != null) etExample.setText(&quot;&quot;);&#13;&#10;        if (etPronunciation != null) etPronunciation.setText(&quot;&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadExistingContent() {&#13;&#10;        updateContentCount();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateContentCount() {&#13;&#10;        if (teacherId != null) {&#13;&#10;            db.collection(&quot;content&quot;)&#13;&#10;                    .whereEqualTo(&quot;teacherId&quot;, teacherId)&#13;&#10;                    .get()&#13;&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                        int count = queryDocumentSnapshots.size();&#13;&#10;                        if (tvContentCount != null) {&#13;&#10;                            tvContentCount.setText(&quot;Đã tạo: &quot; + count + &quot; nội dung&quot;);&#13;&#10;                        }&#13;&#10;                    });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            onBackPressed();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBackPressed() {&#13;&#10;        super.onBackPressed();&#13;&#10;        Intent intent = new Intent(this, TeacherDashboardActivity.class);&#13;&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#13;&#10;        startActivity(intent);&#13;&#10;        finish();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseRequestManagementActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseRequestManagementActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.DocumentSnapshot;&#10;import com.vantinh.tienganh.utils.RealtimeManager;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class CourseRequestManagementActivity extends AppCompatActivity implements CourseRequestAdapter.OnRequestActionListener {&#10;&#10;    private RecyclerView recyclerView;&#10;    private CourseRequestAdapter adapter;&#10;    private List&lt;CourseRequest&gt; requestList;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth auth;&#10;    private RealtimeManager realtimeManager;&#10;    private String currentTeacherId; // Đổi từ currentTeacherName sang currentTeacherId&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_course_request_management);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCurrentTeacherInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        recyclerView = findViewById(R.id.recycler_view_requests);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        requestList = new ArrayList&lt;&gt;();&#10;        adapter = new CourseRequestAdapter(requestList, this);&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        // Bỏ các debug buttons - không cần thiết nữa&#10;    }&#10;&#10;    // Debug method được cải thiện để kiểm tra tất cả dữ liệu&#10;    private void checkAllDataInFirebase() {&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;=== DEBUGGING: Current teacherId: &quot; + currentTeacherId + &quot; ===&quot;);&#10;&#10;        // Bước 1: Kiểm tra tất cả courseRequests trước&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .get()&#10;                .addOnSuccessListener(allRequestDocs -&gt; {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;TOTAL courseRequests in Firebase: &quot; + allRequestDocs.size());&#10;&#10;                    // Hiển thị tất cả requests để debug&#10;                    StringBuilder allRequestsInfo = new StringBuilder();&#10;                    int matchingCount = 0;&#10;&#10;                    for (DocumentSnapshot doc : allRequestDocs.getDocuments()) {&#10;                        String docTeacherId = doc.getString(&quot;teacherId&quot;);&#10;                        String studentName = doc.getString(&quot;studentName&quot;);&#10;                        String courseName = doc.getString(&quot;courseName&quot;);&#10;                        String status = doc.getString(&quot;status&quot;);&#10;&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Request: &quot; + studentName +&#10;                            &quot; -&gt; &quot; + courseName + &quot; [status: &quot; + status + &quot;] [teacherId: &quot; + docTeacherId + &quot;]&quot;);&#10;&#10;                        allRequestsInfo.append(&quot;• &quot;).append(studentName).append(&quot; - &quot;).append(courseName)&#10;                            .append(&quot; (Teacher: &quot;).append(docTeacherId).append(&quot;)\n&quot;);&#10;&#10;                        // Kiểm tra xem có match với current teacherId không&#10;                        if (currentTeacherId != null &amp;&amp; currentTeacherId.equals(docTeacherId)) {&#10;                            matchingCount++;&#10;                        }&#10;                    }&#10;&#10;                    // Hiển thị kết quả debug&#10;                    final int finalMatchingCount = matchingCount; // Tạo biến final để dùng trong lambda&#10;                    final String debugMessage = &quot;=== DEBUG INFO ===\n&quot; +&#10;                        &quot;Current Teacher ID: &quot; + currentTeacherId + &quot;\n&quot; +&#10;                        &quot;Total Requests: &quot; + allRequestDocs.size() + &quot;\n&quot; +&#10;                        &quot;Matching Requests: &quot; + finalMatchingCount + &quot;\n\n&quot; +&#10;                        &quot;All Requests:\n&quot; + allRequestsInfo.toString();&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        // Hiển thị trong dialog để dễ đọc&#10;                        new androidx.appcompat.app.AlertDialog.Builder(CourseRequestManagementActivity.this)&#10;                            .setTitle(&quot;Firebase Debug Info&quot;)&#10;                            .setMessage(debugMessage)&#10;                            .setPositiveButton(&quot;OK&quot;, null)&#10;                            .show();&#10;&#10;                        Toast.makeText(CourseRequestManagementActivity.this,&#10;                            &quot;DEBUG: Found &quot; + allRequestDocs.size() + &quot; total, &quot; + finalMatchingCount + &quot; matching&quot;,&#10;                            Toast.LENGTH_LONG).show();&#10;                    });&#10;&#10;                    // Bước 2: Kiểm tra courses collection để verify teacherId&#10;                    checkTeacherCourses();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error checking all courseRequests&quot;, e);&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(this, &quot;DEBUG ERROR: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    });&#10;                });&#10;    }&#10;&#10;    // Method mới để kiểm tra courses của teacher&#10;    private void checkTeacherCourses() {&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;=== DEBUGGING: Checking teacher's courses ===&quot;);&#10;&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, currentTeacherId)&#10;                .get()&#10;                .addOnSuccessListener(courseDocs -&gt; {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Found &quot; + courseDocs.size() + &quot; courses for teacherId: &quot; + currentTeacherId);&#10;&#10;                    StringBuilder coursesInfo = new StringBuilder();&#10;                    for (DocumentSnapshot doc : courseDocs.getDocuments()) {&#10;                        String title = doc.getString(&quot;title&quot;);&#10;                        String courseId = doc.getId();&#10;                        coursesInfo.append(&quot;• &quot;).append(title).append(&quot; (ID: &quot;).append(courseId).append(&quot;)\n&quot;);&#10;&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Teacher's course: &quot; + title + &quot; [ID: &quot; + courseId + &quot;]&quot;);&#10;                    }&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        if (courseDocs.isEmpty()) {&#10;                            Toast.makeText(this, &quot;DEBUG: Teacher has NO courses!&quot;, Toast.LENGTH_LONG).show();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;DEBUG: Teacher has &quot; + courseDocs.size() + &quot; courses&quot;, Toast.LENGTH_LONG).show();&#10;                        }&#10;                    });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error checking teacher courses&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Yêu cầu tham gia khóa học&quot;);&#10;        }&#10;        toolbar.setNavigationOnClickListener(v -&gt; finish());&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;        auth = FirebaseAuth.getInstance();&#10;        realtimeManager = RealtimeManager.getInstance();&#10;    }&#10;&#10;    private void getCurrentTeacherInfo() {&#10;        String currentUserId = auth.getCurrentUser().getUid();&#10;        currentTeacherId = currentUserId; // Sử dụng Firebase UID làm teacherId&#10;&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;Current teacherId: &quot; + currentTeacherId);&#10;        setupRealtimeRequests(); // Setup ngay lập tức với teacherId&#10;    }&#10;&#10;    // Sử dụng RealtimeManager với teacherId&#10;    private void setupRealtimeRequests() {&#10;        if (currentTeacherId == null) {&#10;            Log.e(&quot;CourseRequestManagement&quot;, &quot;TeacherId is null - cannot setup listeners&quot;);&#10;            Toast.makeText(this, &quot;Không thể tải thông tin giáo viên&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;Setting up real-time listener for teacherId: '&quot; + currentTeacherId + &quot;'&quot;);&#10;&#10;        // Load trực tiếp với teacherId&#10;        loadRequestsDirectly();&#10;&#10;        realtimeManager.listenToCourseRequests(currentTeacherId,&#10;            new RealtimeManager.OnDataChangeListener&lt;CourseRequest&gt;() {&#10;                @Override&#10;                public void onDataChanged(List&lt;CourseRequest&gt; data) {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Real-time update received: &quot; + data.size() + &quot; requests&quot;);&#10;&#10;                    requestList.clear();&#10;                    requestList.addAll(data);&#10;&#10;                    // Update UI với animation&#10;                    runOnUiThread(() -&gt; {&#10;                        adapter.updateList(requestList);&#10;&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Updated RecyclerView with &quot; + requestList.size() + &quot; items&quot;);&#10;&#10;                        // Fade in animation cho RecyclerView&#10;                        recyclerView.setAlpha(0f);&#10;                        recyclerView.animate()&#10;                                .alpha(1f)&#10;                                .setDuration(300)&#10;                                .start();&#10;                    });&#10;&#10;                    // Show notification cho yêu cầu&#10;                    if (!data.isEmpty()) {&#10;                        showNewRequestNotification(data.size());&#10;                    } else {&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;No requests found for teacherId: &quot; + currentTeacherId);&#10;                        runOnUiThread(() -&gt; {&#10;                            Toast.makeText(CourseRequestManagementActivity.this, &quot;Chưa có yêu cầu nào&quot;, Toast.LENGTH_SHORT).show();&#10;                        });&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(Exception e) {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Real-time error: &quot; + e.getMessage(), e);&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(CourseRequestManagementActivity.this,&#10;                            &quot;Lỗi real-time: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    });&#10;&#10;                    // Fallback to direct loading&#10;                    loadRequestsDirectly();&#10;                }&#10;            });&#10;    }&#10;&#10;    // Method fallback với teacherId - chỉ lấy pending requests&#10;    private void loadRequestsDirectly() {&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;Loading PENDING course requests only&quot;);&#10;&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)  // Chỉ lấy pending requests&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    requestList.clear();&#10;                    int totalDocs = queryDocumentSnapshots.size();&#10;&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Found &quot; + totalDocs + &quot; pending requests&quot;);&#10;&#10;                    for (DocumentSnapshot doc : queryDocumentSnapshots.getDocuments()) {&#10;                        CourseRequest request = doc.toObject(CourseRequest.class);&#10;                        if (request != null &amp;&amp; &quot;pending&quot;.equals(request.getStatus())) {&#10;                            requestList.add(request);&#10;                            Log.d(&quot;CourseRequestManagement&quot;, &quot;Added pending request from: &quot; + request.getStudentName() +&#10;                                &quot; for course: &quot; + request.getCourseName() + &quot; with status: &quot; + request.getStatus());&#10;                        }&#10;                    }&#10;&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Loaded &quot; + requestList.size() + &quot; pending requests&quot;);&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        adapter.updateList(requestList);&#10;                        if (requestList.isEmpty()) {&#10;                            Toast.makeText(this, &quot;Không có yêu cầu pending nào&quot;, Toast.LENGTH_SHORT).show();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Hiển thị &quot; + requestList.size() + &quot; yêu cầu pending&quot;, Toast.LENGTH_SHORT).show();&#10;                        }&#10;&#10;                        // Cập nhật title&#10;                        if (getSupportActionBar() != null) {&#10;                            getSupportActionBar().setTitle(&quot;Yêu cầu tham gia (&quot; + requestList.size() + &quot;)&quot;);&#10;                        }&#10;                    });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error loading pending requests&quot;, e);&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(this, &quot;Lỗi khi tải dữ liệu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    });&#10;                });&#10;    }&#10;&#10;    private void showNewRequestNotification(int count) {&#10;        // Hiển thị notification subtle về số lượng yêu cầu&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Yêu cầu tham gia (&quot; + count + &quot;)&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onApprove(CourseRequest request) {&#10;        updateRequestStatus(request, &quot;approved&quot;);&#10;        createEnrollment(request);&#10;    }&#10;&#10;    @Override&#10;    public void onReject(CourseRequest request) {&#10;        updateRequestStatus(request, &quot;rejected&quot;);&#10;    }&#10;&#10;    private void updateRequestStatus(CourseRequest request, String status) {&#10;        // Tìm document trong courseRequests để cập nhật&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, request.getStudentId())&#10;                .whereEqualTo(&quot;courseId&quot;, request.getCourseId())&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        DocumentSnapshot doc = queryDocumentSnapshots.getDocuments().get(0);&#10;                        db.collection(&quot;courseRequests&quot;).document(doc.getId())&#10;                                .update(&quot;status&quot;, status)&#10;                                .addOnSuccessListener(aVoid -&gt; {&#10;                                    // Cập nhật Firebase thành công, giờ cập nhật UI ngay lập tức&#10;                                    removeRequestFromList(request);&#10;&#10;                                    Toast.makeText(this,&#10;                                        status.equals(&quot;approved&quot;) ? &quot;Đã phê duyệt yêu cầu&quot; : &quot;Đã từ chối yêu cầu&quot;,&#10;                                        Toast.LENGTH_SHORT).show();&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error updating request status&quot;, e);&#10;                                    Toast.makeText(this, &quot;Lỗi khi cập nhật trạng thái&quot;, Toast.LENGTH_SHORT).show();&#10;                                });&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error finding request&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void removeRequestFromList(CourseRequest request) {&#10;        // Tìm và loại bỏ request khỏi danh sách&#10;        for (int i = 0; i &lt; requestList.size(); i++) {&#10;            CourseRequest item = requestList.get(i);&#10;            if (item.getStudentId().equals(request.getStudentId()) &amp;&amp;&#10;                item.getCourseId().equals(request.getCourseId())) {&#10;&#10;                // Tạo biến final để sử dụng trong lambda&#10;                final int indexToRemove = i;&#10;&#10;                // Loại bỏ item khỏi danh sách&#10;                requestList.remove(i);&#10;&#10;                // Cập nhật adapter ngay lập tức&#10;                runOnUiThread(() -&gt; {&#10;                    adapter.notifyItemRemoved(indexToRemove);&#10;&#10;                    // Cập nhật title với số lượng mới&#10;                    if (getSupportActionBar() != null) {&#10;                        getSupportActionBar().setTitle(&quot;Yêu cầu tham gia (&quot; + requestList.size() + &quot;)&quot;);&#10;                    }&#10;&#10;                    // Hiển thị thông báo nếu không còn yêu cầu nào&#10;                    if (requestList.isEmpty()) {&#10;                        Toast.makeText(CourseRequestManagementActivity.this, &quot;Đã xử lý hết tất cả yêu cầu&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                });&#10;&#10;                Log.d(&quot;CourseRequestManagement&quot;, &quot;Removed request from list - Student: &quot; +&#10;                      request.getStudentName() + &quot;, Course: &quot; + request.getCourseName());&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    private void createEnrollment(CourseRequest request) {&#10;        Map&lt;String, Object&gt; enrollment = new HashMap&lt;&gt;();&#10;        enrollment.put(&quot;courseID&quot;, request.getCourseId());        // Sửa từ &quot;courseId&quot; thành &quot;courseID&quot;&#10;        enrollment.put(&quot;courseName&quot;, request.getCourseName());&#10;        enrollment.put(&quot;enrollmentDate&quot;, new Date());&#10;        enrollment.put(&quot;studentEmail&quot;, request.getStudentEmail());&#10;        enrollment.put(&quot;studentID&quot;, request.getStudentId());      // Sửa từ &quot;studentId&quot; thành &quot;studentID&quot;&#10;        enrollment.put(&quot;fullName&quot;, request.getStudentName());&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .add(enrollment)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Enrollment created successfully: &quot; + documentReference.getId());&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Created enrollment - CourseID: &quot; + request.getCourseId() + &quot;, StudentID: &quot; + request.getStudentId() + &quot;, Name: &quot; + request.getStudentName());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error creating enrollment&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Cleanup listeners&#10;        if (realtimeManager != null) {&#10;            realtimeManager.removeAllListeners();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.DocumentSnapshot;&#10;import com.vantinh.tienganh.utils.RealtimeManager;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class CourseRequestManagementActivity extends AppCompatActivity implements CourseRequestAdapter.OnRequestActionListener {&#10;&#10;    private RecyclerView recyclerView;&#10;    private CourseRequestAdapter adapter;&#10;    private List&lt;CourseRequest&gt; requestList;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth auth;&#10;    private RealtimeManager realtimeManager;&#10;    private String currentTeacherId; // Đổi từ currentTeacherName sang currentTeacherId&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_course_request_management);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCurrentTeacherInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        recyclerView = findViewById(R.id.recycler_view_requests);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        requestList = new ArrayList&lt;&gt;();&#10;        adapter = new CourseRequestAdapter(requestList, this);&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        // Bỏ các debug buttons - không cần thiết nữa&#10;    }&#10;&#10;    // Debug method được cải thiện để kiểm tra tất cả dữ liệu&#10;    private void checkAllDataInFirebase() {&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;=== DEBUGGING: Current teacherId: &quot; + currentTeacherId + &quot; ===&quot;);&#10;&#10;        // Bước 1: Kiểm tra tất cả courseRequests trước&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .get()&#10;                .addOnSuccessListener(allRequestDocs -&gt; {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;TOTAL courseRequests in Firebase: &quot; + allRequestDocs.size());&#10;&#10;                    // Hiển thị tất cả requests để debug&#10;                    StringBuilder allRequestsInfo = new StringBuilder();&#10;                    int matchingCount = 0;&#10;&#10;                    for (DocumentSnapshot doc : allRequestDocs.getDocuments()) {&#10;                        String docTeacherId = doc.getString(&quot;teacherId&quot;);&#10;                        String studentName = doc.getString(&quot;studentName&quot;);&#10;                        String courseName = doc.getString(&quot;courseName&quot;);&#10;                        String status = doc.getString(&quot;status&quot;);&#10;&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Request: &quot; + studentName +&#10;                            &quot; -&gt; &quot; + courseName + &quot; [status: &quot; + status + &quot;] [teacherId: &quot; + docTeacherId + &quot;]&quot;);&#10;&#10;                        allRequestsInfo.append(&quot;• &quot;).append(studentName).append(&quot; - &quot;).append(courseName)&#10;                            .append(&quot; (Teacher: &quot;).append(docTeacherId).append(&quot;)\n&quot;);&#10;&#10;                        // Kiểm tra xem có match với current teacherId không&#10;                        if (currentTeacherId != null &amp;&amp; currentTeacherId.equals(docTeacherId)) {&#10;                            matchingCount++;&#10;                        }&#10;                    }&#10;&#10;                    // Hiển thị kết quả debug&#10;                    final int finalMatchingCount = matchingCount; // Tạo biến final để dùng trong lambda&#10;                    final String debugMessage = &quot;=== DEBUG INFO ===\n&quot; +&#10;                        &quot;Current Teacher ID: &quot; + currentTeacherId + &quot;\n&quot; +&#10;                        &quot;Total Requests: &quot; + allRequestDocs.size() + &quot;\n&quot; +&#10;                        &quot;Matching Requests: &quot; + finalMatchingCount + &quot;\n\n&quot; +&#10;                        &quot;All Requests:\n&quot; + allRequestsInfo.toString();&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        // Hiển thị trong dialog để dễ đọc&#10;                        new androidx.appcompat.app.AlertDialog.Builder(CourseRequestManagementActivity.this)&#10;                            .setTitle(&quot;Firebase Debug Info&quot;)&#10;                            .setMessage(debugMessage)&#10;                            .setPositiveButton(&quot;OK&quot;, null)&#10;                            .show();&#10;&#10;                        Toast.makeText(CourseRequestManagementActivity.this,&#10;                            &quot;DEBUG: Found &quot; + allRequestDocs.size() + &quot; total, &quot; + finalMatchingCount + &quot; matching&quot;,&#10;                            Toast.LENGTH_LONG).show();&#10;                    });&#10;&#10;                    // Bước 2: Kiểm tra courses collection để verify teacherId&#10;                    checkTeacherCourses();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error checking all courseRequests&quot;, e);&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(this, &quot;DEBUG ERROR: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    });&#10;                });&#10;    }&#10;&#10;    // Method mới để kiểm tra courses của teacher&#10;    private void checkTeacherCourses() {&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;=== DEBUGGING: Checking teacher's courses ===&quot;);&#10;&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, currentTeacherId)&#10;                .get()&#10;                .addOnSuccessListener(courseDocs -&gt; {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Found &quot; + courseDocs.size() + &quot; courses for teacherId: &quot; + currentTeacherId);&#10;&#10;                    StringBuilder coursesInfo = new StringBuilder();&#10;                    for (DocumentSnapshot doc : courseDocs.getDocuments()) {&#10;                        String title = doc.getString(&quot;title&quot;);&#10;                        String courseId = doc.getId();&#10;                        coursesInfo.append(&quot;• &quot;).append(title).append(&quot; (ID: &quot;).append(courseId).append(&quot;)\n&quot;);&#10;&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Teacher's course: &quot; + title + &quot; [ID: &quot; + courseId + &quot;]&quot;);&#10;                    }&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        if (courseDocs.isEmpty()) {&#10;                            Toast.makeText(this, &quot;DEBUG: Teacher has NO courses!&quot;, Toast.LENGTH_LONG).show();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;DEBUG: Teacher has &quot; + courseDocs.size() + &quot; courses&quot;, Toast.LENGTH_LONG).show();&#10;                        }&#10;                    });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error checking teacher courses&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Yêu cầu tham gia khóa học&quot;);&#10;        }&#10;        toolbar.setNavigationOnClickListener(v -&gt; finish());&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;        auth = FirebaseAuth.getInstance();&#10;        realtimeManager = RealtimeManager.getInstance();&#10;    }&#10;&#10;    private void getCurrentTeacherInfo() {&#10;        String currentUserId = auth.getCurrentUser().getUid();&#10;        currentTeacherId = currentUserId; // Sử dụng Firebase UID làm teacherId&#10;&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;Current teacherId: &quot; + currentTeacherId);&#10;        setupRealtimeRequests(); // Setup ngay lập tức với teacherId&#10;    }&#10;&#10;    // Sử dụng RealtimeManager với teacherId&#10;    private void setupRealtimeRequests() {&#10;        if (currentTeacherId == null) {&#10;            Log.e(&quot;CourseRequestManagement&quot;, &quot;TeacherId is null - cannot setup listeners&quot;);&#10;            Toast.makeText(this, &quot;Không thể tải thông tin giáo viên&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;Setting up real-time listener for teacherId: '&quot; + currentTeacherId + &quot;'&quot;);&#10;&#10;        // Load trực tiếp với teacherId&#10;        loadRequestsDirectly();&#10;&#10;        // TẠM THỜI TẮT RealtimeManager để debug&#10;        /*&#10;        realtimeManager.listenToCourseRequests(currentTeacherId,&#10;            new RealtimeManager.OnDataChangeListener&lt;CourseRequest&gt;() {&#10;                @Override&#10;                public void onDataChanged(List&lt;CourseRequest&gt; data) {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Real-time update received: &quot; + data.size() + &quot; requests&quot;);&#10;&#10;                    requestList.clear();&#10;                    requestList.addAll(data);&#10;&#10;                    // Update UI với animation&#10;                    runOnUiThread(() -&gt; {&#10;                        adapter.updateList(requestList);&#10;&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Updated RecyclerView with &quot; + requestList.size() + &quot; items&quot;);&#10;&#10;                        // Fade in animation cho RecyclerView&#10;                        recyclerView.setAlpha(0f);&#10;                        recyclerView.animate()&#10;                                .alpha(1f)&#10;                                .setDuration(300)&#10;                                .start();&#10;                    });&#10;&#10;                    // Show notification cho yêu cầu&#10;                    if (!data.isEmpty()) {&#10;                        showNewRequestNotification(data.size());&#10;                    } else {&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;No requests found for teacherId: &quot; + currentTeacherId);&#10;                        runOnUiThread(() -&gt; {&#10;                            Toast.makeText(CourseRequestManagementActivity.this, &quot;Chưa có yêu cầu nào&quot;, Toast.LENGTH_SHORT).show();&#10;                        });&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(Exception e) {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Real-time error: &quot; + e.getMessage(), e);&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(CourseRequestManagementActivity.this,&#10;                            &quot;Lỗi real-time: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    });&#10;&#10;                    // Fallback to direct loading&#10;                    loadRequestsDirectly();&#10;                }&#10;            });&#10;        */&#10;    }&#10;&#10;    // Method fallback với teacherId - chỉ lấy pending requests&#10;    private void loadRequestsDirectly() {&#10;        Log.d(&quot;CourseRequestManagement&quot;, &quot;Loading PENDING course requests only&quot;);&#10;&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)  // Chỉ lấy pending requests&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    requestList.clear();&#10;                    int totalDocs = queryDocumentSnapshots.size();&#10;&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Found &quot; + totalDocs + &quot; pending requests&quot;);&#10;&#10;                    for (DocumentSnapshot doc : queryDocumentSnapshots.getDocuments()) {&#10;                        CourseRequest request = doc.toObject(CourseRequest.class);&#10;                        if (request != null &amp;&amp; &quot;pending&quot;.equals(request.getStatus())) {&#10;                            requestList.add(request);&#10;                            Log.d(&quot;CourseRequestManagement&quot;, &quot;Added pending request from: &quot; + request.getStudentName() +&#10;                                &quot; for course: &quot; + request.getCourseName() + &quot; with status: &quot; + request.getStatus());&#10;                        }&#10;                    }&#10;&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Loaded &quot; + requestList.size() + &quot; pending requests&quot;);&#10;&#10;                    runOnUiThread(() -&gt; {&#10;                        // Debug: Kiểm tra adapter và RecyclerView&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Updating adapter with &quot; + requestList.size() + &quot; items&quot;);&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;RecyclerView is null: &quot; + (recyclerView == null));&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Adapter is null: &quot; + (adapter == null));&#10;                        &#10;                        adapter.updateList(requestList);&#10;                        adapter.notifyDataSetChanged(); // Force update&#10;                        &#10;                        // Debug: Kiểm tra adapter count&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;Adapter item count after update: &quot; + adapter.getItemCount());&#10;                        &#10;                        if (requestList.isEmpty()) {&#10;                            Toast.makeText(this, &quot;Không có yêu cầu pending nào&quot;, Toast.LENGTH_SHORT).show();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Hiển thị &quot; + requestList.size() + &quot; yêu cầu pending&quot;, Toast.LENGTH_SHORT).show();&#10;                        }&#10;&#10;                        // Cập nhật title&#10;                        if (getSupportActionBar() != null) {&#10;                            getSupportActionBar().setTitle(&quot;Yêu cầu tham gia (&quot; + requestList.size() + &quot;)&quot;);&#10;                        }&#10;                        &#10;                        // Debug: Force RecyclerView to be visible&#10;                        recyclerView.setVisibility(android.view.View.VISIBLE);&#10;                        Log.d(&quot;CourseRequestManagement&quot;, &quot;RecyclerView visibility set to VISIBLE&quot;);&#10;                    });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error loading pending requests&quot;, e);&#10;                    runOnUiThread(() -&gt; {&#10;                        Toast.makeText(this, &quot;Lỗi khi tải dữ liệu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    });&#10;                });&#10;    }&#10;&#10;    private void showNewRequestNotification(int count) {&#10;        // Hiển thị notification subtle về số lượng yêu cầu&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Yêu cầu tham gia (&quot; + count + &quot;)&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onApprove(CourseRequest request) {&#10;        updateRequestStatus(request, &quot;approved&quot;);&#10;        createEnrollment(request);&#10;    }&#10;&#10;    @Override&#10;    public void onReject(CourseRequest request) {&#10;        updateRequestStatus(request, &quot;rejected&quot;);&#10;    }&#10;&#10;    private void updateRequestStatus(CourseRequest request, String status) {&#10;        // Tìm document trong courseRequests để cập nhật&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, request.getStudentId())&#10;                .whereEqualTo(&quot;courseId&quot;, request.getCourseId())&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        DocumentSnapshot doc = queryDocumentSnapshots.getDocuments().get(0);&#10;                        db.collection(&quot;courseRequests&quot;).document(doc.getId())&#10;                                .update(&quot;status&quot;, status)&#10;                                .addOnSuccessListener(aVoid -&gt; {&#10;                                    // Cập nhật Firebase thành công, giờ cập nhật UI ngay lập tức&#10;                                    removeRequestFromList(request);&#10;&#10;                                    Toast.makeText(this,&#10;                                        status.equals(&quot;approved&quot;) ? &quot;Đã phê duyệt yêu cầu&quot; : &quot;Đã từ chối yêu cầu&quot;,&#10;                                        Toast.LENGTH_SHORT).show();&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error updating request status&quot;, e);&#10;                                    Toast.makeText(this, &quot;Lỗi khi cập nhật trạng thái&quot;, Toast.LENGTH_SHORT).show();&#10;                                });&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error finding request&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void removeRequestFromList(CourseRequest request) {&#10;        // Tìm và loại bỏ request khỏi danh sách&#10;        for (int i = 0; i &lt; requestList.size(); i++) {&#10;            CourseRequest item = requestList.get(i);&#10;            if (item.getStudentId().equals(request.getStudentId()) &amp;&amp;&#10;                item.getCourseId().equals(request.getCourseId())) {&#10;&#10;                // Tạo biến final để sử dụng trong lambda&#10;                final int indexToRemove = i;&#10;&#10;                // Loại bỏ item khỏi danh sách&#10;                requestList.remove(i);&#10;&#10;                // Cập nhật adapter ngay lập tức&#10;                runOnUiThread(() -&gt; {&#10;                    adapter.notifyItemRemoved(indexToRemove);&#10;&#10;                    // Cập nhật title với số lượng mới&#10;                    if (getSupportActionBar() != null) {&#10;                        getSupportActionBar().setTitle(&quot;Yêu cầu tham gia (&quot; + requestList.size() + &quot;)&quot;);&#10;                    }&#10;&#10;                    // Hiển thị thông báo nếu không còn yêu cầu nào&#10;                    if (requestList.isEmpty()) {&#10;                        Toast.makeText(CourseRequestManagementActivity.this, &quot;Đã xử lý hết tất cả yêu cầu&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                });&#10;&#10;                Log.d(&quot;CourseRequestManagement&quot;, &quot;Removed request from list - Student: &quot; +&#10;                      request.getStudentName() + &quot;, Course: &quot; + request.getCourseName());&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    private void createEnrollment(CourseRequest request) {&#10;        Map&lt;String, Object&gt; enrollment = new HashMap&lt;&gt;();&#10;        enrollment.put(&quot;courseID&quot;, request.getCourseId());        // Sửa từ &quot;courseId&quot; thành &quot;courseID&quot;&#10;        enrollment.put(&quot;courseName&quot;, request.getCourseName());&#10;        enrollment.put(&quot;enrollmentDate&quot;, new Date());&#10;        enrollment.put(&quot;studentEmail&quot;, request.getStudentEmail());&#10;        enrollment.put(&quot;studentID&quot;, request.getStudentId());      // Sửa từ &quot;studentId&quot; thành &quot;studentID&quot;&#10;        enrollment.put(&quot;fullName&quot;, request.getStudentName());&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .add(enrollment)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Enrollment created successfully: &quot; + documentReference.getId());&#10;                    Log.d(&quot;CourseRequestManagement&quot;, &quot;Created enrollment - CourseID: &quot; + request.getCourseId() + &quot;, StudentID: &quot; + request.getStudentId() + &quot;, Name: &quot; + request.getStudentName());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;CourseRequestManagement&quot;, &quot;Error creating enrollment&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Cleanup listeners&#10;        if (realtimeManager != null) {&#10;            realtimeManager.removeAllListeners();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseStudentsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseStudentsActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CourseStudentsActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvStudents;&#10;    private TextView tvNoStudents, tvCourseTitle;&#10;    private ProgressBar progressBar;&#10;    private BottomNavigationView bottomNavigation;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;CourseStudent&gt; studentList;&#10;    private CourseStudentAdapter studentAdapter;&#10;    private String courseId, courseTitle;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_course_students);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        studentList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupBottomNavigation();&#10;        setupRecyclerView();&#10;        loadStudents();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#10;        rvStudents = findViewById(R.id.rv_students);&#10;        tvNoStudents = findViewById(R.id.tv_no_students);&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;&#10;        if (courseTitle != null) {&#10;            tvCourseTitle.setText(courseTitle);&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Danh sách học viên&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setSelectedItemId(R.id.nav_students);&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                startActivity(new Intent(this, CourseManagementActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_students) {&#10;                // Already on students&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        studentAdapter = new CourseStudentAdapter(studentList, new CourseStudentAdapter.OnStudentActionListener() {&#10;            @Override&#10;            public void onViewProgress(CourseStudent student) {&#10;                Intent intent = new Intent(CourseStudentsActivity.this, StudentProgressDetailActivity.class);&#10;                intent.putExtra(&quot;studentId&quot;, student.getStudentId());&#10;                intent.putExtra(&quot;studentName&quot;, student.getStudentName());&#10;                intent.putExtra(&quot;courseId&quot;, courseId);&#10;                intent.putExtra(&quot;courseName&quot;, courseTitle);&#10;                startActivity(intent);&#10;            }&#10;&#10;            @Override&#10;            public void onRemoveStudent(CourseStudent student) {&#10;                showRemoveStudentDialog(student);&#10;            }&#10;&#10;            @Override&#10;            public void onSendMessage(CourseStudent student) {&#10;                // TODO: Implement messaging functionality&#10;                Toast.makeText(CourseStudentsActivity.this, &quot;Chức năng nhắn tin đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;        rvStudents.setLayoutManager(new LinearLayoutManager(this));&#10;        rvStudents.setAdapter(studentAdapter);&#10;    }&#10;&#10;    private void loadStudents() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Load students từ courseRequests với status &quot;approved&quot; cho courseId này&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        studentList.clear();&#10;&#10;                        if (task.getResult().isEmpty()) {&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;No approved requests found for courseId: &quot; + courseId);&#10;                            updateUI();&#10;                            progressBar.setVisibility(View.GONE);&#10;                            return;&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Found &quot; + task.getResult().size() + &quot; approved requests for courseId: &quot; + courseId);&#10;&#10;                        for (QueryDocumentSnapshot doc : task.getResult()) {&#10;                            // Lấy dữ liệu trực tiếp từ courseRequests&#10;                            String studentName = doc.getString(&quot;studentName&quot;);&#10;                            String studentId = doc.getString(&quot;studentId&quot;);&#10;                            String studentEmail = doc.getString(&quot;studentEmail&quot;);&#10;                            String courseName = doc.getString(&quot;courseName&quot;);&#10;&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;Processing approved request - Student: &quot; + studentName +&#10;                                  &quot;, StudentId: &quot; + studentId + &quot;, Course: &quot; + courseName);&#10;&#10;                            // Tạo CourseStudent object&#10;                            CourseStudent student = new CourseStudent();&#10;                            student.setStudentId(studentId);&#10;                            student.setStudentName(studentName);&#10;                            student.setStudentEmail(studentEmail);&#10;                            student.setEnrollmentDate(new java.util.Date()); // Có thể lấy từ timestamp nếu có&#10;&#10;                            studentList.add(student);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Added &quot; + studentList.size() + &quot; students to list&quot;);&#10;                        updateUI();&#10;                        progressBar.setVisibility(View.GONE);&#10;&#10;                    } else {&#10;                        android.util.Log.e(&quot;CourseStudents&quot;, &quot;Error loading approved requests&quot;, task.getException());&#10;                        progressBar.setVisibility(View.GONE);&#10;                        Toast.makeText(this, &quot;Lỗi tải danh sách học viên: &quot; +&#10;                            (task.getException() != null ? task.getException().getMessage() : &quot;Unknown error&quot;),&#10;                            Toast.LENGTH_SHORT).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void showRemoveStudentDialog(CourseStudent student) {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xác nhận xóa học viên&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa &quot; + student.getStudentName() + &quot; khỏi khóa học này?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; removeStudent(student))&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void removeStudent(CourseStudent student) {&#10;        if (student.getEnrollmentId() == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin đăng ký&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Update enrollment status to REMOVED instead of deleting&#10;        db.collection(&quot;enrollments&quot;).document(student.getEnrollmentId())&#10;                .update(&quot;status&quot;, &quot;REMOVED&quot;)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Đã xóa học viên khỏi khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadStudents(); // Reload the list&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (studentList.isEmpty()) {&#10;            tvNoStudents.setVisibility(View.VISIBLE);&#10;            rvStudents.setVisibility(View.GONE);&#10;        } else {&#10;            tvNoStudents.setVisibility(View.GONE);&#10;            rvStudents.setVisibility(View.VISIBLE);&#10;        }&#10;        studentAdapter.notifyDataSetChanged();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CourseStudentsActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvStudents;&#10;    private LinearLayout layoutNoStudents;  // Đổi từ TextView thành LinearLayout&#10;    private TextView tvCourseTitle;&#10;    private ProgressBar progressBar;&#10;    private BottomNavigationView bottomNavigation;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;CourseStudent&gt; studentList;&#10;    private CourseStudentAdapter studentAdapter;&#10;    private String courseId, courseTitle;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_course_students);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        studentList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupBottomNavigation();&#10;        setupRecyclerView();&#10;        loadStudents();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#10;        rvStudents = findViewById(R.id.rv_students);&#10;        layoutNoStudents = findViewById(R.id.tv_no_students); // Sử dụng ID đúng từ layout XML&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;&#10;        if (courseTitle != null) {&#10;            tvCourseTitle.setText(courseTitle);&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Danh sách học viên&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setSelectedItemId(R.id.nav_students);&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                startActivity(new Intent(this, CourseManagementActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_students) {&#10;                // Already on students&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        studentAdapter = new CourseStudentAdapter(studentList, new CourseStudentAdapter.OnStudentActionListener() {&#10;            @Override&#10;            public void onViewProgress(CourseStudent student) {&#10;                Intent intent = new Intent(CourseStudentsActivity.this, StudentProgressDetailActivity.class);&#10;                intent.putExtra(&quot;studentId&quot;, student.getStudentId());&#10;                intent.putExtra(&quot;studentName&quot;, student.getStudentName());&#10;                intent.putExtra(&quot;courseId&quot;, courseId);&#10;                intent.putExtra(&quot;courseName&quot;, courseTitle);&#10;                startActivity(intent);&#10;            }&#10;&#10;            @Override&#10;            public void onRemoveStudent(CourseStudent student) {&#10;                showRemoveStudentDialog(student);&#10;            }&#10;&#10;            @Override&#10;            public void onSendMessage(CourseStudent student) {&#10;                // TODO: Implement messaging functionality&#10;                Toast.makeText(CourseStudentsActivity.this, &quot;Chức năng nhắn tin đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;        rvStudents.setLayoutManager(new LinearLayoutManager(this));&#10;        rvStudents.setAdapter(studentAdapter);&#10;    }&#10;&#10;    private void loadStudents() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Load students từ courseRequests với status &quot;approved&quot; cho courseId này&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        studentList.clear();&#10;&#10;                        if (task.getResult().isEmpty()) {&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;No approved requests found for courseId: &quot; + courseId);&#10;                            updateUI();&#10;                            progressBar.setVisibility(View.GONE);&#10;                            return;&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Found &quot; + task.getResult().size() + &quot; approved requests for courseId: &quot; + courseId);&#10;&#10;                        for (QueryDocumentSnapshot doc : task.getResult()) {&#10;                            // Lấy dữ liệu trực tiếp từ courseRequests&#10;                            String studentName = doc.getString(&quot;studentName&quot;);&#10;                            String studentId = doc.getString(&quot;studentId&quot;);&#10;                            String studentEmail = doc.getString(&quot;studentEmail&quot;);&#10;                            String courseName = doc.getString(&quot;courseName&quot;);&#10;&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;Processing approved request - Student: &quot; + studentName +&#10;                                  &quot;, StudentId: &quot; + studentId + &quot;, Course: &quot; + courseName);&#10;&#10;                            // Tạo CourseStudent object&#10;                            CourseStudent student = new CourseStudent();&#10;                            student.setStudentId(studentId);&#10;                            student.setStudentName(studentName);&#10;                            student.setStudentEmail(studentEmail);&#10;                            student.setEnrollmentDate(new java.util.Date()); // Có thể lấy từ timestamp nếu có&#10;&#10;                            studentList.add(student);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Added &quot; + studentList.size() + &quot; students to list&quot;);&#10;                        updateUI();&#10;                        progressBar.setVisibility(View.GONE);&#10;&#10;                    } else {&#10;                        android.util.Log.e(&quot;CourseStudents&quot;, &quot;Error loading approved requests&quot;, task.getException());&#10;                        progressBar.setVisibility(View.GONE);&#10;                        Toast.makeText(this, &quot;Lỗi tải danh sách học viên: &quot; +&#10;                            (task.getException() != null ? task.getException().getMessage() : &quot;Unknown error&quot;),&#10;                            Toast.LENGTH_SHORT).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void showRemoveStudentDialog(CourseStudent student) {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xác nhận xóa học viên&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa &quot; + student.getStudentName() + &quot; khỏi khóa học này?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; removeStudent(student))&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void removeStudent(CourseStudent student) {&#10;        if (student.getEnrollmentId() == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin đăng ký&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Update enrollment status to REMOVED instead of deleting&#10;        db.collection(&quot;enrollments&quot;).document(student.getEnrollmentId())&#10;                .update(&quot;status&quot;, &quot;REMOVED&quot;)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Đã xóa học viên khỏi khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadStudents(); // Reload the list&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (studentList.isEmpty()) {&#10;            layoutNoStudents.setVisibility(View.VISIBLE);&#10;            rvStudents.setVisibility(View.GONE);&#10;        } else {&#10;            layoutNoStudents.setVisibility(View.GONE);&#10;            rvStudents.setVisibility(View.VISIBLE);&#10;        }&#10;        studentAdapter.notifyDataSetChanged();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateLessonActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateLessonActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class CreateLessonActivity extends AppCompatActivity {&#10;&#10;    private TextInputEditText etLessonTitle, etLessonContent, etEstimatedTime;&#10;    private Spinner spinnerLessonType;&#10;    private Button btnCreateLesson, btnAddExample, btnAddUsage, btnAddNote;&#10;    private Toolbar toolbar;&#10;&#10;    // Grammar-specific fields&#10;    private LinearLayout layoutGrammarContent;&#10;    private TextInputEditText etGrammarRule, etGrammarStructure;&#10;    private LinearLayout layoutExamples, layoutUsage, layoutNotes;&#10;    private List&lt;TextInputEditText&gt; exampleInputs, usageInputs, noteInputs;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId, courseTitle, courseCategory;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_create_lesson);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupSpinners();&#10;        setupClickListeners();&#10;        loadCourseCategory();&#10;        addAnimations();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#10;        etEstimatedTime = findViewById(R.id.et_estimated_time);&#10;        spinnerLessonType = findViewById(R.id.spinner_lesson_type);&#10;        btnCreateLesson = findViewById(R.id.btn_create_lesson);&#10;&#10;        // Grammar-specific views - Kích hoạt lại các view&#10;        layoutGrammarContent = findViewById(R.id.layout_grammar_content);&#10;        etGrammarRule = findViewById(R.id.et_grammar_rule);&#10;        etGrammarStructure = findViewById(R.id.et_grammar_structure);&#10;        layoutExamples = findViewById(R.id.layout_examples);&#10;        layoutUsage = findViewById(R.id.layout_usage);&#10;        layoutNotes = findViewById(R.id.layout_notes);&#10;        btnAddExample = findViewById(R.id.btn_add_example);&#10;        btnAddUsage = findViewById(R.id.btn_add_usage);&#10;        btnAddNote = findViewById(R.id.btn_add_note);&#10;&#10;        // Initialize lists&#10;        exampleInputs = new ArrayList&lt;&gt;();&#10;        usageInputs = new ArrayList&lt;&gt;();&#10;        noteInputs = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Tạo bài học mới&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupSpinners() {&#10;        String[] lessonTypes = {&quot;text&quot;, &quot;video&quot;, &quot;audio&quot;, &quot;quiz&quot;};&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_spinner_item, lessonTypes);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerLessonType.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCreateLesson.setOnClickListener(v -&gt; createLesson());&#10;        btnAddExample.setOnClickListener(v -&gt; addExampleField());&#10;        btnAddUsage.setOnClickListener(v -&gt; addUsageField());&#10;        btnAddNote.setOnClickListener(v -&gt; addNoteField());&#10;    }&#10;&#10;    private void loadCourseCategory() {&#10;        if (courseId == null) return;&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                if (documentSnapshot.exists()) {&#10;                    courseCategory = documentSnapshot.getString(&quot;category&quot;);&#10;                    android.util.Log.d(&quot;CreateLesson&quot;, &quot;Course category: &quot; + courseCategory);&#10;&#10;                    // Show/hide grammar-specific fields based on category&#10;                    if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#10;                        layoutGrammarContent.setVisibility(View.VISIBLE);&#10;                        addInitialFields();&#10;                    } else {&#10;                        layoutGrammarContent.setVisibility(View.GONE);&#10;                    }&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error loading course category&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            });&#10;    }&#10;&#10;    private void addInitialFields() {&#10;        // Add initial example, usage, and note fields for Grammar lessons&#10;        addExampleField();&#10;        addUsageField();&#10;        addNoteField();&#10;    }&#10;&#10;    private void addExampleField() {&#10;        TextInputEditText etExample = new TextInputEditText(this);&#10;        etExample.setHint(&quot;Ví dụ &quot; + (exampleInputs.size() + 1));&#10;        etExample.setLayoutParams(new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#10;        etExample.setPadding(0, 8, 0, 8);&#10;&#10;        layoutExamples.addView(etExample);&#10;        exampleInputs.add(etExample);&#10;    }&#10;&#10;    private void addUsageField() {&#10;        TextInputEditText etUsage = new TextInputEditText(this);&#10;        etUsage.setHint(&quot;Cách sử dụng &quot; + (usageInputs.size() + 1));&#10;        etUsage.setLayoutParams(new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#10;        etUsage.setPadding(0, 8, 0, 8);&#10;&#10;        layoutUsage.addView(etUsage);&#10;        usageInputs.add(etUsage);&#10;    }&#10;&#10;    private void addNoteField() {&#10;        TextInputEditText etNote = new TextInputEditText(this);&#10;        etNote.setHint(&quot;Ghi chú &quot; + (noteInputs.size() + 1));&#10;        etNote.setLayoutParams(new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#10;        etNote.setPadding(0, 8, 0, 8);&#10;&#10;        layoutNotes.addView(etNote);&#10;        noteInputs.add(etNote);&#10;    }&#10;&#10;    private void addAnimations() {&#10;        // Add fade-in animation - Comment out vì không có main_content ID&#10;        // findViewById(R.id.main_content).setAlpha(0f);&#10;        // findViewById(R.id.main_content).animate()&#10;        //     .alpha(1f)&#10;        //     .setDuration(500)&#10;        //     .start();&#10;    }&#10;&#10;    private void createLesson() {&#10;        String title = etLessonTitle.getText().toString().trim();&#10;        String content = etLessonContent.getText().toString().trim();&#10;        String estimatedTimeStr = etEstimatedTime.getText().toString().trim();&#10;        String lessonType = spinnerLessonType.getSelectedItem().toString();&#10;&#10;        // Validation&#10;        if (TextUtils.isEmpty(title)) {&#10;            etLessonTitle.setError(&quot;Vui lòng nhập tiêu đề bài học&quot;);&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(content)) {&#10;            etLessonContent.setError(&quot;Vui lòng nhập nội dung bài học&quot;);&#10;            return;&#10;        }&#10;&#10;        int estimatedTime = 30; // default&#10;        if (!TextUtils.isEmpty(estimatedTimeStr)) {&#10;            try {&#10;                estimatedTime = Integer.parseInt(estimatedTimeStr);&#10;            } catch (NumberFormatException e) {&#10;                etEstimatedTime.setError(&quot;Thời gian ước tính phải là số&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Create lesson object&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#10;        lessonData.put(&quot;title&quot;, title);&#10;        lessonData.put(&quot;content&quot;, content);&#10;        lessonData.put(&quot;courseId&quot;, courseId);&#10;        lessonData.put(&quot;teacherId&quot;, mAuth.getCurrentUser().getUid());&#10;        lessonData.put(&quot;type&quot;, lessonType);&#10;        lessonData.put(&quot;category&quot;, courseCategory);&#10;        lessonData.put(&quot;estimatedTime&quot;, estimatedTime);&#10;        lessonData.put(&quot;createdAt&quot;, new Date());&#10;        lessonData.put(&quot;updatedAt&quot;, new Date());&#10;        lessonData.put(&quot;isPublished&quot;, false);&#10;&#10;        // Add grammar-specific data if this is a Grammar lesson&#10;        if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#10;            addGrammarData(lessonData);&#10;        }&#10;&#10;        // Get next order number&#10;        getNextOrderNumber(lessonData);&#10;    }&#10;&#10;    private void addGrammarData(Map&lt;String, Object&gt; lessonData) {&#10;        String grammarRule = etGrammarRule.getText().toString().trim();&#10;        String grammarStructure = etGrammarStructure.getText().toString().trim();&#10;&#10;        if (!TextUtils.isEmpty(grammarRule)) {&#10;            lessonData.put(&quot;grammarRule&quot;, grammarRule);&#10;        }&#10;&#10;        if (!TextUtils.isEmpty(grammarStructure)) {&#10;            lessonData.put(&quot;grammarStructure&quot;, grammarStructure);&#10;        }&#10;&#10;        // Collect examples&#10;        List&lt;String&gt; examples = new ArrayList&lt;&gt;();&#10;        for (TextInputEditText etExample : exampleInputs) {&#10;            String example = etExample.getText().toString().trim();&#10;            if (!TextUtils.isEmpty(example)) {&#10;                examples.add(example);&#10;            }&#10;        }&#10;        if (!examples.isEmpty()) {&#10;            lessonData.put(&quot;grammarExamples&quot;, examples);&#10;        }&#10;&#10;        // Collect usage notes&#10;        List&lt;String&gt; usage = new ArrayList&lt;&gt;();&#10;        for (TextInputEditText etUsage : usageInputs) {&#10;            String usageNote = etUsage.getText().toString().trim();&#10;            if (!TextUtils.isEmpty(usageNote)) {&#10;                usage.add(usageNote);&#10;            }&#10;        }&#10;        if (!usage.isEmpty()) {&#10;            lessonData.put(&quot;grammarUsage&quot;, usage);&#10;        }&#10;&#10;        // Collect notes&#10;        List&lt;String&gt; notes = new ArrayList&lt;&gt;();&#10;        for (TextInputEditText etNote : noteInputs) {&#10;            String note = etNote.getText().toString().trim();&#10;            if (!TextUtils.isEmpty(note)) {&#10;                notes.add(note);&#10;            }&#10;        }&#10;        if (!notes.isEmpty()) {&#10;            lessonData.put(&quot;grammarNotes&quot;, notes);&#10;        }&#10;    }&#10;&#10;    private void getNextOrderNumber(Map&lt;String, Object&gt; lessonData) {&#10;        db.collection(&quot;lessons&quot;)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                int nextOrder = queryDocumentSnapshots.size() + 1;&#10;                lessonData.put(&quot;order&quot;, nextOrder);&#10;                saveLessonToFirebase(lessonData);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                lessonData.put(&quot;order&quot;, 1);&#10;                saveLessonToFirebase(lessonData);&#10;            });&#10;    }&#10;&#10;    private void saveLessonToFirebase(Map&lt;String, Object&gt; lessonData) {&#10;        btnCreateLesson.setEnabled(false);&#10;        btnCreateLesson.setText(&quot;Đang tạo...&quot;);&#10;&#10;        db.collection(&quot;lessons&quot;)&#10;            .add(lessonData)&#10;            .addOnSuccessListener(documentReference -&gt; {&#10;                android.util.Log.d(&quot;CreateLesson&quot;, &quot;Lesson created with ID: &quot; + documentReference.getId());&#10;                Toast.makeText(this, &quot;Tạo bài học thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                finish();&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error creating lesson&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tạo bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                btnCreateLesson.setEnabled(true);&#10;                btnCreateLesson.setText(&quot;Tạo bài học&quot;);&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.text.TextUtils;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.android.material.textfield.TextInputEditText;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class CreateLessonActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private TextInputEditText etLessonTitle, etLessonContent, etEstimatedTime;&#13;&#10;    private Spinner spinnerLessonType;&#13;&#10;    private Button btnCreateLesson, btnAddExample, btnAddUsage, btnAddNote;&#13;&#10;    private Toolbar toolbar;&#13;&#10;&#13;&#10;    // Grammar-specific fields&#13;&#10;    private LinearLayout layoutGrammarContent;&#13;&#10;    private TextInputEditText etGrammarRule, etGrammarStructure;&#13;&#10;    private LinearLayout layoutExamples, layoutUsage, layoutNotes;&#13;&#10;    private List&lt;TextInputEditText&gt; exampleInputs, usageInputs, noteInputs;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String courseId, courseTitle, courseCategory;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_create_lesson);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        // Get course info from intent&#13;&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#13;&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupSpinners();&#13;&#10;        setupClickListeners();&#13;&#10;        loadCourseCategory();&#13;&#10;        addAnimations();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#13;&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#13;&#10;        etEstimatedTime = findViewById(R.id.et_estimated_time);&#13;&#10;        spinnerLessonType = findViewById(R.id.spinner_lesson_type);&#13;&#10;        btnCreateLesson = findViewById(R.id.btn_create_lesson);&#13;&#10;&#13;&#10;        // Grammar-specific views - Kích hoạt lại các view&#13;&#10;        layoutGrammarContent = findViewById(R.id.layout_grammar_content);&#13;&#10;        etGrammarRule = findViewById(R.id.et_grammar_rule);&#13;&#10;        etGrammarStructure = findViewById(R.id.et_grammar_structure);&#13;&#10;        layoutExamples = findViewById(R.id.layout_examples);&#13;&#10;        layoutUsage = findViewById(R.id.layout_usage);&#13;&#10;        layoutNotes = findViewById(R.id.layout_notes);&#13;&#10;        btnAddExample = findViewById(R.id.btn_add_example);&#13;&#10;        btnAddUsage = findViewById(R.id.btn_add_usage);&#13;&#10;        btnAddNote = findViewById(R.id.btn_add_note);&#13;&#10;&#13;&#10;        // Initialize lists&#13;&#10;        exampleInputs = new ArrayList&lt;&gt;();&#13;&#10;        usageInputs = new ArrayList&lt;&gt;();&#13;&#10;        noteInputs = new ArrayList&lt;&gt;();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Tạo bài học mới&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinners() {&#13;&#10;        String[] lessonTypes = {&quot;text&quot;, &quot;video&quot;, &quot;audio&quot;, &quot;quiz&quot;};&#13;&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(this,&#13;&#10;            android.R.layout.simple_spinner_item, lessonTypes);&#13;&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spinnerLessonType.setAdapter(adapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnCreateLesson.setOnClickListener(v -&gt; createLesson());&#13;&#10;        btnAddExample.setOnClickListener(v -&gt; addExampleField());&#13;&#10;        btnAddUsage.setOnClickListener(v -&gt; addUsageField());&#13;&#10;        btnAddNote.setOnClickListener(v -&gt; addNoteField());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadCourseCategory() {&#13;&#10;        if (courseId == null) return;&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                if (documentSnapshot.exists()) {&#13;&#10;                    courseCategory = documentSnapshot.getString(&quot;category&quot;);&#13;&#10;                    android.util.Log.d(&quot;CreateLesson&quot;, &quot;Course category: &quot; + courseCategory);&#13;&#10;&#13;&#10;                    // Show/hide grammar-specific fields based on category&#13;&#10;                    if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#13;&#10;                        layoutGrammarContent.setVisibility(View.VISIBLE);&#13;&#10;                        addInitialFields();&#13;&#10;                    } else {&#13;&#10;                        layoutGrammarContent.setVisibility(View.GONE);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error loading course category&quot;, e);&#13;&#10;                Toast.makeText(this, &quot;Lỗi tải thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addInitialFields() {&#13;&#10;        // Add initial example, usage, and note fields for Grammar lessons&#13;&#10;        addExampleField();&#13;&#10;        addUsageField();&#13;&#10;        addNoteField();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addExampleField() {&#13;&#10;        TextInputEditText etExample = new TextInputEditText(this);&#13;&#10;        etExample.setHint(&quot;Ví dụ &quot; + (exampleInputs.size() + 1));&#13;&#10;        etExample.setLayoutParams(new LinearLayout.LayoutParams(&#13;&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#13;&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#13;&#10;        etExample.setPadding(0, 8, 0, 8);&#13;&#10;&#13;&#10;        layoutExamples.addView(etExample);&#13;&#10;        exampleInputs.add(etExample);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addUsageField() {&#13;&#10;        TextInputEditText etUsage = new TextInputEditText(this);&#13;&#10;        etUsage.setHint(&quot;Cách sử dụng &quot; + (usageInputs.size() + 1));&#13;&#10;        etUsage.setLayoutParams(new LinearLayout.LayoutParams(&#13;&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#13;&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#13;&#10;        etUsage.setPadding(0, 8, 0, 8);&#13;&#10;&#13;&#10;        layoutUsage.addView(etUsage);&#13;&#10;        usageInputs.add(etUsage);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addNoteField() {&#13;&#10;        TextInputEditText etNote = new TextInputEditText(this);&#13;&#10;        etNote.setHint(&quot;Ghi chú &quot; + (noteInputs.size() + 1));&#13;&#10;        etNote.setLayoutParams(new LinearLayout.LayoutParams(&#13;&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#13;&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#13;&#10;        etNote.setPadding(0, 8, 0, 8);&#13;&#10;&#13;&#10;        layoutNotes.addView(etNote);&#13;&#10;        noteInputs.add(etNote);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addAnimations() {&#13;&#10;        // Add fade-in animation - Comment out vì không có main_content ID&#13;&#10;        // findViewById(R.id.main_content).setAlpha(0f);&#13;&#10;        // findViewById(R.id.main_content).animate()&#13;&#10;        //     .alpha(1f)&#13;&#10;        //     .setDuration(500)&#13;&#10;        //     .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void createLesson() {&#13;&#10;        String title = etLessonTitle.getText().toString().trim();&#13;&#10;        String content = etLessonContent.getText().toString().trim();&#13;&#10;        String estimatedTimeStr = etEstimatedTime.getText().toString().trim();&#13;&#10;        String lessonType = spinnerLessonType.getSelectedItem().toString();&#13;&#10;&#13;&#10;        // Validation&#13;&#10;        if (TextUtils.isEmpty(title)) {&#13;&#10;            etLessonTitle.setError(&quot;Vui lòng nhập tiêu đề bài học&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (TextUtils.isEmpty(content)) {&#13;&#10;            etLessonContent.setError(&quot;Vui lòng nhập nội dung bài học&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        int estimatedTime = 30; // default&#13;&#10;        if (!TextUtils.isEmpty(estimatedTimeStr)) {&#13;&#10;            try {&#13;&#10;                estimatedTime = Integer.parseInt(estimatedTimeStr);&#13;&#10;            } catch (NumberFormatException e) {&#13;&#10;                etEstimatedTime.setError(&quot;Thời gian ước tính phải là số&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Create lesson object&#13;&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#13;&#10;        lessonData.put(&quot;title&quot;, title);&#13;&#10;        lessonData.put(&quot;content&quot;, content);&#13;&#10;        lessonData.put(&quot;courseId&quot;, courseId);&#13;&#10;        lessonData.put(&quot;teacherId&quot;, mAuth.getCurrentUser().getUid());&#13;&#10;        lessonData.put(&quot;type&quot;, lessonType);&#13;&#10;        lessonData.put(&quot;category&quot;, courseCategory);&#13;&#10;        lessonData.put(&quot;estimatedTime&quot;, estimatedTime);&#13;&#10;        lessonData.put(&quot;createdAt&quot;, new Date());&#13;&#10;        lessonData.put(&quot;updatedAt&quot;, new Date());&#13;&#10;        lessonData.put(&quot;isPublished&quot;, true); // Changed from false to true - auto publish lessons&#13;&#10;&#13;&#10;        // Add grammar-specific data if this is a Grammar lesson&#13;&#10;        if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#13;&#10;            addGrammarData(lessonData);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Get next order number&#13;&#10;        getNextOrderNumber(lessonData);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addGrammarData(Map&lt;String, Object&gt; lessonData) {&#13;&#10;        String grammarRule = etGrammarRule.getText().toString().trim();&#13;&#10;        String grammarStructure = etGrammarStructure.getText().toString().trim();&#13;&#10;&#13;&#10;        if (!TextUtils.isEmpty(grammarRule)) {&#13;&#10;            lessonData.put(&quot;grammarRule&quot;, grammarRule);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (!TextUtils.isEmpty(grammarStructure)) {&#13;&#10;            lessonData.put(&quot;grammarStructure&quot;, grammarStructure);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Collect examples&#13;&#10;        List&lt;String&gt; examples = new ArrayList&lt;&gt;();&#13;&#10;        for (TextInputEditText etExample : exampleInputs) {&#13;&#10;            String example = etExample.getText().toString().trim();&#13;&#10;            if (!TextUtils.isEmpty(example)) {&#13;&#10;                examples.add(example);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        if (!examples.isEmpty()) {&#13;&#10;            lessonData.put(&quot;grammarExamples&quot;, examples);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Collect usage notes&#13;&#10;        List&lt;String&gt; usage = new ArrayList&lt;&gt;();&#13;&#10;        for (TextInputEditText etUsage : usageInputs) {&#13;&#10;            String usageNote = etUsage.getText().toString().trim();&#13;&#10;            if (!TextUtils.isEmpty(usageNote)) {&#13;&#10;                usage.add(usageNote);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        if (!usage.isEmpty()) {&#13;&#10;            lessonData.put(&quot;grammarUsage&quot;, usage);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Collect notes&#13;&#10;        List&lt;String&gt; notes = new ArrayList&lt;&gt;();&#13;&#10;        for (TextInputEditText etNote : noteInputs) {&#13;&#10;            String note = etNote.getText().toString().trim();&#13;&#10;            if (!TextUtils.isEmpty(note)) {&#13;&#10;                notes.add(note);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        if (!notes.isEmpty()) {&#13;&#10;            lessonData.put(&quot;grammarNotes&quot;, notes);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void getNextOrderNumber(Map&lt;String, Object&gt; lessonData) {&#13;&#10;        db.collection(&quot;lessons&quot;)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                int nextOrder = queryDocumentSnapshots.size() + 1;&#13;&#10;                lessonData.put(&quot;order&quot;, nextOrder);&#13;&#10;                saveLessonToFirebase(lessonData);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                lessonData.put(&quot;order&quot;, 1);&#13;&#10;                saveLessonToFirebase(lessonData);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveLessonToFirebase(Map&lt;String, Object&gt; lessonData) {&#13;&#10;        btnCreateLesson.setEnabled(false);&#13;&#10;        btnCreateLesson.setText(&quot;Đang tạo...&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;lessons&quot;)&#13;&#10;            .add(lessonData)&#13;&#10;            .addOnSuccessListener(documentReference -&gt; {&#13;&#10;                android.util.Log.d(&quot;CreateLesson&quot;, &quot;Lesson created with ID: &quot; + documentReference.getId());&#13;&#10;                Toast.makeText(this, &quot;Tạo bài học thành công!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                finish();&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error creating lesson&quot;, e);&#13;&#10;                Toast.makeText(this, &quot;Lỗi tạo bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                btnCreateLesson.setEnabled(true);&#13;&#10;                btnCreateLesson.setText(&quot;Tạo bài học&quot;);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateQuizActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateQuizActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.widget.LinearLayout;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.Quiz;&#10;import com.vantinh.tienganh.models.QuizQuestion;&#10;import com.vantinh.tienganh.models.TestQuestion;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import com.vantinh.tienganh.utils.QuestionViewHelper;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class CreateQuizActivity extends AppCompatActivity implements QuestionViewHelper.OnQuestionCountChangeListener {&#10;&#10;    private Toolbar toolbar;&#10;    private EditText etQuizTitle;&#10;    private TextView tvCourseName, tvQuestionCount;&#10;    private Button btnCreateQuiz, btnAddQuestion, btnRemoveQuestion, btnDebugCreate;&#10;    private LinearLayout llQuestionsContainer;&#10;    private String courseId, courseName;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth mAuth;&#10;&#10;    private QuestionViewHelper questionViewHelper;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_create_quiz);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCourseInfo();&#10;        initQuestionHelper();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#10;        tvCourseName = findViewById(R.id.tv_course_name);&#10;        tvQuestionCount = findViewById(R.id.tv_question_count);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#10;        btnRemoveQuestion = findViewById(R.id.btn_remove_question);&#10;        llQuestionsContainer = findViewById(R.id.ll_questions_container);&#10;        btnDebugCreate = findViewById(R.id.btn_debug_create);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Tạo bài kiểm tra&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;        mAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    private void getCourseInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;&#10;        if (courseName != null) {&#10;            tvCourseName.setText(&quot;Khóa học: &quot; + courseName);&#10;        }&#10;    }&#10;&#10;    private void initQuestionHelper() {&#10;        questionViewHelper = new QuestionViewHelper(this, llQuestionsContainer);&#10;        questionViewHelper.setOnQuestionCountChangeListener(this);&#10;        questionViewHelper.initializeWithDefaultQuestions();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCreateQuiz.setOnClickListener(v -&gt; createQuiz());&#10;&#10;        btnAddQuestion.setOnClickListener(v -&gt; {&#10;            questionViewHelper.addQuestion();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Added question, total: &quot; + questionViewHelper.getQuestionCount());&#10;        });&#10;&#10;        btnRemoveQuestion.setOnClickListener(v -&gt; {&#10;            int countBefore = questionViewHelper.getQuestionCount();&#10;            questionViewHelper.removeLastQuestion();&#10;            int countAfter = questionViewHelper.getQuestionCount();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Remove clicked - Before: &quot; + countBefore + &quot;, After: &quot; + countAfter);&#10;            Toast.makeText(this, &quot;Đã xóa câu hỏi cuối&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        btnDebugCreate.setOnClickListener(v -&gt; createDebugSampleData());&#10;    }&#10;&#10;    @Override&#10;    public void onQuestionCountChanged(int count) {&#10;        tvQuestionCount.setText(&quot;(&quot; + count + &quot; câu)&quot;);&#10;        boolean canRemove = count &gt; 2;&#10;        btnRemoveQuestion.setEnabled(canRemove);&#10;&#10;        // Debug log&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Question count changed: &quot; + count + &quot;, Can remove: &quot; + canRemove);&#10;&#10;        // Thay đổi màu nút để thể hiện trạng thái&#10;        if (canRemove) {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.holo_red_dark));&#10;            btnRemoveQuestion.setAlpha(1.0f);&#10;        } else {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.darker_gray));&#10;            btnRemoveQuestion.setAlpha(0.5f);&#10;        }&#10;    }&#10;&#10;    private void createQuiz() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        // Debug: Bắt đầu quá trình tạo bài kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== BẮT ĐẦU TẠO BÁI KIỂM TRA ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course ID: &quot; + courseId);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course Name: &quot; + courseName);&#10;&#10;        List&lt;SimpleTestQuestion&gt; simpleTestQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo từng câu hỏi theo cấu trúc mới chỉ với 3 trường&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Số câu hỏi cần tạo: &quot; + questionViews.size());&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            // 1. Lấy question (String) - nội dung câu hỏi&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            &#10;            // 2. Lấy correctAnswer (Array) - 4 đáp án A,B,C,D&#10;            List&lt;String&gt; correctAnswerArray = new ArrayList&lt;&gt;();&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String optionText = questionData.etOptions[j].getText().toString().trim();&#10;                correctAnswerArray.add(optionText);&#10;                android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  Option &quot; + (char)('A' + j) + &quot;: &quot; + optionText);&#10;            }&#10;&#10;            // 3. Lấy options (Number) - index của đáp án đúng (0-3)&#10;            int correctAnswerIndex = getCorrectAnswerIndex(questionData);&#10;            &#10;            // Tạo SimpleTestQuestion chỉ với 4 trường dữ liệu (thêm courseId)&#10;            SimpleTestQuestion simpleQuestion = new SimpleTestQuestion();&#10;            simpleQuestion.setCourseId(courseId);              // String - ID khóa học (MỚI)&#10;            simpleQuestion.setCorrectAnswer(correctAnswerArray);     // Array - 4 đáp án&#10;            simpleQuestion.setOptions(correctAnswerIndex);           // Number - index đáp án đúng&#10;            simpleQuestion.setQuestion(questionText);                // String - câu hỏi&#10;&#10;            simpleTestQuestions.add(simpleQuestion);&#10;&#10;            // Debug log chi tiết cho từng câu hỏi với courseId&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;--- QUESTION &quot; + (i+1) + &quot; DEBUG ---&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;courseId (String): \&quot;&quot; + courseId + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;question (String): \&quot;&quot; + questionText + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;correctAnswer (Array): &quot; + correctAnswerArray.toString());&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;options (Number): &quot; + correctAnswerIndex);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Đáp án đúng là: &quot; +&#10;                (correctAnswerIndex &gt;= 0 &amp;&amp; correctAnswerIndex &lt; correctAnswerArray.size() ?&#10;                 correctAnswerArray.get(correctAnswerIndex) : &quot;KHÔNG XÁC ĐỊNH&quot;));&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;SimpleTestQuestion Object: &quot; + simpleQuestion.toString());&#10;        }&#10;&#10;        // Debug tổng kết trước khi lưu&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TỔNG KẾT TRƯỚC KHI LƯU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Tổng số câu hỏi: &quot; + simpleTestQuestions.size());&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Collection đích: test&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Cấu trúc mỗi document:&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - correctAnswer: Array[4] (4 đáp án)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - options: Number (index đáp án đúng)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - question: String (câu hỏi)&quot;);&#10;&#10;        // Lưu từng câu hỏi như một document riêng trong collection &quot;test&quot;&#10;        saveSimpleTestQuestionsToFirebase(simpleTestQuestions);&#10;    }&#10;&#10;    private void createDebugSampleData() {&#10;        // Tạo dữ liệu mẫu để kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TẠO DỮ LIỆU MẪU ===&quot;);&#10;&#10;        // Tạo một danh sách câu hỏi mẫu&#10;        List&lt;SimpleTestQuestion&gt; sampleQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo 5 câu hỏi mẫu với đáp án ngẫu nhiên&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            SimpleTestQuestion question = new SimpleTestQuestion();&#10;            question.setQuestion(&quot;Câu hỏi mẫu &quot; + i);&#10;&#10;            List&lt;String&gt; answers = new ArrayList&lt;&gt;();&#10;            answers.add(&quot;Đáp án A - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án B - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án C - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án D - Câu hỏi &quot; + i);&#10;            question.setCorrectAnswer(answers);&#10;&#10;            // Chọn ngẫu nhiên một đáp án đúng&#10;            int correctIndex = (int) (Math.random() * 4);&#10;            question.setOptions(correctIndex);&#10;&#10;            sampleQuestions.add(question);&#10;&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Câu hỏi mẫu &quot; + i + &quot;: &quot; + question.toString());&#10;        }&#10;&#10;        // Lưu vào Firebase&#10;        saveSimpleTestQuestionsToFirebase(sampleQuestions);&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        // Bỏ validation tên bài kiểm tra vì không cần thiết với cấu trúc mới&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            if (questionText.isEmpty()) {&#10;                questionData.etQuestion.setError(&quot;Vui lòng nhập câu hỏi &quot; + (i + 1));&#10;                questionData.etQuestion.requestFocus();&#10;                return false;&#10;            }&#10;&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String option = questionData.etOptions[j].getText().toString().trim();&#10;                if (option.isEmpty()) {&#10;                    questionData.etOptions[j].setError(&quot;Vui lòng nhập lựa chọn &quot; + (char)('A' + j));&#10;                    questionData.etOptions[j].requestFocus();&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            // Check if any radio button is selected for this question&#10;            if (questionData.rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;                Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng cho câu hỏi &quot; + (i + 1), Toast.LENGTH_SHORT).show();&#10;                return false;&#10;            }&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex(QuestionViewHelper.QuestionViewData questionData) {&#10;        RadioGroup radioGroup = questionData.rgCorrectAnswer;&#10;        int checkedId = radioGroup.getCheckedRadioButtonId();&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Getting correct answer - checkedId: &quot; + checkedId);&#10;&#10;        if (checkedId == -1) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;No option selected&quot;);&#10;            return -1;&#10;        }&#10;&#10;        // Phương pháp đơn giản: Kiểm tra trực tiếp từng RadioButton theo ID gốc&#10;        RadioButton rbA = questionData.questionView.findViewById(R.id.rb_option_a);&#10;        RadioButton rbB = questionData.questionView.findViewById(R.id.rb_option_b);&#10;        RadioButton rbC = questionData.questionView.findViewById(R.id.rb_option_c);&#10;        RadioButton rbD = questionData.questionView.findViewById(R.id.rb_option_d);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;RadioButton states - A:&quot; + (rbA != null ? rbA.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, B:&quot; + (rbB != null ? rbB.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, C:&quot; + (rbC != null ? rbC.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, D:&quot; + (rbD != null ? rbD.isChecked() : &quot;null&quot;));&#10;&#10;        if (rbA != null &amp;&amp; rbA.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option A selected (index 0)&quot;);&#10;            return 0;&#10;        }&#10;        if (rbB != null &amp;&amp; rbB.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option B selected (index 1)&quot;);&#10;            return 1;&#10;        }&#10;        if (rbC != null &amp;&amp; rbC.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option C selected (index 2)&quot;);&#10;            return 2;&#10;        }&#10;        if (rbD != null &amp;&amp; rbD.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option D selected (index 3)&quot;);&#10;            return 3;&#10;        }&#10;&#10;        // Nếu vẫn không tìm được, thử kiểm tra bằng ID được sinh ra động&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Fallback: Checking by generated IDs&quot;);&#10;        for (int i = 0; i &lt; radioGroup.getChildCount(); i++) {&#10;            View child = radioGroup.getChildAt(i);&#10;            if (child instanceof RadioButton) {&#10;                RadioButton rb = (RadioButton) child;&#10;                if (rb.isChecked()) {&#10;                    android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Found checked RadioButton at child position &quot; + i);&#10;                    return i;&#10;                }&#10;            }&#10;        }&#10;&#10;        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Could not determine correct answer index for checkedId: &quot; + checkedId);&#10;        return -1;&#10;    }&#10;&#10;    private void saveTestQuestionsToFirebase(List&lt;TestQuestion&gt; testQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (TestQuestion question : testQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  courseId: &quot; + question.getCourseId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  teacherId: &quot; + question.getTeacherId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == testQuestions.get(testQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveSimpleTestQuestionsToFirebase(List&lt;SimpleTestQuestion&gt; simpleTestQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for simple test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (SimpleTestQuestion question : simpleTestQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Simple test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Simple Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == simpleTestQuestions.get(simpleTestQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveQuizQuestionsToFirebase(List&lt;QuizQuestion&gt; quizQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for quiz questions (old structure)...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (QuizQuestion question : quizQuestions) {&#10;            db.collection(&quot;quizzes&quot;)  // Lưu vào collection &quot;quizzes&quot; với cấu trúc cũ&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Quiz question (old structure) saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == quizQuestions.get(quizQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.widget.LinearLayout;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.Quiz;&#10;import com.vantinh.tienganh.models.QuizQuestion;&#10;import com.vantinh.tienganh.models.TestQuestion;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import com.vantinh.tienganh.utils.QuestionViewHelper;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class CreateQuizActivity extends AppCompatActivity implements QuestionViewHelper.OnQuestionCountChangeListener {&#10;&#10;    private Toolbar toolbar;&#10;    private EditText etQuizTitle;&#10;    private TextView tvCourseName, tvQuestionCount;&#10;    private Button btnCreateQuiz, btnAddQuestion, btnRemoveQuestion, btnDebugCreate;&#10;    private LinearLayout llQuestionsContainer;&#10;    private String courseId, courseName;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth mAuth;&#10;&#10;    private QuestionViewHelper questionViewHelper;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_create_quiz);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCourseInfo();&#10;        initQuestionHelper();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#10;        tvCourseName = findViewById(R.id.tv_course_name);&#10;        tvQuestionCount = findViewById(R.id.tv_question_count);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#10;        btnRemoveQuestion = findViewById(R.id.btn_remove_question);&#10;        llQuestionsContainer = findViewById(R.id.ll_questions_container);&#10;        btnDebugCreate = findViewById(R.id.btn_debug_create);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Tạo bài kiểm tra&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;        mAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    private void getCourseInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;&#10;        if (courseName != null) {&#10;            tvCourseName.setText(&quot;Khóa học: &quot; + courseName);&#10;        }&#10;    }&#10;&#10;    private void initQuestionHelper() {&#10;        questionViewHelper = new QuestionViewHelper(this, llQuestionsContainer);&#10;        questionViewHelper.setOnQuestionCountChangeListener(this);&#10;        questionViewHelper.initializeWithDefaultQuestions();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCreateQuiz.setOnClickListener(v -&gt; createQuiz());&#10;&#10;        btnAddQuestion.setOnClickListener(v -&gt; {&#10;            questionViewHelper.addQuestion();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Added question, total: &quot; + questionViewHelper.getQuestionCount());&#10;        });&#10;&#10;        btnRemoveQuestion.setOnClickListener(v -&gt; {&#10;            int countBefore = questionViewHelper.getQuestionCount();&#10;            questionViewHelper.removeLastQuestion();&#10;            int countAfter = questionViewHelper.getQuestionCount();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Remove clicked - Before: &quot; + countBefore + &quot;, After: &quot; + countAfter);&#10;            Toast.makeText(this, &quot;Đã xóa câu hỏi cuối&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        btnDebugCreate.setOnClickListener(v -&gt; createDebugSampleData());&#10;    }&#10;&#10;    @Override&#10;    public void onQuestionCountChanged(int count) {&#10;        tvQuestionCount.setText(&quot;(&quot; + count + &quot; câu)&quot;);&#10;        boolean canRemove = count &gt; 2;&#10;        btnRemoveQuestion.setEnabled(canRemove);&#10;&#10;        // Debug log&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Question count changed: &quot; + count + &quot;, Can remove: &quot; + canRemove);&#10;&#10;        // Thay đổi màu nút để thể hiện trạng thái&#10;        if (canRemove) {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.holo_red_dark));&#10;            btnRemoveQuestion.setAlpha(1.0f);&#10;        } else {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.darker_gray));&#10;            btnRemoveQuestion.setAlpha(0.5f);&#10;        }&#10;    }&#10;&#10;    private void createQuiz() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        // Debug: Bắt đầu quá trình tạo bài kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== BẮT ĐẦU TẠO BÁI KIỂM TRA ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course ID: &quot; + courseId);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course Name: &quot; + courseName);&#10;&#10;        List&lt;SimpleTestQuestion&gt; simpleTestQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo từng câu hỏi theo cấu trúc mới chỉ với 3 trường&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Số câu hỏi cần tạo: &quot; + questionViews.size());&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            // 1. Lấy question (String) - nội dung câu hỏi&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            &#10;            // 2. Lấy correctAnswer (Array) - 4 đáp án A,B,C,D&#10;            List&lt;String&gt; correctAnswerArray = new ArrayList&lt;&gt;();&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String optionText = questionData.etOptions[j].getText().toString().trim();&#10;                correctAnswerArray.add(optionText);&#10;                android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  Option &quot; + (char)('A' + j) + &quot;: &quot; + optionText);&#10;            }&#10;&#10;            // 3. Lấy options (Number) - index của đáp án đúng (0-3)&#10;            int correctAnswerIndex = getCorrectAnswerIndex(questionData);&#10;            &#10;            // Tạo SimpleTestQuestion chỉ với 4 trường dữ liệu (thêm courseId)&#10;            SimpleTestQuestion simpleQuestion = new SimpleTestQuestion();&#10;            simpleQuestion.setCourseId(courseId);              // String - ID khóa học (MỚI)&#10;            simpleQuestion.setCorrectAnswer(correctAnswerArray);     // Array - 4 đáp án&#10;            simpleQuestion.setOptions(correctAnswerIndex);           // Number - index đáp án đúng&#10;            simpleQuestion.setQuestion(questionText);                // String - câu hỏi&#10;&#10;            simpleTestQuestions.add(simpleQuestion);&#10;&#10;            // Debug log chi tiết cho từng câu hỏi với courseId&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;--- QUESTION &quot; + (i+1) + &quot; DEBUG ---&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;courseId (String): \&quot;&quot; + courseId + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;question (String): \&quot;&quot; + questionText + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;correctAnswer (Array): &quot; + correctAnswerArray.toString());&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;options (Number): &quot; + correctAnswerIndex);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Đáp án đúng là: &quot; +&#10;                (correctAnswerIndex &gt;= 0 &amp;&amp; correctAnswerIndex &lt; correctAnswerArray.size() ?&#10;                 correctAnswerArray.get(correctAnswerIndex) : &quot;KHÔNG XÁC ĐỊNH&quot;));&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;SimpleTestQuestion Object: &quot; + simpleQuestion.toString());&#10;        }&#10;&#10;        // Debug tổng kết trước khi lưu&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TỔNG KẾT TRƯỚC KHI LƯU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Tổng số câu hỏi: &quot; + simpleTestQuestions.size());&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Collection đích: test&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Cấu trúc mỗi document:&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - correctAnswer: Array[4] (4 đáp án)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - options: Number (index đáp án đúng)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - question: String (câu hỏi)&quot;);&#10;&#10;        // Lưu từng câu hỏi như một document riêng trong collection &quot;test&quot;&#10;        saveSimpleTestQuestionsToFirebase(simpleTestQuestions);&#10;    }&#10;&#10;    private void createDebugSampleData() {&#10;        // Tạo dữ liệu mẫu để kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TẠO DỮ LIỆU MẪU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;CourseId for sample data: &quot; + courseId);&#10;&#10;        // Tạo một danh sách câu hỏi mẫu&#10;        List&lt;SimpleTestQuestion&gt; sampleQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo 5 câu hỏi mẫu với đáp án ngẫu nhiên&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            SimpleTestQuestion question = new SimpleTestQuestion();&#10;            question.setCourseId(courseId);  // Thêm courseId cho dữ liệu mẫu&#10;            question.setQuestion(&quot;Câu hỏi mẫu &quot; + i + &quot; - Khóa học: &quot; + courseName);&#10;&#10;            List&lt;String&gt; answers = new ArrayList&lt;&gt;();&#10;            answers.add(&quot;Đáp án A - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án B - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án C - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án D - Câu hỏi &quot; + i);&#10;            question.setCorrectAnswer(answers);&#10;&#10;            // Chọn ngẫu nhiên một đáp án đúng&#10;            int correctIndex = (int) (Math.random() * 4);&#10;            question.setOptions(correctIndex);&#10;&#10;            sampleQuestions.add(question);&#10;&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Câu hỏi mẫu &quot; + i + &quot;: &quot; + question.toString());&#10;        }&#10;&#10;        // Lưu vào Firebase&#10;        saveSimpleTestQuestionsToFirebase(sampleQuestions);&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        // Bỏ validation tên bài kiểm tra vì không cần thiết với cấu trúc mới&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            if (questionText.isEmpty()) {&#10;                questionData.etQuestion.setError(&quot;Vui lòng nhập câu hỏi &quot; + (i + 1));&#10;                questionData.etQuestion.requestFocus();&#10;                return false;&#10;            }&#10;&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String option = questionData.etOptions[j].getText().toString().trim();&#10;                if (option.isEmpty()) {&#10;                    questionData.etOptions[j].setError(&quot;Vui lòng nhập lựa chọn &quot; + (char)('A' + j));&#10;                    questionData.etOptions[j].requestFocus();&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            // Check if any radio button is selected for this question&#10;            if (questionData.rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;                Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng cho câu hỏi &quot; + (i + 1), Toast.LENGTH_SHORT).show();&#10;                return false;&#10;            }&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex(QuestionViewHelper.QuestionViewData questionData) {&#10;        RadioGroup radioGroup = questionData.rgCorrectAnswer;&#10;        int checkedId = radioGroup.getCheckedRadioButtonId();&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Getting correct answer - checkedId: &quot; + checkedId);&#10;&#10;        if (checkedId == -1) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;No option selected&quot;);&#10;            return -1;&#10;        }&#10;&#10;        // Phương pháp đơn giản: Kiểm tra trực tiếp từng RadioButton theo ID gốc&#10;        RadioButton rbA = questionData.questionView.findViewById(R.id.rb_option_a);&#10;        RadioButton rbB = questionData.questionView.findViewById(R.id.rb_option_b);&#10;        RadioButton rbC = questionData.questionView.findViewById(R.id.rb_option_c);&#10;        RadioButton rbD = questionData.questionView.findViewById(R.id.rb_option_d);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;RadioButton states - A:&quot; + (rbA != null ? rbA.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, B:&quot; + (rbB != null ? rbB.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, C:&quot; + (rbC != null ? rbC.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, D:&quot; + (rbD != null ? rbD.isChecked() : &quot;null&quot;));&#10;&#10;        if (rbA != null &amp;&amp; rbA.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option A selected (index 0)&quot;);&#10;            return 0;&#10;        }&#10;        if (rbB != null &amp;&amp; rbB.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option B selected (index 1)&quot;);&#10;            return 1;&#10;        }&#10;        if (rbC != null &amp;&amp; rbC.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option C selected (index 2)&quot;);&#10;            return 2;&#10;        }&#10;        if (rbD != null &amp;&amp; rbD.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option D selected (index 3)&quot;);&#10;            return 3;&#10;        }&#10;&#10;        // Nếu vẫn không tìm được, thử kiểm tra bằng ID được sinh ra động&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Fallback: Checking by generated IDs&quot;);&#10;        for (int i = 0; i &lt; radioGroup.getChildCount(); i++) {&#10;            View child = radioGroup.getChildAt(i);&#10;            if (child instanceof RadioButton) {&#10;                RadioButton rb = (RadioButton) child;&#10;                if (rb.isChecked()) {&#10;                    android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Found checked RadioButton at child position &quot; + i);&#10;                    return i;&#10;                }&#10;            }&#10;        }&#10;&#10;        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Could not determine correct answer index for checkedId: &quot; + checkedId);&#10;        return -1;&#10;    }&#10;&#10;    private void saveTestQuestionsToFirebase(List&lt;TestQuestion&gt; testQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (TestQuestion question : testQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  courseId: &quot; + question.getCourseId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  teacherId: &quot; + question.getTeacherId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == testQuestions.get(testQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveSimpleTestQuestionsToFirebase(List&lt;SimpleTestQuestion&gt; simpleTestQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for simple test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (SimpleTestQuestion question : simpleTestQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Simple test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Simple Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == simpleTestQuestions.get(simpleTestQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveQuizQuestionsToFirebase(List&lt;QuizQuestion&gt; quizQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for quiz questions (old structure)...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (QuizQuestion question : quizQuestions) {&#10;            db.collection(&quot;quizzes&quot;)  // Lưu vào collection &quot;quizzes&quot; với cấu trúc cũ&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Quiz question (old structure) saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == quizQuestions.get(quizQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditCourseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditCourseActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.ProgressBar;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class EditCourseActivity extends AppCompatActivity {&#10;&#10;    private EditText etCourseTitle, etCourseDescription, etCourseDuration;&#10;    private Spinner spinnerLevel, spinnerCategory;&#10;    private Button btnUpdateCourse, btnDeleteCourse, btnManageLessons, btnViewStudents;&#10;    private ProgressBar progressBar;&#10;    private BottomNavigationView bottomNavigation;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId;&#10;    private Course currentCourse;&#10;&#10;    // Arrays cho spinners&#10;    private String[] levels = {&quot;Beginner&quot;, &quot;Intermediate&quot;, &quot;Advanced&quot;};&#10;    private String[] categories = {&quot;Grammar&quot;, &quot;Vocabulary&quot;, &quot;Listening&quot;, &quot;Speaking&quot;, &quot;Reading&quot;, &quot;Writing&quot;};&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_course);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        // Get course ID from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupSpinners();&#10;        setupBottomNavigation();&#10;        setupClickListeners();&#10;        loadCourseData();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#10;        etCourseTitle = findViewById(R.id.et_course_title);&#10;        etCourseDescription = findViewById(R.id.et_course_description);&#10;        etCourseDuration = findViewById(R.id.et_course_duration);&#10;        spinnerLevel = findViewById(R.id.spinner_level);&#10;        spinnerCategory = findViewById(R.id.spinner_category);&#10;        btnUpdateCourse = findViewById(R.id.btn_update_course);&#10;        btnDeleteCourse = findViewById(R.id.btn_delete_course);&#10;        btnManageLessons = findViewById(R.id.btn_manage_lessons);&#10;        btnViewStudents = findViewById(R.id.btn_view_students);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa khóa học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupSpinners() {&#10;        // Setup Level spinner&#10;        ArrayAdapter&lt;String&gt; levelAdapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_spinner_item, levels);&#10;        levelAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerLevel.setAdapter(levelAdapter);&#10;&#10;        // Setup Category spinner&#10;        ArrayAdapter&lt;String&gt; categoryAdapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_spinner_item, categories);&#10;        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerCategory.setAdapter(categoryAdapter);&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setSelectedItemId(R.id.nav_courses);&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                // Already on courses&#10;                return true;&#10;            } else if (itemId == R.id.nav_students) {&#10;                startActivity(new Intent(this, EnrollmentManagementActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnUpdateCourse.setOnClickListener(v -&gt; updateCourse());&#10;        btnDeleteCourse.setOnClickListener(v -&gt; deleteCourse());&#10;        btnManageLessons.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, LessonManagementActivity.class);&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#10;            intent.putExtra(&quot;courseCategory&quot;, currentCourse != null ? currentCourse.getCategory() : &quot;&quot;);&#10;            startActivity(intent);&#10;        });&#10;        btnViewStudents.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, CourseStudentsActivity.class);&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void loadCourseData() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (documentSnapshot.exists()) {&#10;                    currentCourse = documentSnapshot.toObject(Course.class);&#10;                    if (currentCourse != null) {&#10;                        currentCourse.setId(documentSnapshot.getId());&#10;                        populateFields();&#10;                    }&#10;                } else {&#10;                    Toast.makeText(this, &quot;Không tìm thấy khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(this, &quot;Lỗi khi tải dữ liệu khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error loading course&quot;, e);&#10;            });&#10;    }&#10;&#10;    private void populateFields() {&#10;        // Điền thông tin khóa học vào các trường&#10;        etCourseTitle.setText(currentCourse.getTitle());&#10;        etCourseDescription.setText(currentCourse.getDescription());&#10;        etCourseDuration.setText(String.valueOf(currentCourse.getDuration()));&#10;&#10;        // Set spinner selections&#10;        setSpinnerSelection(spinnerLevel, currentCourse.getLevel());&#10;        setSpinnerSelection(spinnerCategory, currentCourse.getCategory());&#10;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Populated fields for course: &quot; + currentCourse.getTitle());&#10;    }&#10;&#10;    private void setSpinnerSelection(Spinner spinner, String value) {&#10;        if (value != null) {&#10;            ArrayAdapter adapter = (ArrayAdapter) spinner.getAdapter();&#10;            int position = adapter.getPosition(value);&#10;            if (position &gt;= 0) {&#10;                spinner.setSelection(position);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void updateCourse() {&#10;        String title = etCourseTitle.getText().toString().trim();&#10;        String description = etCourseDescription.getText().toString().trim();&#10;        String durationStr = etCourseDuration.getText().toString().trim();&#10;        String level = spinnerLevel.getSelectedItem().toString();&#10;        String category = spinnerCategory.getSelectedItem().toString();&#10;&#10;        // Validation&#10;        if (title.isEmpty()) {&#10;            etCourseTitle.setError(&quot;Vui lòng nhập tên khóa học&quot;);&#10;            etCourseTitle.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (description.isEmpty()) {&#10;            etCourseDescription.setError(&quot;Vui lòng nhập mô tả khóa học&quot;);&#10;            etCourseDescription.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (durationStr.isEmpty()) {&#10;            etCourseDuration.setError(&quot;Vui lòng nhập thời lượng&quot;);&#10;            etCourseDuration.requestFocus();&#10;            return;&#10;        }&#10;&#10;        int duration;&#10;        try {&#10;            duration = Integer.parseInt(durationStr);&#10;            if (duration &lt;= 0) {&#10;                etCourseDuration.setError(&quot;Thời lượng phải lớn hơn 0&quot;);&#10;                etCourseDuration.requestFocus();&#10;                return;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            etCourseDuration.setError(&quot;Thời lượng phải là số&quot;);&#10;            etCourseDuration.requestFocus();&#10;            return;&#10;        }&#10;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        btnUpdateCourse.setEnabled(false);&#10;&#10;        // Tạo map để update&#10;        Map&lt;String, Object&gt; updates = new HashMap&lt;&gt;();&#10;        updates.put(&quot;title&quot;, title);&#10;        updates.put(&quot;description&quot;, description);&#10;        updates.put(&quot;duration&quot;, duration);&#10;        updates.put(&quot;level&quot;, level);&#10;        updates.put(&quot;category&quot;, category);&#10;        updates.put(&quot;updatedAt&quot;, new Date());&#10;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Updating course with: &quot; + updates);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .update(updates)&#10;            .addOnSuccessListener(aVoid -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                btnUpdateCourse.setEnabled(true);&#10;                Toast.makeText(this, &quot;Cập nhật khóa học thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                // Cập nhật currentCourse object&#10;                currentCourse.setTitle(title);&#10;                currentCourse.setDescription(description);&#10;                currentCourse.setDuration(duration);&#10;                currentCourse.setLevel(level);&#10;                currentCourse.setCategory(category);&#10;&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course updated successfully&quot;);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                btnUpdateCourse.setEnabled(true);&#10;                Toast.makeText(this, &quot;Lỗi khi cập nhật khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error updating course&quot;, e);&#10;            });&#10;    }&#10;&#10;    private void deleteCourse() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;            .setTitle(&quot;Xác nhận xóa khóa học&quot;)&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa khóa học \&quot;&quot; + currentCourse.getTitle() + &quot;\&quot;?\n\nHành động này sẽ:\n- Xóa khóa học vĩnh viễn\n- Xóa tất cả bài học trong khóa\n- Không thể hoàn tác&quot;)&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteCourse())&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#10;            .setIcon(android.R.drawable.ic_dialog_alert)&#10;            .show();&#10;    }&#10;&#10;    private void performDeleteCourse() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        btnDeleteCourse.setEnabled(false);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .delete()&#10;            .addOnSuccessListener(aVoid -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(this, &quot;Đã xóa khóa học thành công&quot;, Toast.LENGTH_SHORT).show();&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course deleted successfully&quot;);&#10;&#10;                // Quay về CourseManagementActivity&#10;                Intent intent = new Intent(this, CourseManagementActivity.class);&#10;                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#10;                startActivity(intent);&#10;                finish();&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                btnDeleteCourse.setEnabled(true);&#10;                Toast.makeText(this, &quot;Lỗi khi xóa khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error deleting course&quot;, e);&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload course data when returning to this activity&#10;        if (courseId != null) {&#10;            loadCourseData();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class EditCourseActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private EditText etCourseTitle, etCourseDescription, etCourseDuration;&#13;&#10;    private Spinner spinnerLevel, spinnerCategory;&#13;&#10;    private Button btnUpdateCourse, btnDeleteCourse, btnManageLessons, btnViewStudents, btnEditTestQuestions;&#13;&#10;    private ProgressBar progressBar;&#13;&#10;    private BottomNavigationView bottomNavigation;&#13;&#10;    private Toolbar toolbar;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String courseId;&#13;&#10;    private Course currentCourse;&#13;&#10;&#13;&#10;    // Arrays cho spinners&#13;&#10;    private String[] levels = {&quot;Beginner&quot;, &quot;Intermediate&quot;, &quot;Advanced&quot;};&#13;&#10;    private String[] categories = {&quot;Grammar&quot;, &quot;Vocabulary&quot;, &quot;Listening&quot;, &quot;Speaking&quot;, &quot;Reading&quot;, &quot;Writing&quot;};&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_edit_course);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        // Get course ID from intent&#13;&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#13;&#10;        if (courseId == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            finish();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupSpinners();&#13;&#10;        setupBottomNavigation();&#13;&#10;        setupClickListeners();&#13;&#10;        loadCourseData();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#13;&#10;        etCourseTitle = findViewById(R.id.et_course_title);&#13;&#10;        etCourseDescription = findViewById(R.id.et_course_description);&#13;&#10;        etCourseDuration = findViewById(R.id.et_course_duration);&#13;&#10;        spinnerLevel = findViewById(R.id.spinner_level);&#13;&#10;        spinnerCategory = findViewById(R.id.spinner_category);&#13;&#10;        btnUpdateCourse = findViewById(R.id.btn_update_course);&#13;&#10;        btnDeleteCourse = findViewById(R.id.btn_delete_course);&#13;&#10;        btnManageLessons = findViewById(R.id.btn_manage_lessons);&#13;&#10;        btnViewStudents = findViewById(R.id.btn_view_students);&#13;&#10;        btnEditTestQuestions = findViewById(R.id.btn_edit_test_questions); // Thêm nút mới&#13;&#10;        progressBar = findViewById(R.id.progress_bar);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa khóa học&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinners() {&#13;&#10;        // Setup Level spinner&#13;&#10;        ArrayAdapter&lt;String&gt; levelAdapter = new ArrayAdapter&lt;&gt;(this,&#13;&#10;            android.R.layout.simple_spinner_item, levels);&#13;&#10;        levelAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spinnerLevel.setAdapter(levelAdapter);&#13;&#10;&#13;&#10;        // Setup Category spinner&#13;&#10;        ArrayAdapter&lt;String&gt; categoryAdapter = new ArrayAdapter&lt;&gt;(this,&#13;&#10;            android.R.layout.simple_spinner_item, categories);&#13;&#10;        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spinnerCategory.setAdapter(categoryAdapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupBottomNavigation() {&#13;&#10;        bottomNavigation.setSelectedItemId(R.id.nav_courses);&#13;&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#13;&#10;            int itemId = item.getItemId();&#13;&#10;            if (itemId == R.id.nav_home) {&#13;&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_courses) {&#13;&#10;                // Already on courses&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_students) {&#13;&#10;                startActivity(new Intent(this, EnrollmentManagementActivity.class));&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_profile) {&#13;&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#13;&#10;                return true;&#13;&#10;            }&#13;&#10;            return false;&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnUpdateCourse.setOnClickListener(v -&gt; updateCourse());&#13;&#10;        btnDeleteCourse.setOnClickListener(v -&gt; deleteCourse());&#13;&#10;        btnManageLessons.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, LessonManagementActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#13;&#10;            intent.putExtra(&quot;courseCategory&quot;, currentCourse != null ? currentCourse.getCategory() : &quot;&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;        btnViewStudents.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, CourseStudentsActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;        btnEditTestQuestions.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, EditTestQuestionsActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadCourseData() {&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                if (documentSnapshot.exists()) {&#13;&#10;                    currentCourse = documentSnapshot.toObject(Course.class);&#13;&#10;                    if (currentCourse != null) {&#13;&#10;                        currentCourse.setId(documentSnapshot.getId());&#13;&#10;                        populateFields();&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    Toast.makeText(this, &quot;Không tìm thấy khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    finish();&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                Toast.makeText(this, &quot;Lỗi khi tải dữ liệu khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error loading course&quot;, e);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void populateFields() {&#13;&#10;        // Điền thông tin khóa học vào các trường&#13;&#10;        etCourseTitle.setText(currentCourse.getTitle());&#13;&#10;        etCourseDescription.setText(currentCourse.getDescription());&#13;&#10;        etCourseDuration.setText(String.valueOf(currentCourse.getDuration()));&#13;&#10;&#13;&#10;        // Set spinner selections&#13;&#10;        setSpinnerSelection(spinnerLevel, currentCourse.getLevel());&#13;&#10;        setSpinnerSelection(spinnerCategory, currentCourse.getCategory());&#13;&#10;&#13;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Populated fields for course: &quot; + currentCourse.getTitle());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setSpinnerSelection(Spinner spinner, String value) {&#13;&#10;        if (value != null) {&#13;&#10;            ArrayAdapter adapter = (ArrayAdapter) spinner.getAdapter();&#13;&#10;            int position = adapter.getPosition(value);&#13;&#10;            if (position &gt;= 0) {&#13;&#10;                spinner.setSelection(position);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateCourse() {&#13;&#10;        String title = etCourseTitle.getText().toString().trim();&#13;&#10;        String description = etCourseDescription.getText().toString().trim();&#13;&#10;        String durationStr = etCourseDuration.getText().toString().trim();&#13;&#10;        String level = spinnerLevel.getSelectedItem().toString();&#13;&#10;        String category = spinnerCategory.getSelectedItem().toString();&#13;&#10;&#13;&#10;        // Validation&#13;&#10;        if (title.isEmpty()) {&#13;&#10;            etCourseTitle.setError(&quot;Vui lòng nhập tên khóa học&quot;);&#13;&#10;            etCourseTitle.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (description.isEmpty()) {&#13;&#10;            etCourseDescription.setError(&quot;Vui lòng nhập mô tả khóa học&quot;);&#13;&#10;            etCourseDescription.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (durationStr.isEmpty()) {&#13;&#10;            etCourseDuration.setError(&quot;Vui lòng nhập thời lượng&quot;);&#13;&#10;            etCourseDuration.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        int duration;&#13;&#10;        try {&#13;&#10;            duration = Integer.parseInt(durationStr);&#13;&#10;            if (duration &lt;= 0) {&#13;&#10;                etCourseDuration.setError(&quot;Thời lượng phải lớn hơn 0&quot;);&#13;&#10;                etCourseDuration.requestFocus();&#13;&#10;                return;&#13;&#10;            }&#13;&#10;        } catch (NumberFormatException e) {&#13;&#10;            etCourseDuration.setError(&quot;Thời lượng phải là số&quot;);&#13;&#10;            etCourseDuration.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;        btnUpdateCourse.setEnabled(false);&#13;&#10;&#13;&#10;        // Tạo map để update&#13;&#10;        Map&lt;String, Object&gt; updates = new HashMap&lt;&gt;();&#13;&#10;        updates.put(&quot;title&quot;, title);&#13;&#10;        updates.put(&quot;description&quot;, description);&#13;&#10;        updates.put(&quot;duration&quot;, duration);&#13;&#10;        updates.put(&quot;level&quot;, level);&#13;&#10;        updates.put(&quot;category&quot;, category);&#13;&#10;        updates.put(&quot;updatedAt&quot;, new Date());&#13;&#10;&#13;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Updating course with: &quot; + updates);&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .update(updates)&#13;&#10;            .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                btnUpdateCourse.setEnabled(true);&#13;&#10;                Toast.makeText(this, &quot;Cập nhật khóa học thành công!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;&#13;&#10;                // Cập nhật currentCourse object&#13;&#10;                currentCourse.setTitle(title);&#13;&#10;                currentCourse.setDescription(description);&#13;&#10;                currentCourse.setDuration(duration);&#13;&#10;                currentCourse.setLevel(level);&#13;&#10;                currentCourse.setCategory(category);&#13;&#10;&#13;&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course updated successfully&quot;);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                btnUpdateCourse.setEnabled(true);&#13;&#10;                Toast.makeText(this, &quot;Lỗi khi cập nhật khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error updating course&quot;, e);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void deleteCourse() {&#13;&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#13;&#10;            .setTitle(&quot;Xác nhận xóa khóa học&quot;)&#13;&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa khóa học \&quot;&quot; + currentCourse.getTitle() + &quot;\&quot;?\n\nHành động này sẽ:\n- Xóa khóa học vĩnh viễn\n- Xóa tất cả bài học trong khóa\n- Không thể hoàn tác&quot;)&#13;&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteCourse())&#13;&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#13;&#10;            .setIcon(android.R.drawable.ic_dialog_alert)&#13;&#10;            .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void performDeleteCourse() {&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;        btnDeleteCourse.setEnabled(false);&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .delete()&#13;&#10;            .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                Toast.makeText(this, &quot;Đã xóa khóa học thành công&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course deleted successfully&quot;);&#13;&#10;&#13;&#10;                // Quay về CourseManagementActivity&#13;&#10;                Intent intent = new Intent(this, CourseManagementActivity.class);&#13;&#10;                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#13;&#10;                startActivity(intent);&#13;&#10;                finish();&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                btnDeleteCourse.setEnabled(true);&#13;&#10;                Toast.makeText(this, &quot;Lỗi khi xóa khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error deleting course&quot;, e);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onResume() {&#13;&#10;        super.onResume();&#13;&#10;        // Reload course data when returning to this activity&#13;&#10;        if (courseId != null) {&#13;&#10;            loadCourseData();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditSingleTestQuestionActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditSingleTestQuestionActivity.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class EditSingleTestQuestionActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;EditSingleTestQuestion&quot;;&#10;    &#10;    private Toolbar toolbar;&#10;    private TextInputEditText etQuestion, etOptionA, etOptionB, etOptionC, etOptionD;&#10;    private RadioGroup rgCorrectAnswer;&#10;    private RadioButton rbOptionA, rbOptionB, rbOptionC, rbOptionD;&#10;    private Button btnSaveQuestion, btnDeleteQuestion;&#10;    &#10;    private FirebaseFirestore db;&#10;    private String courseId, courseName, questionId;&#10;    private SimpleTestQuestion currentQuestion;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_single_test_question);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getQuestionInfo();&#10;        setupClickListeners();&#10;        loadQuestionData();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuestion = findViewById(R.id.et_question);&#10;        etOptionA = findViewById(R.id.et_option_a);&#10;        etOptionB = findViewById(R.id.et_option_b);&#10;        etOptionC = findViewById(R.id.et_option_c);&#10;        etOptionD = findViewById(R.id.et_option_d);&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#10;        rbOptionA = findViewById(R.id.rb_option_a);&#10;        rbOptionB = findViewById(R.id.rb_option_b);&#10;        rbOptionC = findViewById(R.id.rb_option_c);&#10;        rbOptionD = findViewById(R.id.rb_option_d);&#10;        btnSaveQuestion = findViewById(R.id.btn_save_question);&#10;        btnDeleteQuestion = findViewById(R.id.btn_delete_question);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa câu hỏi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void getQuestionInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;        questionId = getIntent().getStringExtra(&quot;questionId&quot;);&#10;        &#10;        if (courseName != null) {&#10;            getSupportActionBar().setSubtitle(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSaveQuestion.setOnClickListener(v -&gt; saveQuestion());&#10;        btnDeleteQuestion.setOnClickListener(v -&gt; deleteQuestion());&#10;    }&#10;&#10;    private void loadQuestionData() {&#10;        if (questionId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Loading question data for ID: &quot; + questionId);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentQuestion = documentSnapshot.toObject(SimpleTestQuestion.class);&#10;                        if (currentQuestion != null) {&#10;                            currentQuestion.setDocumentId(documentSnapshot.getId());&#10;                            populateFields();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error loading question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi tải câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void populateFields() {&#10;        if (currentQuestion == null) return;&#10;&#10;        // Điền nội dung câu hỏi&#10;        etQuestion.setText(currentQuestion.getQuestion());&#10;&#10;        // Điền các lựa chọn&#10;        List&lt;String&gt; options = currentQuestion.getCorrectAnswer();&#10;        if (options != null &amp;&amp; options.size() &gt;= 4) {&#10;            etOptionA.setText(options.get(0));&#10;            etOptionB.setText(options.get(1));&#10;            etOptionC.setText(options.get(2));&#10;            etOptionD.setText(options.get(3));&#10;        }&#10;&#10;        // Chọn đáp án đúng&#10;        int correctIndex = currentQuestion.getOptions();&#10;        switch (correctIndex) {&#10;            case 0:&#10;                rbOptionA.setChecked(true);&#10;                break;&#10;            case 1:&#10;                rbOptionB.setChecked(true);&#10;                break;&#10;            case 2:&#10;                rbOptionC.setChecked(true);&#10;                break;&#10;            case 3:&#10;                rbOptionD.setChecked(true);&#10;                break;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Populated fields for question: &quot; + currentQuestion.getQuestion());&#10;    }&#10;&#10;    private void saveQuestion() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        String questionText = etQuestion.getText().toString().trim();&#10;        List&lt;String&gt; options = new ArrayList&lt;&gt;();&#10;        options.add(etOptionA.getText().toString().trim());&#10;        options.add(etOptionB.getText().toString().trim());&#10;        options.add(etOptionC.getText().toString().trim());&#10;        options.add(etOptionD.getText().toString().trim());&#10;&#10;        int correctAnswerIndex = getCorrectAnswerIndex();&#10;&#10;        // Cập nhật currentQuestion&#10;        currentQuestion.setQuestion(questionText);&#10;        currentQuestion.setCorrectAnswer(options);&#10;        currentQuestion.setOptions(correctAnswerIndex);&#10;&#10;        btnSaveQuestion.setEnabled(false);&#10;        btnSaveQuestion.setText(&quot;Đang lưu...&quot;);&#10;&#10;        Log.d(TAG, &quot;Saving question: &quot; + currentQuestion.toString());&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .set(currentQuestion)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Log.d(TAG, &quot;Question saved successfully&quot;);&#10;                    Toast.makeText(this, &quot;Đã lưu câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error saving question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                    btnSaveQuestion.setEnabled(true);&#10;                    btnSaveQuestion.setText(&quot;Lưu thay đổi&quot;);&#10;                });&#10;    }&#10;&#10;    private void deleteQuestion() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xác nhận xóa câu hỏi&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa câu hỏi này?\n\nHành động này không thể hoàn tác.&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteQuestion())&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .setIcon(android.R.drawable.ic_dialog_alert)&#10;                .show();&#10;    }&#10;&#10;    private void performDeleteQuestion() {&#10;        btnDeleteQuestion.setEnabled(false);&#10;        btnDeleteQuestion.setText(&quot;Đang xóa...&quot;);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .delete()&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Log.d(TAG, &quot;Question deleted successfully&quot;);&#10;                    Toast.makeText(this, &quot;Đã xóa câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error deleting question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                    btnDeleteQuestion.setEnabled(true);&#10;                    btnDeleteQuestion.setText(&quot;Xóa câu hỏi&quot;);&#10;                });&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String questionText = etQuestion.getText().toString().trim();&#10;        if (questionText.isEmpty()) {&#10;            etQuestion.setError(&quot;Vui lòng nhập nội dung câu hỏi&quot;);&#10;            etQuestion.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        String[] options = {&#10;            etOptionA.getText().toString().trim(),&#10;            etOptionB.getText().toString().trim(),&#10;            etOptionC.getText().toString().trim(),&#10;            etOptionD.getText().toString().trim()&#10;        };&#10;&#10;        for (int i = 0; i &lt; options.length; i++) {&#10;            if (options[i].isEmpty()) {&#10;                switch (i) {&#10;                    case 0:&#10;                        etOptionA.setError(&quot;Vui lòng nhập lựa chọn A&quot;);&#10;                        etOptionA.requestFocus();&#10;                        break;&#10;                    case 1:&#10;                        etOptionB.setError(&quot;Vui lòng nhập lựa chọn B&quot;);&#10;                        etOptionB.requestFocus();&#10;                        break;&#10;                    case 2:&#10;                        etOptionC.setError(&quot;Vui lòng nhập lựa chọn C&quot;);&#10;                        etOptionC.requestFocus();&#10;                        break;&#10;                    case 3:&#10;                        etOptionD.setError(&quot;Vui lòng nhập lựa chọn D&quot;);&#10;                        etOptionD.requestFocus();&#10;                        break;&#10;                }&#10;                return false;&#10;            }&#10;        }&#10;&#10;        if (rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng&quot;, Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex() {&#10;        int checkedId = rgCorrectAnswer.getCheckedRadioButtonId();&#10;        &#10;        if (checkedId == rbOptionA.getId()) {&#10;            return 0;&#10;        } else if (checkedId == rbOptionB.getId()) {&#10;            return 1;&#10;        } else if (checkedId == rbOptionC.getId()) {&#10;            return 2;&#10;        } else if (checkedId == rbOptionD.getId()) {&#10;            return 3;&#10;        }&#10;        &#10;        return -1;&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditTestQuestionsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditTestQuestionsActivity.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import com.vantinh.tienganh.adapters.EditTestQuestionAdapter;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class EditTestQuestionsActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;EditTestQuestions&quot;;&#10;    &#10;    private Toolbar toolbar;&#10;    private RecyclerView recyclerView;&#10;    private ProgressBar progressBar;&#10;    private TextView tvNoQuestions;&#10;    private EditTestQuestionAdapter adapter;&#10;    &#10;    private FirebaseFirestore db;&#10;    private String courseId;&#10;    private String courseName;&#10;    private List&lt;SimpleTestQuestion&gt; testQuestions;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_test_questions);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCourseInfo();&#10;        setupRecyclerView();&#10;        loadTestQuestions();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        recyclerView = findViewById(R.id.rv_test_questions);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;        tvNoQuestions = findViewById(R.id.tv_no_questions);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa bài kiểm tra&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void getCourseInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;        &#10;        if (courseName != null) {&#10;            getSupportActionBar().setSubtitle(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        testQuestions = new ArrayList&lt;&gt;();&#10;        adapter = new EditTestQuestionAdapter(testQuestions, this::editQuestion, this::deleteQuestion);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void loadTestQuestions() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        recyclerView.setVisibility(View.GONE);&#10;        tvNoQuestions.setVisibility(View.GONE);&#10;&#10;        Log.d(TAG, &quot;Loading test questions for courseId: &quot; + courseId);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    testQuestions.clear();&#10;                    &#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        SimpleTestQuestion question = document.toObject(SimpleTestQuestion.class);&#10;                        question.setDocumentId(document.getId()); // Lưu document ID để có thể edit/delete&#10;                        testQuestions.add(question);&#10;                        &#10;                        Log.d(TAG, &quot;Loaded question: &quot; + question.getQuestion());&#10;                    }&#10;&#10;                    progressBar.setVisibility(View.GONE);&#10;                    &#10;                    if (testQuestions.isEmpty()) {&#10;                        tvNoQuestions.setVisibility(View.VISIBLE);&#10;                        recyclerView.setVisibility(View.GONE);&#10;                    } else {&#10;                        tvNoQuestions.setVisibility(View.GONE);&#10;                        recyclerView.setVisibility(View.VISIBLE);&#10;                        adapter.notifyDataSetChanged();&#10;                    }&#10;&#10;                    Log.d(TAG, &quot;Total questions loaded: &quot; + testQuestions.size());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error loading test questions&quot;, e);&#10;                    progressBar.setVisibility(View.GONE);&#10;                    tvNoQuestions.setVisibility(View.VISIBLE);&#10;                    tvNoQuestions.setText(&quot;Lỗi khi tải danh sách câu hỏi&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi khi tải danh sách câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void editQuestion(SimpleTestQuestion question) {&#10;        // Chuyển đến activity chỉnh sửa câu hỏi&#10;        Intent intent = new Intent(this, EditSingleTestQuestionActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, courseId);&#10;        intent.putExtra(&quot;courseName&quot;, courseName);&#10;        intent.putExtra(&quot;questionId&quot;, question.getDocumentId());&#10;        intent.putExtra(&quot;question&quot;, question.getQuestion());&#10;        // Truyền thêm dữ liệu khác nếu cần&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void deleteQuestion(SimpleTestQuestion question) {&#10;        // Xóa câu hỏi&#10;        if (question.getDocumentId() != null) {&#10;            db.collection(&quot;test&quot;)&#10;                    .document(question.getDocumentId())&#10;                    .delete()&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        Log.d(TAG, &quot;Question deleted successfully&quot;);&#10;                        Toast.makeText(this, &quot;Đã xóa câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadTestQuestions(); // Reload danh sách&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Log.e(TAG, &quot;Error deleting question&quot;, e);&#10;                        Toast.makeText(this, &quot;Lỗi khi xóa câu hỏi: &quot; + e.getMessage(), &#10;                                     Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload danh sách khi quay lại từ activity chỉnh sửa&#10;        loadTestQuestions();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentListActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentListActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.animation.Animation;&#10;import android.view.animation.AnimationUtils;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Set;&#10;&#10;public class EnrollmentListActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvEnrollments;&#10;    private LinearLayout layoutEmpty;&#10;    private TextView tvTotalCount, tvEmptyMessage;&#10;    private FloatingActionButton fabRefresh;&#10;&#10;    private FirebaseFirestore db;&#10;    private List&lt;EnrollmentStudent&gt; enrollmentStudents;&#10;    private EnrollmentStudentAdapter adapter;&#10;&#10;    private String teacherId;&#10;    private String status;&#10;    private String title;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_enrollment_list);&#10;&#10;        initViews();&#10;        getIntentData();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        initFirebase();&#10;        setupFabRefresh();&#10;        loadEnrollmentData();&#10;        addEntranceAnimations();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvEnrollments = findViewById(R.id.rv_enrollments);&#10;        layoutEmpty = findViewById(R.id.layout_empty);&#10;        tvTotalCount = findViewById(R.id.tv_total_count);&#10;        tvEmptyMessage = findViewById(R.id.tv_empty_message);&#10;        fabRefresh = findViewById(R.id.fab_refresh);&#10;    }&#10;&#10;    private void getIntentData() {&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#10;        status = getIntent().getStringExtra(&quot;status&quot;);&#10;        title = getIntent().getStringExtra(&quot;title&quot;);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(title);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        enrollmentStudents = new ArrayList&lt;&gt;();&#10;        adapter = new EnrollmentStudentAdapter(enrollmentStudents);&#10;        rvEnrollments.setLayoutManager(new LinearLayoutManager(this));&#10;        rvEnrollments.setAdapter(adapter);&#10;&#10;        // Add item animation&#10;        rvEnrollments.setItemAnimator(new androidx.recyclerview.widget.DefaultItemAnimator());&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void setupFabRefresh() {&#10;        fabRefresh.setOnClickListener(v -&gt; {&#10;            // Animate FAB&#10;            fabRefresh.animate()&#10;                    .rotation(360f)&#10;                    .setDuration(500)&#10;                    .withEndAction(() -&gt; {&#10;                        fabRefresh.setRotation(0f);&#10;                        loadEnrollmentData();&#10;                    })&#10;                    .start();&#10;        });&#10;    }&#10;&#10;    private void addEntranceAnimations() {&#10;        // Fade in animations&#10;        View headerCard = findViewById(R.id.header_card);&#10;        headerCard.setAlpha(0f);&#10;        rvEnrollments.setAlpha(0f);&#10;        fabRefresh.setAlpha(0f);&#10;&#10;        headerCard.animate()&#10;                .alpha(1f)&#10;                .setDuration(600)&#10;                .setStartDelay(100)&#10;                .start();&#10;&#10;        rvEnrollments.animate()&#10;                .alpha(1f)&#10;                .setDuration(600)&#10;                .setStartDelay(200)&#10;                .start();&#10;&#10;        fabRefresh.animate()&#10;                .alpha(1f)&#10;                .setDuration(600)&#10;                .setStartDelay(300)&#10;                .start();&#10;    }&#10;&#10;    private void loadEnrollmentData() {&#10;        Log.d(&quot;EnrollmentList&quot;, &quot;Loading enrollment data for teacherId: &quot; + teacherId + &quot;, status: &quot; + status);&#10;&#10;        // Lấy danh sách khóa học của giáo viên trước&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    List&lt;String&gt; courseIds = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        courseIds.add(document.getId());&#10;                    }&#10;&#10;                    Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + courseIds.size() + &quot; courses for teacher&quot;);&#10;&#10;                    if (courseIds.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    loadStudentsByStatus(courseIds);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;EnrollmentList&quot;, &quot;Error loading courses&quot;, e);&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadStudentsByStatus(List&lt;String&gt; courseIds) {&#10;        final List&lt;EnrollmentStudent&gt; allStudents = new ArrayList&lt;&gt;();&#10;        final Set&lt;String&gt; uniqueStudents = new HashSet&lt;&gt;(); // Để tránh trùng lặp&#10;&#10;        for (String courseId : courseIds) {&#10;            db.collection(&quot;courseRequests&quot;)&#10;                    .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                    .whereEqualTo(&quot;status&quot;, status)&#10;                    .get()&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                        Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; requests for course: &quot; + courseId);&#10;&#10;                        for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                            String studentId = document.getString(&quot;studentId&quot;);&#10;                            String studentName = document.getString(&quot;studentName&quot;);&#10;                            String courseName = document.getString(&quot;courseName&quot;);&#10;&#10;                            // Tạo key unique dựa trên studentId và courseId để tránh trùng lặp&#10;                            String uniqueKey = studentId + &quot;_&quot; + courseId;&#10;&#10;                            if (!uniqueStudents.contains(uniqueKey)) {&#10;                                uniqueStudents.add(uniqueKey);&#10;                                EnrollmentStudent student = new EnrollmentStudent(&#10;                                        studentId, studentName, courseId, courseName, status&#10;                                );&#10;                                allStudents.add(student);&#10;                            }&#10;                        }&#10;&#10;                        // Cập nhật UI sau khi xử lý tất cả courses&#10;                        updateUI(allStudents);&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Log.e(&quot;EnrollmentList&quot;, &quot;Error loading requests for course: &quot; + courseId, e);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void updateUI(List&lt;EnrollmentStudent&gt; students) {&#10;        runOnUiThread(() -&gt; {&#10;            enrollmentStudents.clear();&#10;            enrollmentStudents.addAll(students);&#10;            adapter.updateData(enrollmentStudents);&#10;&#10;            // Animate count update&#10;            animateCountUpdate(students.size());&#10;&#10;            if (students.isEmpty()) {&#10;                showEmptyState();&#10;            } else {&#10;                showDataState();&#10;            }&#10;&#10;            Log.d(&quot;EnrollmentList&quot;, &quot;Updated UI with &quot; + students.size() + &quot; students&quot;);&#10;        });&#10;    }&#10;&#10;    private void animateCountUpdate(int newCount) {&#10;        // Scale animation for count&#10;        tvTotalCount.animate()&#10;                .scaleX(1.2f)&#10;                .scaleY(1.2f)&#10;                .setDuration(200)&#10;                .withEndAction(() -&gt; {&#10;                    tvTotalCount.setText(String.valueOf(newCount));&#10;                    tvTotalCount.animate()&#10;                            .scaleX(1f)&#10;                            .scaleY(1f)&#10;                            .setDuration(200)&#10;                            .start();&#10;                })&#10;                .start();&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        rvEnrollments.setVisibility(View.GONE);&#10;        layoutEmpty.setVisibility(View.VISIBLE);&#10;&#10;        String message = &quot;Không có học viên nào &quot;;&#10;        if (&quot;approved&quot;.equals(status)) {&#10;            message += &quot;đã được duyệt&quot;;&#10;        } else if (&quot;rejected&quot;.equals(status)) {&#10;            message += &quot;đã bị từ chối&quot;;&#10;        }&#10;&#10;        tvEmptyMessage.setText(message);&#10;&#10;        // Animate empty state&#10;        layoutEmpty.setAlpha(0f);&#10;        layoutEmpty.animate()&#10;                .alpha(1f)&#10;                .setDuration(500)&#10;                .start();&#10;    }&#10;&#10;    private void showDataState() {&#10;        rvEnrollments.setVisibility(View.VISIBLE);&#10;        layoutEmpty.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.util.Log;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.view.animation.Animation;&#13;&#10;import android.view.animation.AnimationUtils;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.TextView;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.HashSet;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;public class EnrollmentListActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private RecyclerView rvEnrollments;&#13;&#10;    private LinearLayout layoutEmpty;&#13;&#10;    private TextView tvTotalCount, tvEmptyMessage;&#13;&#10;    private Button fabRefresh;&#13;&#10;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private List&lt;EnrollmentStudent&gt; enrollmentStudents;&#13;&#10;    private EnrollmentStudentAdapter adapter;&#13;&#10;&#13;&#10;    private String teacherId;&#13;&#10;    private String status;&#13;&#10;    private String title;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_enrollment_list);&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        getIntentData();&#13;&#10;        setupToolbar();&#13;&#10;        setupRecyclerView();&#13;&#10;        initFirebase();&#13;&#10;        setupFabRefresh();&#13;&#10;        loadEnrollmentData();&#13;&#10;        addEntranceAnimations();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        rvEnrollments = findViewById(R.id.rv_enrollments);&#13;&#10;        layoutEmpty = findViewById(R.id.layout_empty);&#13;&#10;        tvTotalCount = findViewById(R.id.tv_total_count);&#13;&#10;        tvEmptyMessage = findViewById(R.id.tv_empty_message);&#13;&#10;        fabRefresh = findViewById(R.id.fab_refresh);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void getIntentData() {&#13;&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#13;&#10;        status = getIntent().getStringExtra(&quot;status&quot;);&#13;&#10;        title = getIntent().getStringExtra(&quot;title&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(title);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupRecyclerView() {&#13;&#10;        enrollmentStudents = new ArrayList&lt;&gt;();&#13;&#10;        adapter = new EnrollmentStudentAdapter(enrollmentStudents);&#13;&#10;        rvEnrollments.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        rvEnrollments.setAdapter(adapter);&#13;&#10;&#13;&#10;        // Add item animation&#13;&#10;        rvEnrollments.setItemAnimator(new androidx.recyclerview.widget.DefaultItemAnimator());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initFirebase() {&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupFabRefresh() {&#13;&#10;        fabRefresh.setOnClickListener(v -&gt; {&#13;&#10;            // Animate FAB&#13;&#10;            fabRefresh.animate()&#13;&#10;                    .rotation(360f)&#13;&#10;                    .setDuration(500)&#13;&#10;                    .withEndAction(() -&gt; {&#13;&#10;                        fabRefresh.setRotation(0f);&#13;&#10;                        loadEnrollmentData();&#13;&#10;                    })&#13;&#10;                    .start();&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addEntranceAnimations() {&#13;&#10;        // Fade in animations&#13;&#10;        View headerCard = findViewById(R.id.header_card);&#13;&#10;        headerCard.setAlpha(0f);&#13;&#10;        rvEnrollments.setAlpha(0f);&#13;&#10;        fabRefresh.setAlpha(0f);&#13;&#10;&#13;&#10;        headerCard.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(600)&#13;&#10;                .setStartDelay(100)&#13;&#10;                .start();&#13;&#10;&#13;&#10;        rvEnrollments.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(600)&#13;&#10;                .setStartDelay(200)&#13;&#10;                .start();&#13;&#10;&#13;&#10;        fabRefresh.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(600)&#13;&#10;                .setStartDelay(300)&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadEnrollmentData() {&#13;&#10;        Log.d(&quot;EnrollmentList&quot;, &quot;Loading enrollment data for teacherId: &quot; + teacherId + &quot;, status: &quot; + status);&#13;&#10;&#13;&#10;        // Lấy danh sách khóa học của giáo viên trước&#13;&#10;        db.collection(&quot;courses&quot;)&#13;&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                    List&lt;String&gt; courseIds = new ArrayList&lt;&gt;();&#13;&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#13;&#10;                        courseIds.add(document.getId());&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + courseIds.size() + &quot; courses for teacher&quot;);&#13;&#10;&#13;&#10;                    if (courseIds.isEmpty()) {&#13;&#10;                        showEmptyState();&#13;&#10;                        return;&#13;&#10;                    }&#13;&#10;&#13;&#10;                    loadStudentsByStatus(courseIds);&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    Log.e(&quot;EnrollmentList&quot;, &quot;Error loading courses&quot;, e);&#13;&#10;                    showEmptyState();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadStudentsByStatus(List&lt;String&gt; courseIds) {&#13;&#10;        final List&lt;EnrollmentStudent&gt; allStudents = new ArrayList&lt;&gt;();&#13;&#10;        final Set&lt;String&gt; uniqueStudents = new HashSet&lt;&gt;(); // Để tránh trùng lặp&#13;&#10;&#13;&#10;        for (String courseId : courseIds) {&#13;&#10;            db.collection(&quot;courseRequests&quot;)&#13;&#10;                    .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                    .whereEqualTo(&quot;status&quot;, status)&#13;&#10;                    .get()&#13;&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                        Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; requests for course: &quot; + courseId);&#13;&#10;&#13;&#10;                        for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#13;&#10;                            String studentId = document.getString(&quot;studentId&quot;);&#13;&#10;                            String studentName = document.getString(&quot;studentName&quot;);&#13;&#10;                            String courseName = document.getString(&quot;courseName&quot;);&#13;&#10;&#13;&#10;                            // Tạo key unique dựa trên studentId và courseId để tránh trùng lặp&#13;&#10;                            String uniqueKey = studentId + &quot;_&quot; + courseId;&#13;&#10;&#13;&#10;                            if (!uniqueStudents.contains(uniqueKey)) {&#13;&#10;                                uniqueStudents.add(uniqueKey);&#13;&#10;                                EnrollmentStudent student = new EnrollmentStudent(&#13;&#10;                                        studentId, studentName, courseId, courseName, status&#13;&#10;                                );&#13;&#10;                                allStudents.add(student);&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;&#13;&#10;                        // Cập nhật UI sau khi xử lý tất cả courses&#13;&#10;                        updateUI(allStudents);&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        Log.e(&quot;EnrollmentList&quot;, &quot;Error loading requests for course: &quot; + courseId, e);&#13;&#10;                    });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateUI(List&lt;EnrollmentStudent&gt; students) {&#13;&#10;        runOnUiThread(() -&gt; {&#13;&#10;            enrollmentStudents.clear();&#13;&#10;            enrollmentStudents.addAll(students);&#13;&#10;            adapter.updateData(enrollmentStudents);&#13;&#10;&#13;&#10;            // Animate count update&#13;&#10;            animateCountUpdate(students.size());&#13;&#10;&#13;&#10;            if (students.isEmpty()) {&#13;&#10;                showEmptyState();&#13;&#10;            } else {&#13;&#10;                showDataState();&#13;&#10;            }&#13;&#10;&#13;&#10;            Log.d(&quot;EnrollmentList&quot;, &quot;Updated UI with &quot; + students.size() + &quot; students&quot;);&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void animateCountUpdate(int newCount) {&#13;&#10;        // Scale animation for count&#13;&#10;        tvTotalCount.animate()&#13;&#10;                .scaleX(1.2f)&#13;&#10;                .scaleY(1.2f)&#13;&#10;                .setDuration(200)&#13;&#10;                .withEndAction(() -&gt; {&#13;&#10;                    tvTotalCount.setText(String.valueOf(newCount));&#13;&#10;                    tvTotalCount.animate()&#13;&#10;                            .scaleX(1f)&#13;&#10;                            .scaleY(1f)&#13;&#10;                            .setDuration(200)&#13;&#10;                            .start();&#13;&#10;                })&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showEmptyState() {&#13;&#10;        rvEnrollments.setVisibility(View.GONE);&#13;&#10;        layoutEmpty.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        String message = &quot;Không có học viên nào &quot;;&#13;&#10;        if (&quot;approved&quot;.equals(status)) {&#13;&#10;            message += &quot;đã được duyệt&quot;;&#13;&#10;        } else if (&quot;rejected&quot;.equals(status)) {&#13;&#10;            message += &quot;đã bị từ chối&quot;;&#13;&#10;        }&#13;&#10;&#13;&#10;        tvEmptyMessage.setText(message);&#13;&#10;&#13;&#10;        // Animate empty state&#13;&#10;        layoutEmpty.setAlpha(0f);&#13;&#10;        layoutEmpty.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(500)&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showDataState() {&#13;&#10;        rvEnrollments.setVisibility(View.VISIBLE);&#13;&#10;        layoutEmpty.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStatusSelectionActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStatusSelectionActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.animation.Animation;&#10;import android.view.animation.ScaleAnimation;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.cardview.widget.CardView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;&#10;public class EnrollmentStatusSelectionActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private CardView cardApproved, cardRejected;&#10;    private View layoutApproved, layoutRejected;&#10;    private String teacherId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_enrollment_status_selection);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        getTeacherId();&#10;        setupClickListeners();&#10;        addAnimations();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        cardApproved = findViewById(R.id.card_approved);&#10;        cardRejected = findViewById(R.id.card_rejected);&#10;        layoutApproved = findViewById(R.id.layout_approved);&#10;        layoutRejected = findViewById(R.id.layout_rejected);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Quản lý đăng ký&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void getTeacherId() {&#10;        // Lấy teacherId từ Intent hoặc từ FirebaseAuth&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#10;        if (teacherId == null) {&#10;            teacherId = FirebaseAuth.getInstance().getCurrentUser().getUid();&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        cardApproved.setOnClickListener(v -&gt; {&#10;            animateCardClick(cardApproved);&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#10;            intent.putExtra(&quot;status&quot;, &quot;approved&quot;);&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã duyệt&quot;);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardRejected.setOnClickListener(v -&gt; {&#10;            animateCardClick(cardRejected);&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#10;            intent.putExtra(&quot;status&quot;, &quot;rejected&quot;);&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã từ chối&quot;);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void addAnimations() {&#10;        // Fade in animation cho các cards&#10;        cardApproved.setAlpha(0f);&#10;        cardRejected.setAlpha(0f);&#10;&#10;        cardApproved.animate()&#10;                .alpha(1f)&#10;                .setDuration(800)&#10;                .setStartDelay(200)&#10;                .start();&#10;&#10;        cardRejected.animate()&#10;                .alpha(1f)&#10;                .setDuration(800)&#10;                .setStartDelay(400)&#10;                .start();&#10;    }&#10;&#10;    private void animateCardClick(View card) {&#10;        ScaleAnimation scaleAnimation = new ScaleAnimation(&#10;                1.0f, 0.95f, 1.0f, 0.95f,&#10;                Animation.RELATIVE_TO_SELF, 0.5f,&#10;                Animation.RELATIVE_TO_SELF, 0.5f&#10;        );&#10;        scaleAnimation.setDuration(100);&#10;        scaleAnimation.setRepeatCount(1);&#10;        scaleAnimation.setRepeatMode(Animation.REVERSE);&#10;        card.startAnimation(scaleAnimation);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.view.animation.Animation;&#13;&#10;import android.view.animation.ScaleAnimation;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;&#13;&#10;public class EnrollmentStatusSelectionActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private View layoutApproved, layoutRejected;&#13;&#10;    private String teacherId;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_enrollment_status_selection);&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        getTeacherId();&#13;&#10;        setupClickListeners();&#13;&#10;        addAnimations();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        layoutApproved = findViewById(R.id.layout_approved);&#13;&#10;        layoutRejected = findViewById(R.id.layout_rejected);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Quản lý đăng ký&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void getTeacherId() {&#13;&#10;        // Lấy teacherId từ Intent hoặc từ FirebaseAuth&#13;&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#13;&#10;        if (teacherId == null) {&#13;&#10;            teacherId = FirebaseAuth.getInstance().getCurrentUser().getUid();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        layoutApproved.setOnClickListener(v -&gt; {&#13;&#10;            animateCardClick(layoutApproved);&#13;&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#13;&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#13;&#10;            intent.putExtra(&quot;status&quot;, &quot;approved&quot;);&#13;&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã duyệt&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;&#13;&#10;        layoutRejected.setOnClickListener(v -&gt; {&#13;&#10;            animateCardClick(layoutRejected);&#13;&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#13;&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#13;&#10;            intent.putExtra(&quot;status&quot;, &quot;rejected&quot;);&#13;&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã từ chối&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addAnimations() {&#13;&#10;        // Fade in animation cho các cards&#13;&#10;        layoutApproved.setAlpha(0f);&#13;&#10;        layoutRejected.setAlpha(0f);&#13;&#10;&#13;&#10;        layoutApproved.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(800)&#13;&#10;                .setStartDelay(200)&#13;&#10;                .start();&#13;&#10;&#13;&#10;        layoutRejected.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(800)&#13;&#10;                .setStartDelay(400)&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void animateCardClick(View card) {&#13;&#10;        ScaleAnimation scaleAnimation = new ScaleAnimation(&#13;&#10;                1.0f, 0.95f, 1.0f, 0.95f,&#13;&#10;                Animation.RELATIVE_TO_SELF, 0.5f,&#13;&#10;                Animation.RELATIVE_TO_SELF, 0.5f&#13;&#10;        );&#13;&#10;        scaleAnimation.setDuration(100);&#13;&#10;        scaleAnimation.setRepeatCount(1);&#13;&#10;        scaleAnimation.setRepeatMode(Animation.REVERSE);&#13;&#10;        card.startAnimation(scaleAnimation);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudent.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudent.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;public class EnrollmentStudent {&#10;    private String studentId;&#10;    private String studentName;&#10;    private String courseId;&#10;    private String courseName;&#10;    private String status;&#10;&#10;    public EnrollmentStudent() {&#10;        // Constructor rỗng cho Firestore&#10;    }&#10;&#10;    public EnrollmentStudent(String studentId, String studentName, String courseId, String courseName, String status) {&#10;        this.studentId = studentId;&#10;        this.studentName = studentName;&#10;        this.courseId = courseId;&#10;        this.courseName = courseName;&#10;        this.status = status;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getStudentName() {&#10;        return studentName;&#10;    }&#10;&#10;    public void setStudentName(String studentName) {&#10;        this.studentName = studentName;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getCourseName() {&#10;        return courseName;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.courseName = courseName;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudentAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudentAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class EnrollmentStudentAdapter extends RecyclerView.Adapter&lt;EnrollmentStudentAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;EnrollmentStudent&gt; enrollmentStudents;&#10;&#10;    public EnrollmentStudentAdapter(List&lt;EnrollmentStudent&gt; enrollmentStudents) {&#10;        this.enrollmentStudents = enrollmentStudents;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_enrollment_student, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        EnrollmentStudent student = enrollmentStudents.get(position);&#10;        &#10;        holder.tvStudentName.setText(student.getStudentName());&#10;        holder.tvStudentId.setText(&quot;ID: &quot; + student.getStudentId());&#10;        holder.tvCourseName.setText(student.getCourseName());&#10;        holder.tvCourseId.setText(&quot;Course ID: &quot; + student.getCourseId());&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return enrollmentStudents.size();&#10;    }&#10;&#10;    public void updateData(List&lt;EnrollmentStudent&gt; newStudents) {&#10;        this.enrollmentStudents = newStudents;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvStudentName, tvStudentId, tvCourseName, tvCourseId;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvStudentName = itemView.findViewById(R.id.tv_student_name);&#10;            tvStudentId = itemView.findViewById(R.id.tv_student_id);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            tvCourseId = itemView.findViewById(R.id.tv_course_id);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/LessonProgressAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/LessonProgressAdapter.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class LessonProgressAdapter extends RecyclerView.Adapter&lt;LessonProgressAdapter.LessonProgressViewHolder&gt; {&#10;&#10;    private List&lt;StudentProgressDetailActivity.LessonProgressItem&gt; lessonProgressList;&#10;&#10;    public LessonProgressAdapter(List&lt;StudentProgressDetailActivity.LessonProgressItem&gt; lessonProgressList) {&#10;        this.lessonProgressList = lessonProgressList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public LessonProgressViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_lesson_progress, parent, false);&#10;        return new LessonProgressViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull LessonProgressViewHolder holder, int position) {&#10;        StudentProgressDetailActivity.LessonProgressItem item = lessonProgressList.get(position);&#10;&#10;        holder.tvLessonTitle.setText(item.getLessonTitle());&#10;        holder.tvLessonType.setText(item.getLessonType());&#10;&#10;        // Set completion status&#10;        if (item.isCompleted()) {&#10;            holder.ivCompletionStatus.setImageResource(R.drawable.ic_check_circle);&#10;            holder.ivCompletionStatus.setColorFilter(holder.itemView.getContext().getColor(android.R.color.holo_green_dark));&#10;            holder.tvCompletionStatus.setText(&quot;Đã hoàn thành&quot;);&#10;            holder.tvCompletionStatus.setTextColor(holder.itemView.getContext().getColor(android.R.color.holo_green_dark));&#10;        } else {&#10;            holder.ivCompletionStatus.setImageResource(R.drawable.ic_circle_outline);&#10;            holder.ivCompletionStatus.setColorFilter(holder.itemView.getContext().getColor(android.R.color.darker_gray));&#10;            holder.tvCompletionStatus.setText(&quot;Chưa hoàn thành&quot;);&#10;            holder.tvCompletionStatus.setTextColor(holder.itemView.getContext().getColor(android.R.color.darker_gray));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return lessonProgressList != null ? lessonProgressList.size() : 0;&#10;    }&#10;&#10;    static class LessonProgressViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvLessonTitle, tvLessonType, tvCompletionStatus;&#10;        ImageView ivCompletionStatus;&#10;&#10;        public LessonProgressViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvLessonTitle = itemView.findViewById(R.id.tv_lesson_title);&#10;            tvLessonType = itemView.findViewById(R.id.tv_lesson_type);&#10;            tvCompletionStatus = itemView.findViewById(R.id.tv_completion_status);&#10;            ivCompletionStatus = itemView.findViewById(R.id.iv_completion_status);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class LessonProgressAdapter extends RecyclerView.Adapter&lt;LessonProgressAdapter.LessonProgressViewHolder&gt; {&#10;&#10;    private List&lt;StudentProgressDetailActivity.LessonProgressItem&gt; lessonProgressList;&#10;&#10;    public LessonProgressAdapter(List&lt;StudentProgressDetailActivity.LessonProgressItem&gt; lessonProgressList) {&#10;        this.lessonProgressList = lessonProgressList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public LessonProgressViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        // Use existing Android layout&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(android.R.layout.simple_list_item_2, parent, false);&#10;        return new LessonProgressViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull LessonProgressViewHolder holder, int position) {&#10;        StudentProgressDetailActivity.LessonProgressItem item = lessonProgressList.get(position);&#10;        &#10;        // Set completion status with emoji icons&#10;        if (item.isCompleted()) {&#10;            holder.tvLessonTitle.setText(&quot;✅ &quot; + item.getLessonTitle());&#10;            holder.tvLessonType.setText(item.getLessonType() + &quot; - Đã hoàn thành&quot;);&#10;            holder.tvLessonType.setTextColor(holder.itemView.getContext().getColor(android.R.color.holo_green_dark));&#10;        } else {&#10;            holder.tvLessonTitle.setText(&quot;⭕ &quot; + item.getLessonTitle());&#10;            holder.tvLessonType.setText(item.getLessonType() + &quot; - Chưa hoàn thành&quot;);&#10;            holder.tvLessonType.setTextColor(holder.itemView.getContext().getColor(android.R.color.darker_gray));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return lessonProgressList != null ? lessonProgressList.size() : 0;&#10;    }&#10;&#10;    static class LessonProgressViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvLessonTitle, tvLessonType;&#10;&#10;        public LessonProgressViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            // Use standard Android layout IDs&#10;            tvLessonTitle = itemView.findViewById(android.R.id.text1);&#10;            tvLessonType = itemView.findViewById(android.R.id.text2);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/LoginActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/LoginActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Toast;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.app.AlertDialog;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;&#10;import com.google.firebase.auth.FirebaseAuthInvalidUserException;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class LoginActivity extends AppCompatActivity {&#10;&#10;    private EditText etEmail, etPassword;&#10;    private Button btnLogin;&#10;    private TextView tvRegister;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_login);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupClickListeners();&#10;&#10;        // Removed pre-fill test account for production use&#10;    }&#10;&#10;    private void initViews() {&#10;        etEmail = findViewById(R.id.et_email);&#10;        etPassword = findViewById(R.id.et_password);&#10;        btnLogin = findViewById(R.id.btn_login);&#10;        tvRegister = findViewById(R.id.tv_register);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnLogin.setOnClickListener(v -&gt; handleLogin());&#10;&#10;        tvRegister.setOnClickListener(v -&gt;&#10;            startActivity(new Intent(LoginActivity.this, RegisterActivity.class)));&#10;&#10;        // Long click to create test account&#10;        btnLogin.setOnLongClickListener(v -&gt; {&#10;            showCreateTestAccountDialog();&#10;            return true;&#10;        });&#10;    }&#10;&#10;    private void handleLogin() {&#10;        String email = etEmail.getText() != null ? etEmail.getText().toString().trim() : &quot;&quot;;&#10;        String password = etPassword.getText() != null ? etPassword.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (validateInput(email, password)) {&#10;            btnLogin.setEnabled(false);&#10;            btnLogin.setText(&quot;Đang đăng nhập...&quot;);&#10;&#10;            android.util.Log.d(&quot;LoginActivity&quot;, &quot;Attempting to login with email: &quot; + email);&#10;&#10;            mAuth.signInWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    android.util.Log.d(&quot;LoginActivity&quot;, &quot;Login task completed. Success: &quot; + task.isSuccessful());&#10;&#10;                    if (task.isSuccessful() &amp;&amp; mAuth.getCurrentUser() != null) {&#10;                        String userId = mAuth.getCurrentUser().getUid();&#10;                        android.util.Log.d(&quot;LoginActivity&quot;, &quot;Login successful for user: &quot; + userId);&#10;                        getUserRoleAndRedirect(userId);&#10;                    } else {&#10;                        handleLoginError(task.getException());&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;LoginActivity&quot;, &quot;Login failure&quot;, e);&#10;                    handleLoginError(e);&#10;                });&#10;        }&#10;    }&#10;&#10;    private void handleLoginError(Exception exception) {&#10;        btnLogin.setEnabled(true);&#10;        btnLogin.setText(&quot;Đăng nhập&quot;);&#10;&#10;        String errorMessage = &quot;Đăng nhập thất bại&quot;;&#10;&#10;        if (exception instanceof FirebaseAuthInvalidUserException) {&#10;            errorMessage = &quot;Tài khoản không tồn tại. Bạn có muốn tạo tài khoản này không?&quot;;&#10;            showCreateAccountDialog();&#10;            return;&#10;        } else if (exception instanceof FirebaseAuthInvalidCredentialsException) {&#10;            errorMessage = &quot;Email hoặc mật khẩu không đúng&quot;;&#10;        } else if (exception instanceof com.google.firebase.FirebaseNetworkException) {&#10;            // Xử lý lỗi mạng cụ thể&#10;            errorMessage = &quot;Lỗi kết nối mạng. Vui lòng kiểm tra kết nối Internet và thử lại.&quot;;&#10;            showNetworkErrorDialog();&#10;            return;&#10;        } else if (exception instanceof com.google.firebase.auth.FirebaseAuthException) {&#10;            // Xử lý các lỗi Firebase khác&#10;            errorMessage = &quot;Lỗi xác thực: &quot; + exception.getMessage();&#10;        } else if (exception != null) {&#10;            errorMessage = &quot;Lỗi đăng nhập: &quot; + exception.getMessage();&#10;        }&#10;&#10;        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    private void showCreateAccountDialog() {&#10;        String email = etEmail.getText().toString().trim();&#10;        String password = etPassword.getText().toString().trim();&#10;&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Tạo tài khoản&quot;)&#10;                .setMessage(&quot;Tài khoản &quot; + email + &quot; chưa tồn tại. Bạn có muốn tạo tài khoản này không?&quot;)&#10;                .setPositiveButton(&quot;Tạo tài khoản&quot;, (dialog, which) -&gt; {&#10;                    createAccount(email, password, &quot;student&quot;); // Default to student&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void showCreateTestAccountDialog() {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Tạo tài khoản test&quot;)&#10;                .setMessage(&quot;Chọn loại tài khoản test muốn tạo:&quot;)&#10;                .setPositiveButton(&quot;Học viên&quot;, (dialog, which) -&gt; {&#10;                    etEmail.setText(&quot;student@test.com&quot;);&#10;                    etPassword.setText(&quot;123456&quot;);&#10;                    createAccount(&quot;student@test.com&quot;, &quot;123456&quot;, &quot;student&quot;);&#10;                })&#10;                .setNeutralButton(&quot;Giáo viên&quot;, (dialog, which) -&gt; {&#10;                    etEmail.setText(&quot;teacher@test.com&quot;);&#10;                    etPassword.setText(&quot;123456&quot;);&#10;                    createAccount(&quot;teacher@test.com&quot;, &quot;123456&quot;, &quot;teacher&quot;);&#10;                })&#10;                .setNegativeButton(&quot;Admin&quot;, (dialog, which) -&gt; {&#10;                    etEmail.setText(&quot;admin@test.com&quot;);&#10;                    etPassword.setText(&quot;123456&quot;);&#10;                    createAccount(&quot;admin@test.com&quot;, &quot;123456&quot;, &quot;admin&quot;);&#10;                })&#10;                .show();&#10;    }&#10;&#10;    private void createAccount(String email, String password, String role) {&#10;        btnLogin.setEnabled(false);&#10;        btnLogin.setText(&quot;Đang tạo tài khoản...&quot;);&#10;&#10;        mAuth.createUserWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful() &amp;&amp; mAuth.getCurrentUser() != null) {&#10;                        String userId = mAuth.getCurrentUser().getUid();&#10;                        saveUserToFirestore(userId, email, role);&#10;                    } else {&#10;                        btnLogin.setEnabled(true);&#10;                        btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                        String error = task.getException() != null ? task.getException().getMessage() : &quot;Lỗi tạo tài khoản&quot;;&#10;                        Toast.makeText(this, &quot;Tạo tài khoản thất bại: &quot; + error, Toast.LENGTH_LONG).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void saveUserToFirestore(String userId, String email, String role) {&#10;        // Tạo đối tượng User với chỉ 5 trường dữ liệu theo yêu cầu: ID, address, email, fullName, role&#10;        Map&lt;String, Object&gt; userData = new HashMap&lt;&gt;();&#10;        userData.put(&quot;id&quot;, userId);&#10;        userData.put(&quot;email&quot;, email);&#10;        userData.put(&quot;fullName&quot;, getFullNameFromRole(role)); // Sử dụng fullName thay vì name&#10;        userData.put(&quot;address&quot;, &quot;&quot;); // Địa chỉ mặc định trống&#10;        userData.put(&quot;role&quot;, role);&#10;&#10;        // Không lưu createdAt, updatedAt để chỉ có đúng 5 trường theo yêu cầu&#10;&#10;        db.collection(&quot;users&quot;).document(userId)&#10;                .set(userData)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    Toast.makeText(this, &quot;Tạo tài khoản thành công! Đang đăng nhập...&quot;, Toast.LENGTH_SHORT).show();&#10;                    android.util.Log.d(&quot;LoginActivity&quot;, &quot;User saved with 5 fields: &quot; + userData.toString());&#10;                    redirectToRoleActivity(role);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    android.util.Log.e(&quot;LoginActivity&quot;, &quot;Error saving user to Firestore&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi lưu thông tin: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                });&#10;    }&#10;&#10;    private String getFullNameFromRole(String role) {&#10;        switch (role.toLowerCase()) {&#10;            case &quot;admin&quot;: return &quot;Quản trị viên&quot;;&#10;            case &quot;teacher&quot;: return &quot;Giáo viên&quot;;&#10;            case &quot;student&quot;: return &quot;Học viên&quot;;&#10;            default: return &quot;Người dùng&quot;;&#10;        }&#10;    }&#10;&#10;    private void getUserRoleAndRedirect(String userId) {&#10;        android.util.Log.d(&quot;LoginActivity&quot;, &quot;Getting user role for: &quot; + userId);&#10;&#10;        db.collection(&quot;users&quot;).document(userId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;&#10;                    if (documentSnapshot.exists()) {&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#10;                        android.util.Log.d(&quot;LoginActivity&quot;, &quot;User role found: &quot; + role);&#10;&#10;                        if (role != null) {&#10;                            redirectToRoleActivity(role);&#10;                        } else {&#10;                            android.util.Log.w(&quot;LoginActivity&quot;, &quot;User role is null, defaulting to student&quot;);&#10;                            redirectToRoleActivity(&quot;student&quot;);&#10;                        }&#10;                    } else {&#10;                        android.util.Log.w(&quot;LoginActivity&quot;, &quot;User document does not exist, creating default student profile&quot;);&#10;                        // Create user document if it doesn't exist&#10;                        saveUserToFirestore(userId, mAuth.getCurrentUser().getEmail(), &quot;student&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    android.util.Log.e(&quot;LoginActivity&quot;, &quot;Error getting user role&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi lấy thông tin người dùng: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                });&#10;    }&#10;&#10;    private void redirectToRoleActivity(String role) {&#10;        android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to activity for role: &quot; + role);&#10;&#10;        Intent intent;&#10;        switch (role.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                intent = new Intent(this, AdminDashboardActivity.class);&#10;                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to AdminDashboardActivity&quot;);&#10;                break;&#10;            case &quot;teacher&quot;:&#10;                intent = new Intent(this, TeacherDashboardActivity.class);&#10;                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to TeacherDashboardActivity&quot;);&#10;                break;&#10;            case &quot;student&quot;:&#10;            default:&#10;                intent = new Intent(this, StudentDashboardActivity.class);&#10;                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to StudentDashboardActivity&quot;);&#10;                break;&#10;        }&#10;&#10;        // Clear the activity stack so user can't go back to login&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    private boolean validateInput(String email, String password) {&#10;        if (TextUtils.isEmpty(email)) {&#10;            etEmail.setError(&quot;Vui lòng nhập email&quot;);&#10;            etEmail.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            etEmail.setError(&quot;Email không hợp lệ&quot;);&#10;            etEmail.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(password)) {&#10;            etPassword.setError(&quot;Vui lòng nhập mật khẩu&quot;);&#10;            etPassword.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        if (password.length() &lt; 6) {&#10;            etPassword.setError(&quot;Mật khẩu phải có ít nhất 6 ký tự&quot;);&#10;            etPassword.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showNetworkErrorDialog() {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Lỗi kết nối&quot;)&#10;                .setMessage(&quot;Không thể kết nối đến server. Vui lòng kiểm tra:\n\n&quot; +&#10;                           &quot;• Kết nối Internet\n&quot; +&#10;                           &quot;• Tắt VPN nếu đang sử dụng\n&quot; +&#10;                           &quot;• Thử chuyển từ WiFi sang 4G hoặc ngược lại&quot;)&#10;                .setPositiveButton(&quot;Thử lại&quot;, (dialog, which) -&gt; {&#10;                    // Retry login with current credentials&#10;                    handleLogin();&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .setNeutralButton(&quot;Cài đặt mạng&quot;, (dialog, which) -&gt; {&#10;                    // Mở cài đặt WiFi&#10;                    try {&#10;                        startActivity(new Intent(android.provider.Settings.ACTION_WIFI_SETTINGS));&#10;                    } catch (Exception e) {&#10;                        Toast.makeText(this, &quot;Không thể mở cài đặt&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                })&#10;                .show();&#10;    }&#10;&#10;    private void retryFirebaseConnection() {&#10;        // Reset Firebase Auth instance&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        // Clear any cached auth state&#10;        if (mAuth.getCurrentUser() != null) {&#10;            mAuth.signOut();&#10;        }&#10;&#10;        Toast.makeText(this, &quot;Đã reset kết nối Firebase, vui lòng thử lại&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reset button state khi quay lại activity&#10;        btnLogin.setEnabled(true);&#10;        btnLogin.setText(&quot;Đăng nhập&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Toast;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.app.AlertDialog;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;&#10;import com.google.firebase.auth.FirebaseAuthInvalidUserException;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class LoginActivity extends AppCompatActivity {&#10;&#10;    private EditText etEmail, etPassword;&#10;    private Button btnLogin;&#10;    private TextView tvRegister;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_login);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupClickListeners();&#10;&#10;        // Removed pre-fill test account for production use&#10;    }&#10;&#10;    private void initViews() {&#10;        etEmail = findViewById(R.id.et_email);&#10;        etPassword = findViewById(R.id.et_password);&#10;        btnLogin = findViewById(R.id.btn_login);&#10;        tvRegister = findViewById(R.id.tv_register);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnLogin.setOnClickListener(v -&gt; handleLogin());&#10;&#10;        tvRegister.setOnClickListener(v -&gt;&#10;            startActivity(new Intent(LoginActivity.this, RegisterActivity.class)));&#10;&#10;        // Long click to create test account&#10;        btnLogin.setOnLongClickListener(v -&gt; {&#10;            showCreateTestAccountDialog();&#10;            return true;&#10;        });&#10;    }&#10;&#10;    private void handleLogin() {&#10;        String email = etEmail.getText() != null ? etEmail.getText().toString().trim() : &quot;&quot;;&#10;        String password = etPassword.getText() != null ? etPassword.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (validateInput(email, password)) {&#10;            btnLogin.setEnabled(false);&#10;            btnLogin.setText(&quot;Đang đăng nhập...&quot;);&#10;&#10;            android.util.Log.d(&quot;LoginActivity&quot;, &quot;Attempting to login with email: &quot; + email);&#10;&#10;            // Thêm timeout để tránh hang quá lâu&#10;            mAuth.signInWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(this, task -&gt; {&#10;                    android.util.Log.d(&quot;LoginActivity&quot;, &quot;Login task completed. Success: &quot; + task.isSuccessful());&#10;&#10;                    if (task.isSuccessful() &amp;&amp; mAuth.getCurrentUser() != null) {&#10;                        String userId = mAuth.getCurrentUser().getUid();&#10;                        android.util.Log.d(&quot;LoginActivity&quot;, &quot;Login successful for user: &quot; + userId);&#10;                        getUserRoleAndRedirect(userId);&#10;                    } else {&#10;                        handleLoginError(task.getException());&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;LoginActivity&quot;, &quot;Login failure&quot;, e);&#10;                    handleLoginError(e);&#10;                });&#10;&#10;            // Thêm timeout fallback (15 giây)&#10;            new android.os.Handler().postDelayed(() -&gt; {&#10;                if (!btnLogin.isEnabled()) {&#10;                    // Nếu sau 15 giây vẫn đang loading&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    Toast.makeText(this, &quot;Timeout: Kết nối quá chậm, vui lòng thử lại&quot;, Toast.LENGTH_LONG).show();&#10;                }&#10;            }, 15000);&#10;        }&#10;    }&#10;&#10;    private void handleLoginError(Exception exception) {&#10;        btnLogin.setEnabled(true);&#10;        btnLogin.setText(&quot;Đăng nhập&quot;);&#10;&#10;        String errorMessage = &quot;Đăng nhập thất bại&quot;;&#10;&#10;        if (exception instanceof FirebaseAuthInvalidUserException) {&#10;            errorMessage = &quot;Tài khoản không tồn tại. Bạn có muốn tạo tài khoản này không?&quot;;&#10;            showCreateAccountDialog();&#10;            return;&#10;        } else if (exception instanceof FirebaseAuthInvalidCredentialsException) {&#10;            errorMessage = &quot;Email hoặc mật khẩu không đúng&quot;;&#10;        } else if (exception instanceof com.google.firebase.FirebaseNetworkException) {&#10;            // Xử lý lỗi mạng cụ thể&#10;            errorMessage = &quot;Lỗi kết nối mạng. Vui lòng kiểm tra kết nối Internet và thử lại.&quot;;&#10;            showNetworkErrorDialog();&#10;            return;&#10;        } else if (exception instanceof com.google.firebase.auth.FirebaseAuthException) {&#10;            // Xử lý các lỗi Firebase khác&#10;            errorMessage = &quot;Lỗi xác thực: &quot; + exception.getMessage();&#10;        } else if (exception != null) {&#10;            errorMessage = &quot;Lỗi đăng nhập: &quot; + exception.getMessage();&#10;        }&#10;&#10;        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    private void showCreateAccountDialog() {&#10;        String email = etEmail.getText().toString().trim();&#10;        String password = etPassword.getText().toString().trim();&#10;&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Tạo tài khoản&quot;)&#10;                .setMessage(&quot;Tài khoản &quot; + email + &quot; chưa tồn tại. Bạn có muốn tạo tài khoản này không?&quot;)&#10;                .setPositiveButton(&quot;Tạo tài khoản&quot;, (dialog, which) -&gt; {&#10;                    createAccount(email, password, &quot;student&quot;); // Default to student&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void showCreateTestAccountDialog() {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Tạo tài khoản test&quot;)&#10;                .setMessage(&quot;Chọn loại tài khoản test muốn tạo:&quot;)&#10;                .setPositiveButton(&quot;Học viên&quot;, (dialog, which) -&gt; {&#10;                    etEmail.setText(&quot;student@test.com&quot;);&#10;                    etPassword.setText(&quot;123456&quot;);&#10;                    createAccount(&quot;student@test.com&quot;, &quot;123456&quot;, &quot;student&quot;);&#10;                })&#10;                .setNeutralButton(&quot;Giáo viên&quot;, (dialog, which) -&gt; {&#10;                    etEmail.setText(&quot;teacher@test.com&quot;);&#10;                    etPassword.setText(&quot;123456&quot;);&#10;                    createAccount(&quot;teacher@test.com&quot;, &quot;123456&quot;, &quot;teacher&quot;);&#10;                })&#10;                .setNegativeButton(&quot;Admin&quot;, (dialog, which) -&gt; {&#10;                    etEmail.setText(&quot;admin@test.com&quot;);&#10;                    etPassword.setText(&quot;123456&quot;);&#10;                    createAccount(&quot;admin@test.com&quot;, &quot;123456&quot;, &quot;admin&quot;);&#10;                })&#10;                .show();&#10;    }&#10;&#10;    private void createAccount(String email, String password, String role) {&#10;        btnLogin.setEnabled(false);&#10;        btnLogin.setText(&quot;Đang tạo tài khoản...&quot;);&#10;&#10;        mAuth.createUserWithEmailAndPassword(email, password)&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful() &amp;&amp; mAuth.getCurrentUser() != null) {&#10;                        String userId = mAuth.getCurrentUser().getUid();&#10;                        saveUserToFirestore(userId, email, role);&#10;                    } else {&#10;                        btnLogin.setEnabled(true);&#10;                        btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                        String error = task.getException() != null ? task.getException().getMessage() : &quot;Lỗi tạo tài khoản&quot;;&#10;                        Toast.makeText(this, &quot;Tạo tài khoản thất bại: &quot; + error, Toast.LENGTH_LONG).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void saveUserToFirestore(String userId, String email, String role) {&#10;        // Tạo đối tượng User với chỉ 5 trường dữ liệu theo yêu cầu: ID, address, email, fullName, role&#10;        Map&lt;String, Object&gt; userData = new HashMap&lt;&gt;();&#10;        userData.put(&quot;id&quot;, userId);&#10;        userData.put(&quot;email&quot;, email);&#10;        userData.put(&quot;fullName&quot;, getFullNameFromRole(role)); // Sử dụng fullName thay vì name&#10;        userData.put(&quot;address&quot;, &quot;&quot;); // Địa chỉ mặc định trống&#10;        userData.put(&quot;role&quot;, role);&#10;&#10;        // Không lưu createdAt, updatedAt để chỉ có đúng 5 trường theo yêu cầu&#10;&#10;        db.collection(&quot;users&quot;).document(userId)&#10;                .set(userData)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    Toast.makeText(this, &quot;Tạo tài khoản thành công! Đang đăng nhập...&quot;, Toast.LENGTH_SHORT).show();&#10;                    android.util.Log.d(&quot;LoginActivity&quot;, &quot;User saved with 5 fields: &quot; + userData.toString());&#10;                    redirectToRoleActivity(role);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    android.util.Log.e(&quot;LoginActivity&quot;, &quot;Error saving user to Firestore&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi lưu thông tin: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                });&#10;    }&#10;&#10;    private String getFullNameFromRole(String role) {&#10;        switch (role.toLowerCase()) {&#10;            case &quot;admin&quot;: return &quot;Quản trị viên&quot;;&#10;            case &quot;teacher&quot;: return &quot;Giáo viên&quot;;&#10;            case &quot;student&quot;: return &quot;Học viên&quot;;&#10;            default: return &quot;Người dùng&quot;;&#10;        }&#10;    }&#10;&#10;    private void getUserRoleAndRedirect(String userId) {&#10;        android.util.Log.d(&quot;LoginActivity&quot;, &quot;Getting user role for: &quot; + userId);&#10;&#10;        db.collection(&quot;users&quot;).document(userId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;&#10;                    if (documentSnapshot.exists()) {&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#10;                        android.util.Log.d(&quot;LoginActivity&quot;, &quot;User role found: &quot; + role);&#10;&#10;                        if (role != null) {&#10;                            redirectToRoleActivity(role);&#10;                        } else {&#10;                            android.util.Log.w(&quot;LoginActivity&quot;, &quot;User role is null, defaulting to student&quot;);&#10;                            redirectToRoleActivity(&quot;student&quot;);&#10;                        }&#10;                    } else {&#10;                        android.util.Log.w(&quot;LoginActivity&quot;, &quot;User document does not exist, creating default student profile&quot;);&#10;                        // Create user document if it doesn't exist&#10;                        saveUserToFirestore(userId, mAuth.getCurrentUser().getEmail(), &quot;student&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    btnLogin.setEnabled(true);&#10;                    btnLogin.setText(&quot;Đăng nhập&quot;);&#10;                    android.util.Log.e(&quot;LoginActivity&quot;, &quot;Error getting user role&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi lấy thông tin người dùng: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                });&#10;    }&#10;&#10;    private void redirectToRoleActivity(String role) {&#10;        android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to activity for role: &quot; + role);&#10;&#10;        Intent intent;&#10;        switch (role.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                intent = new Intent(this, AdminDashboardActivity.class);&#10;                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to AdminDashboardActivity&quot;);&#10;                break;&#10;            case &quot;teacher&quot;:&#10;                intent = new Intent(this, TeacherDashboardActivity.class);&#10;                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to TeacherDashboardActivity&quot;);&#10;                break;&#10;            case &quot;student&quot;:&#10;            default:&#10;                intent = new Intent(this, StudentDashboardActivity.class);&#10;                android.util.Log.d(&quot;LoginActivity&quot;, &quot;Redirecting to StudentDashboardActivity&quot;);&#10;                break;&#10;        }&#10;&#10;        // Clear the activity stack so user can't go back to login&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    private boolean validateInput(String email, String password) {&#10;        if (TextUtils.isEmpty(email)) {&#10;            etEmail.setError(&quot;Vui lòng nhập email&quot;);&#10;            etEmail.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        if (!android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {&#10;            etEmail.setError(&quot;Email không hợp lệ&quot;);&#10;            etEmail.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(password)) {&#10;            etPassword.setError(&quot;Vui lòng nhập mật khẩu&quot;);&#10;            etPassword.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        if (password.length() &lt; 6) {&#10;            etPassword.setError(&quot;Mật khẩu phải có ít nhất 6 ký tự&quot;);&#10;            etPassword.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void showNetworkErrorDialog() {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Lỗi kết nối&quot;)&#10;                .setMessage(&quot;Không thể kết nối đến server. Vui lòng kiểm tra:\n\n&quot; +&#10;                           &quot;• Kết nối Internet\n&quot; +&#10;                           &quot;• Tắt VPN nếu đang sử dụng\n&quot; +&#10;                           &quot;• Thử chuyển từ WiFi sang 4G hoặc ngược lại&quot;)&#10;                .setPositiveButton(&quot;Thử lại&quot;, (dialog, which) -&gt; {&#10;                    // Retry login with current credentials&#10;                    handleLogin();&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .setNeutralButton(&quot;Cài đặt mạng&quot;, (dialog, which) -&gt; {&#10;                    // Mở cài đặt WiFi&#10;                    try {&#10;                        startActivity(new Intent(android.provider.Settings.ACTION_WIFI_SETTINGS));&#10;                    } catch (Exception e) {&#10;                        Toast.makeText(this, &quot;Không thể mở cài đặt&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                })&#10;                .show();&#10;    }&#10;&#10;    private void retryFirebaseConnection() {&#10;        // Reset Firebase Auth instance&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        // Clear any cached auth state&#10;        if (mAuth.getCurrentUser() != null) {&#10;            mAuth.signOut();&#10;        }&#10;&#10;        Toast.makeText(this, &quot;Đã reset kết nối Firebase, vui lòng thử lại&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reset button state khi quay lại activity&#10;        btnLogin.setEnabled(true);&#10;        btnLogin.setText(&quot;Đăng nhập&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentMyCoursesActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentMyCoursesActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class StudentMyCoursesActivity extends AppCompatActivity implements StudentEnrolledCourseAdapter.OnCourseClickListener {&#10;&#10;    private RecyclerView rvMyCourses;&#10;    private LinearLayout layoutNoCourses;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;EnrolledCourse&gt; enrolledCourseList;&#10;    private StudentEnrolledCourseAdapter courseAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_my_courses);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        enrolledCourseList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        getCurrentStudentId();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvMyCourses = findViewById(R.id.rv_my_courses);&#10;        layoutNoCourses = findViewById(R.id.layout_no_courses);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Khóa học của tôi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        courseAdapter = new StudentEnrolledCourseAdapter(enrolledCourseList, this);&#10;        rvMyCourses.setLayoutManager(new LinearLayoutManager(this));&#10;        rvMyCourses.setAdapter(courseAdapter);&#10;    }&#10;&#10;    private void getCurrentStudentId() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;        &#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String userRole = documentSnapshot.getString(&quot;role&quot;);&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;&#10;                        if (!&quot;student&quot;.equals(userRole)) {&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem khóa học của mình&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentStudentId != null) {&#10;                            loadEnrolledCourses();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadEnrolledCourses() {&#10;        layoutNoCourses.setVisibility(View.VISIBLE);&#10;        rvMyCourses.setVisibility(View.GONE);&#10;&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loading enrolled courses for student: &quot; + currentStudentId);&#10;&#10;        // Load approved enrollments từ collection &quot;enrollments&quot;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    enrolledCourseList.clear();&#10;&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; enrollments&quot;);&#10;&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    // Với mỗi enrollment, load thông tin course tương ứng&#10;                    for (QueryDocumentSnapshot enrollmentDoc : queryDocumentSnapshots) {&#10;                        String courseId = enrollmentDoc.getString(&quot;courseId&quot;);&#10;                        String courseName = enrollmentDoc.getString(&quot;courseName&quot;);&#10;                        String enrollmentDate = enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;) != null ?&#10;                            enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;).toDate().toString() : &quot;&quot;;&#10;&#10;                        if (courseId != null) {&#10;                            loadCourseDetails(courseId, courseName, enrollmentDate, enrollmentDoc.getId());&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading enrollments&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadCourseDetails(String courseId, String courseName, String enrollmentDate, String enrollmentId) {&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;                .get()&#10;                .addOnSuccessListener(courseDoc -&gt; {&#10;                    if (courseDoc.exists()) {&#10;                        Course course = courseDoc.toObject(Course.class);&#10;                        if (course != null) {&#10;                            course.setId(courseDoc.getId());&#10;&#10;                            // Tạo EnrolledCourse object&#10;                            EnrolledCourse enrolledCourse = new EnrolledCourse();&#10;                            enrolledCourse.setCourse(course);&#10;                            enrolledCourse.setEnrollmentId(enrollmentId);&#10;                            enrolledCourse.setEnrollmentDate(enrollmentDate);&#10;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&#10;                            enrolledCourse.setProgress(0); //&#10;=======&#10;                            enrolledCourse.setProgress(0); // TODO: Calculate actual progress&#10;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 542cd6292b68990ee1f3d7aca232549a251d4232&#10;&#10;                            enrolledCourseList.add(enrolledCourse);&#10;&#10;                            // Update UI&#10;                            updateUI();&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading course details for: &quot; + courseId, e);&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (enrolledCourseList.isEmpty()) {&#10;            showEmptyState();&#10;        } else {&#10;            layoutNoCourses.setVisibility(View.GONE);&#10;            rvMyCourses.setVisibility(View.VISIBLE);&#10;            courseAdapter.notifyDataSetChanged();&#10;&#10;            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Showing &quot; + enrolledCourseList.size() + &quot; enrolled courses&quot;);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        layoutNoCourses.setVisibility(View.VISIBLE);&#10;        rvMyCourses.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void onCourseClick(EnrolledCourse enrolledCourse) {&#10;        // Navigate to course learning activity&#10;        Intent intent = new Intent(this, StudentCourseDetailActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;courseTitle&quot;, enrolledCourse.getCourse().getTitle());&#10;        intent.putExtra(&quot;courseCategory&quot;, enrolledCourse.getCourse().getCategory());&#10;        intent.putExtra(&quot;enrollmentId&quot;, enrolledCourse.getEnrollmentId());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onContinueLearning(EnrolledCourse enrolledCourse) {&#10;        // Navigate to lessons list&#10;        Intent intent = new Intent(this, StudentCourseLessonsActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;courseTitle&quot;, enrolledCourse.getCourse().getTitle());&#10;        intent.putExtra(&quot;courseCategory&quot;, enrolledCourse.getCourse().getCategory());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onViewProgress(EnrolledCourse enrolledCourse) {&#10;        // Navigate to progress view&#10;        Intent intent = new Intent(this, StudentProgressDetailActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;courseTitle&quot;, enrolledCourse.getCourse().getTitle());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        if (currentStudentId != null) {&#10;            loadEnrolledCourses(); // Reload when returning to this activity&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class StudentMyCoursesActivity extends AppCompatActivity implements StudentEnrolledCourseAdapter.OnCourseClickListener {&#10;&#10;    private RecyclerView rvMyCourses;&#10;    private LinearLayout layoutNoCourses;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;EnrolledCourse&gt; enrolledCourseList;&#10;    private StudentEnrolledCourseAdapter courseAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_my_courses);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        enrolledCourseList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        getCurrentStudentId();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvMyCourses = findViewById(R.id.rv_my_courses);&#10;        layoutNoCourses = findViewById(R.id.layout_no_courses);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Khóa học của tôi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        courseAdapter = new StudentEnrolledCourseAdapter(enrolledCourseList, this);&#10;        rvMyCourses.setLayoutManager(new LinearLayoutManager(this));&#10;        rvMyCourses.setAdapter(courseAdapter);&#10;    }&#10;&#10;    private void getCurrentStudentId() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;        &#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String userRole = documentSnapshot.getString(&quot;role&quot;);&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;&#10;                        if (!&quot;student&quot;.equals(userRole)) {&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem khóa học của mình&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentStudentId != null) {&#10;                            loadEnrolledCourses();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadEnrolledCourses() {&#10;        layoutNoCourses.setVisibility(View.VISIBLE);&#10;        rvMyCourses.setVisibility(View.GONE);&#10;&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loading enrolled courses for student: &quot; + currentStudentId);&#10;&#10;        // Load approved enrollments từ collection &quot;enrollments&quot;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    enrolledCourseList.clear();&#10;&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; enrollments&quot;);&#10;&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    // Với mỗi enrollment, load thông tin course tương ứng&#10;                    for (QueryDocumentSnapshot enrollmentDoc : queryDocumentSnapshots) {&#10;                        String courseId = enrollmentDoc.getString(&quot;courseId&quot;);&#10;                        String courseName = enrollmentDoc.getString(&quot;courseName&quot;);&#10;                        String enrollmentDate = enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;) != null ?&#10;                            enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;).toDate().toString() : &quot;&quot;;&#10;&#10;                        if (courseId != null) {&#10;                            loadCourseDetails(courseId, courseName, enrollmentDate, enrollmentDoc.getId());&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading enrollments&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadCourseDetails(String courseId, String courseName, String enrollmentDate, String enrollmentId) {&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;                .get()&#10;                .addOnSuccessListener(courseDoc -&gt; {&#10;                    if (courseDoc.exists()) {&#10;                        Course course = courseDoc.toObject(Course.class);&#10;                        if (course != null) {&#10;                            course.setId(courseDoc.getId());&#10;&#10;                            // Tạo EnrolledCourse object&#10;                            EnrolledCourse enrolledCourse = new EnrolledCourse();&#10;                            enrolledCourse.setCourse(course);&#10;                            enrolledCourse.setEnrollmentId(enrollmentId);&#10;                            enrolledCourse.setEnrollmentDate(enrollmentDate);&#10;                            enrolledCourse.setProgress(0); // TODO: Calculate actual progress&#10;&#10;                            enrolledCourseList.add(enrolledCourse);&#10;&#10;                            // Update UI&#10;                            updateUI();&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading course details for: &quot; + courseId, e);&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (enrolledCourseList.isEmpty()) {&#10;            showEmptyState();&#10;        } else {&#10;            layoutNoCourses.setVisibility(View.GONE);&#10;            rvMyCourses.setVisibility(View.VISIBLE);&#10;            courseAdapter.notifyDataSetChanged();&#10;&#10;            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Showing &quot; + enrolledCourseList.size() + &quot; enrolled courses&quot;);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        layoutNoCourses.setVisibility(View.VISIBLE);&#10;        rvMyCourses.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void onCourseClick(EnrolledCourse enrolledCourse) {&#10;        // Navigate to course learning activity&#10;        Intent intent = new Intent(this, StudentCourseDetailActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;courseTitle&quot;, enrolledCourse.getCourse().getTitle());&#10;        intent.putExtra(&quot;courseCategory&quot;, enrolledCourse.getCourse().getCategory());&#10;        intent.putExtra(&quot;enrollmentId&quot;, enrolledCourse.getEnrollmentId());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onContinueLearning(EnrolledCourse enrolledCourse) {&#10;        // Navigate to lessons list&#10;        Intent intent = new Intent(this, StudentCourseLessonsActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;courseTitle&quot;, enrolledCourse.getCourse().getTitle());&#10;        intent.putExtra(&quot;courseCategory&quot;, enrolledCourse.getCourse().getCategory());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onViewProgress(EnrolledCourse enrolledCourse) {&#10;        // Navigate to progress view&#10;        Intent intent = new Intent(this, StudentProgressDetailActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;courseTitle&quot;, enrolledCourse.getCourse().getTitle());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        if (currentStudentId != null) {&#10;            loadEnrolledCourses(); // Reload when returning to this activity&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentProgressDetailActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentProgressDetailActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentProgressDetailActivity extends AppCompatActivity {&#10;&#10;    private TextView tvCourseTitle, tvProgressSummary;&#10;    private RecyclerView rvLessonProgress;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId, courseTitle;&#10;    private List&lt;LessonProgressItem&gt; lessonProgressList;&#10;    private LessonProgressAdapter progressAdapter;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Use simple layout since we don't have custom layout&#10;        setContentView(android.R.layout.activity_list_item);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupRecyclerView();&#10;        loadProgressData();&#10;    }&#10;&#10;    private void initViews() {&#10;        // Use existing views from the layout that already exists&#10;        try {&#10;            toolbar = findViewById(R.id.toolbar);&#10;            if (toolbar != null) {&#10;                setSupportActionBar(toolbar);&#10;                if (getSupportActionBar() != null) {&#10;                    getSupportActionBar().setTitle(&quot;Chi tiết tiến độ học tập&quot;);&#10;                    getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            // If toolbar doesn't exist, set title directly&#10;            setTitle(&quot;Chi tiết tiến độ học tập&quot;);&#10;        }&#10;&#10;        // Try to find existing views, if not found, show Toast messages instead&#10;        try {&#10;            tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        } catch (Exception e) {&#10;            android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Course title view not found&quot;);&#10;        }&#10;&#10;        try {&#10;            rvLessonProgress = findViewById(R.id.rv_lesson_progress);&#10;        } catch (Exception e) {&#10;            // Try to find any RecyclerView or ListView&#10;            rvLessonProgress = findViewById(android.R.id.list);&#10;        }&#10;&#10;        // Create a simple TextView for progress summary if needed&#10;        if (tvCourseTitle == null) {&#10;            tvProgressSummary = new TextView(this);&#10;            tvProgressSummary.setPadding(16, 16, 16, 16);&#10;            tvProgressSummary.setTextSize(16);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        if (rvLessonProgress != null) {&#10;            lessonProgressList = new ArrayList&lt;&gt;();&#10;            progressAdapter = new LessonProgressAdapter(lessonProgressList);&#10;            rvLessonProgress.setLayoutManager(new LinearLayoutManager(this));&#10;            rvLessonProgress.setAdapter(progressAdapter);&#10;        }&#10;    }&#10;&#10;    private void loadProgressData() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        if (tvCourseTitle != null) {&#10;            tvCourseTitle.setText(courseTitle);&#10;        }&#10;&#10;        // Load all lessons for this course&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;isPublished&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    List&lt;Lesson&gt; allLessons = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        Lesson lesson = document.toObject(Lesson.class);&#10;                        lesson.setId(document.getId());&#10;                        allLessons.add(lesson);&#10;                    }&#10;&#10;                    if (allLessons.isEmpty()) {&#10;                        String message = &quot;Khóa học này chưa có bài học nào&quot;;&#10;                        if (tvProgressSummary != null) {&#10;                            tvProgressSummary.setText(message);&#10;                        } else {&#10;                            Toast.makeText(this, message, Toast.LENGTH_LONG).show();&#10;                        }&#10;                        return;&#10;                    }&#10;&#10;                    // Load progress for each lesson&#10;                    loadLessonProgress(studentId, allLessons);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lessons&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải danh sách bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadLessonProgress(String studentId, List&lt;Lesson&gt; allLessons) {&#10;        // Load all progress records for this student and course&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;isCompleted&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    // Create a map of completed lesson IDs&#10;                    Map&lt;String, Boolean&gt; completedLessons = new HashMap&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        String lessonId = document.getString(&quot;lessonId&quot;);&#10;                        if (lessonId != null) {&#10;                            completedLessons.put(lessonId, true);&#10;                        }&#10;                    }&#10;&#10;                    // Create progress items for all lessons&#10;                    if (lessonProgressList != null) {&#10;                        lessonProgressList.clear();&#10;                    } else {&#10;                        lessonProgressList = new ArrayList&lt;&gt;();&#10;                    }&#10;&#10;                    int completedCount = 0;&#10;&#10;                    for (Lesson lesson : allLessons) {&#10;                        boolean isCompleted = completedLessons.containsKey(lesson.getId());&#10;                        if (isCompleted) {&#10;                            completedCount++;&#10;                        }&#10;&#10;                        LessonProgressItem progressItem = new LessonProgressItem(&#10;                                lesson.getId(),&#10;                                lesson.getTitle(),&#10;                                lesson.getTypeDisplayName(),&#10;                                isCompleted&#10;                        );&#10;                        lessonProgressList.add(progressItem);&#10;                    }&#10;&#10;                    // Update UI&#10;                    int totalLessons = allLessons.size();&#10;                    int progressPercentage = totalLessons &gt; 0 ? (completedCount * 100) / totalLessons : 0;&#10;&#10;                    String progressText = &quot;Bạn đã hoàn thành &quot; + completedCount + &quot; trong tổng số &quot; + totalLessons + &quot; bài học&quot;;&#10;                    String completionText = progressPercentage + &quot;% hoàn thành (&quot; + completedCount + &quot;/&quot; + totalLessons + &quot;)&quot;;&#10;&#10;                    if (tvProgressSummary != null) {&#10;                        tvProgressSummary.setText(progressText + &quot;\n&quot; + completionText);&#10;                    }&#10;&#10;                    // Show progress as Toast if no UI elements available&#10;                    Toast.makeText(this, completionText, Toast.LENGTH_LONG).show();&#10;&#10;                    if (progressAdapter != null) {&#10;                        progressAdapter.notifyDataSetChanged();&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Progress loaded: &quot; + completedCount + &quot;/&quot; + totalLessons);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lesson progress&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải tiến độ học tập: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // Inner class for lesson progress item&#10;    public static class LessonProgressItem {&#10;        private String lessonId;&#10;        private String lessonTitle;&#10;        private String lessonType;&#10;        private boolean isCompleted;&#10;&#10;        public LessonProgressItem(String lessonId, String lessonTitle, String lessonType, boolean isCompleted) {&#10;            this.lessonId = lessonId;&#10;            this.lessonTitle = lessonTitle;&#10;            this.lessonType = lessonType;&#10;            this.isCompleted = isCompleted;&#10;        }&#10;&#10;        // Getters&#10;        public String getLessonId() { return lessonId; }&#10;        public String getLessonTitle() { return lessonTitle; }&#10;        public String getLessonType() { return lessonType; }&#10;        public boolean isCompleted() { return isCompleted; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentProgressDetailActivity extends AppCompatActivity {&#10;&#10;    private TextView tvCourseTitle, tvProgressSummary;&#10;    private RecyclerView rvLessonProgress;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId, courseTitle;&#10;    private List&lt;LessonProgressItem&gt; lessonProgressList;&#10;    private LessonProgressAdapter progressAdapter;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Use simple layout since we don't have custom layout&#10;        setContentView(android.R.layout.activity_list_item);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupRecyclerView();&#10;        loadProgressData();&#10;    }&#10;&#10;    private void initViews() {&#10;        // Set title directly since we may not have custom toolbar&#10;        setTitle(&quot;Chi tiết tiến độ học tập&quot;);&#10;        &#10;        // Don't try to find custom views that don't exist&#10;        // We'll display progress information via Toast messages instead&#10;        tvCourseTitle = null;&#10;        tvProgressSummary = null;&#10;        rvLessonProgress = null;&#10;        &#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Using simplified UI without custom layouts&quot;);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        if (rvLessonProgress != null) {&#10;            lessonProgressList = new ArrayList&lt;&gt;();&#10;            progressAdapter = new LessonProgressAdapter(lessonProgressList);&#10;            rvLessonProgress.setLayoutManager(new LinearLayoutManager(this));&#10;            rvLessonProgress.setAdapter(progressAdapter);&#10;        }&#10;    }&#10;&#10;    private void loadProgressData() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        if (tvCourseTitle != null) {&#10;            tvCourseTitle.setText(courseTitle);&#10;        }&#10;&#10;        // Load all lessons for this course&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;isPublished&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    List&lt;Lesson&gt; allLessons = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        Lesson lesson = document.toObject(Lesson.class);&#10;                        lesson.setId(document.getId());&#10;                        allLessons.add(lesson);&#10;                    }&#10;&#10;                    if (allLessons.isEmpty()) {&#10;                        String message = &quot;Khóa học này chưa có bài học nào&quot;;&#10;                        if (tvProgressSummary != null) {&#10;                            tvProgressSummary.setText(message);&#10;                        } else {&#10;                            Toast.makeText(this, message, Toast.LENGTH_LONG).show();&#10;                        }&#10;                        return;&#10;                    }&#10;&#10;                    // Load progress for each lesson&#10;                    loadLessonProgress(studentId, allLessons);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lessons&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải danh sách bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadLessonProgress(String studentId, List&lt;Lesson&gt; allLessons) {&#10;        // Load all progress records for this student and course&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;isCompleted&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    // Create a map of completed lesson IDs&#10;                    Map&lt;String, Boolean&gt; completedLessons = new HashMap&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        String lessonId = document.getString(&quot;lessonId&quot;);&#10;                        if (lessonId != null) {&#10;                            completedLessons.put(lessonId, true);&#10;                        }&#10;                    }&#10;&#10;                    // Create progress items for all lessons&#10;                    if (lessonProgressList != null) {&#10;                        lessonProgressList.clear();&#10;                    } else {&#10;                        lessonProgressList = new ArrayList&lt;&gt;();&#10;                    }&#10;&#10;                    int completedCount = 0;&#10;&#10;                    for (Lesson lesson : allLessons) {&#10;                        boolean isCompleted = completedLessons.containsKey(lesson.getId());&#10;                        if (isCompleted) {&#10;                            completedCount++;&#10;                        }&#10;&#10;                        LessonProgressItem progressItem = new LessonProgressItem(&#10;                                lesson.getId(),&#10;                                lesson.getTitle(),&#10;                                lesson.getTypeDisplayName(),&#10;                                isCompleted&#10;                        );&#10;                        lessonProgressList.add(progressItem);&#10;                    }&#10;&#10;                    // Update UI&#10;                    int totalLessons = allLessons.size();&#10;                    int progressPercentage = totalLessons &gt; 0 ? (completedCount * 100) / totalLessons : 0;&#10;&#10;                    String progressText = &quot;Bạn đã hoàn thành &quot; + completedCount + &quot; trong tổng số &quot; + totalLessons + &quot; bài học&quot;;&#10;                    String completionText = progressPercentage + &quot;% hoàn thành (&quot; + completedCount + &quot;/&quot; + totalLessons + &quot;)&quot;;&#10;&#10;                    if (tvProgressSummary != null) {&#10;                        tvProgressSummary.setText(progressText + &quot;\n&quot; + completionText);&#10;                    }&#10;&#10;                    // Show progress as Toast if no UI elements available&#10;                    Toast.makeText(this, completionText, Toast.LENGTH_LONG).show();&#10;&#10;                    if (progressAdapter != null) {&#10;                        progressAdapter.notifyDataSetChanged();&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Progress loaded: &quot; + completedCount + &quot;/&quot; + totalLessons);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lesson progress&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải tiến độ học tập: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // Inner class for lesson progress item&#10;    public static class LessonProgressItem {&#10;        private String lessonId;&#10;        private String lessonTitle;&#10;        private String lessonType;&#10;        private boolean isCompleted;&#10;&#10;        public LessonProgressItem(String lessonId, String lessonTitle, String lessonType, boolean isCompleted) {&#10;            this.lessonId = lessonId;&#10;            this.lessonTitle = lessonTitle;&#10;            this.lessonType = lessonType;&#10;            this.isCompleted = isCompleted;&#10;        }&#10;&#10;        // Getters&#10;        public String getLessonId() { return lessonId; }&#10;        public String getLessonTitle() { return lessonTitle; }&#10;        public String getLessonType() { return lessonType; }&#10;        public boolean isCompleted() { return isCompleted; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherDashboardActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherDashboardActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.utils.RealtimeManager;&#10;&#10;public class TeacherDashboardActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TextView tvWelcome, tvCoursesCount, tvStudentsCount, tvPendingRequestsCount;&#10;    private Button btnManageCourses, btnViewRequests, btnCreateQuiz, btnCreateCourse;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private RealtimeManager realtimeManager;&#10;    private String currentTeacherId; // Đổi từ currentTeacherName sang currentTeacherId&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_teacher_dashboard);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        loadDashboardData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvWelcome = findViewById(R.id.tv_welcome);&#10;        tvCoursesCount = findViewById(R.id.tv_courses_count);&#10;        tvStudentsCount = findViewById(R.id.tv_students_count);&#10;        tvPendingRequestsCount = findViewById(R.id.tv_pending_requests_count);&#10;&#10;        btnManageCourses = findViewById(R.id.btn_manage_courses);&#10;        btnViewRequests = findViewById(R.id.btn_view_requests);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnCreateCourse = findViewById(R.id.btn_create_course);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bảng điều khiển giáo viên&quot;);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        realtimeManager = RealtimeManager.getInstance();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnManageCourses.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseManagementActivity.class));&#10;        });&#10;&#10;        // Thêm click listener cho nút &quot;View Requests&quot;&#10;        btnViewRequests.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseRequestManagementActivity.class));&#10;        });&#10;&#10;        btnCreateQuiz.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, SelectCourseForQuizActivity.class));&#10;        });&#10;&#10;        // Nút &quot;Quản lý đăng ký&quot; - chuyển đến EnrollmentManagementActivity&#10;        btnCreateCourse.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, EnrollmentManagementActivity.class);&#10;            // Truyền teacherId để activity có thể lọc dữ liệu theo giáo viên&#10;            intent.putExtra(&quot;teacherId&quot;, currentTeacherId);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void loadDashboardData() {&#10;        String teacherId = mAuth.getCurrentUser().getUid();&#10;        currentTeacherId = teacherId; // Lưu teacherId trực tiếp&#10;&#10;        // Load teacher info&#10;        db.collection(&quot;users&quot;).document(teacherId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String fullName = documentSnapshot.getString(&quot;fullName&quot;);&#10;                        tvWelcome.setText(&quot;Xin chào, &quot; + fullName);&#10;&#10;                        // Load counts với teacherId&#10;                        loadCoursesCount(teacherId);&#10;                        loadStudentsCount(teacherId);&#10;                        setupRealTimePendingRequestsCount(); // Sử dụng teacherId&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Toast.makeText(this, &quot;Lỗi khi tải thông tin&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadCoursesCount(String teacherId) {&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int count = queryDocumentSnapshots.size();&#10;                    tvCoursesCount.setText(String.valueOf(count));&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    tvCoursesCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    private void loadStudentsCount(String teacherId) {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;Starting loadStudentsCount for teacherId: &quot; + teacherId);&#10;&#10;        // Kiểm tra tất cả enrollments trong database trước&#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(approvedRequests -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + approvedRequests.size() + &quot; approved requests total&quot;);&#10;&#10;                    if (approvedRequests.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;No approved requests found, setting students count to 0&quot;);&#10;                        tvStudentsCount.setText(&quot;0&quot;);&#10;                .addOnSuccessListener(allEnrollments -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Total enrollments in database: &quot; + allEnrollments.size());&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : allEnrollments) {&#10;                        String courseID = doc.getString(&quot;courseID&quot;);&#10;                        String studentID = doc.getString(&quot;studentID&quot;);&#10;                        String fullName = doc.getString(&quot;fullName&quot;);&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Enrollment found - CourseID: &quot; + courseID + &quot;, StudentID: &quot; + studentID + &quot;, Name: &quot; + fullName);&#10;                            .addOnSuccessListener(teacherCourses -&gt; {&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Teacher has &quot; + teacherCourses.size() + &quot; courses&quot;);&#10;&#10;                });&#10;                                // Tạo Set chứa courseIds của teacher&#10;        // Lấy tất cả courses của teacher trước&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(courseSnapshots -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + courseSnapshots.size() + &quot; courses for teacher&quot;);&#10;                    if (courseSnapshots.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;No courses found, setting students count to 0&quot;);&#10;                        tvStudentsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;                    // Tạo Set để lưu unique studentID&#10;                    java.util.Set&lt;String&gt; uniqueStudentIds = new java.util.HashSet&lt;&gt;();&#10;                    java.util.concurrent.atomic.AtomicInteger coursesProcessed = new java.util.concurrent.atomic.AtomicInteger(0);&#10;                    int totalCourses = courseSnapshots.size();&#10;                    // Duyệt qua từng khóa học của teacher&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot courseDoc : courseSnapshots) {&#10;                        String courseId = courseDoc.getId();&#10;                        String courseName = courseDoc.getString(&quot;courseName&quot;);&#10;                        // Lấy enrollments cho khóa học này&#10;                        db.collection(&quot;enrollments&quot;)&#10;                                .whereEqualTo(&quot;courseID&quot;, courseId)&#10;                                .get()&#10;                                .addOnSuccessListener(enrollmentSnapshots -&gt; {&#10;                                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + enrollmentSnapshots.size() + &quot; enrollments for course: &quot; + courseId);&#10;                                        if (studentId != null &amp;&amp; !studentId.isEmpty()) {&#10;                                            uniqueStudentIds.add(studentId);&#10;                                            Log.d(&quot;TeacherDashboard&quot;, &quot;Added studentId: &quot; + studentId +&#10;                                    // Kiểm tra xem đã xử lý hết tất cả courses chưa&#10;                                    if (coursesProcessed.incrementAndGet() &gt;= totalCourses) {&#10;                                        Log.d(&quot;TeacherDashboard&quot;, &quot;Finished processing all courses. Final unique students count: &quot; + uniqueStudentIds.size());&#10;                                        // Cập nhật UI với số lượng học viên unique&#10;                                        runOnUiThread(() -&gt; {&#10;                                            tvStudentsCount.setText(String.valueOf(uniqueStudentIds.size()));&#10;                                        });&#10;                                    }&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading enrollments for course: &quot; + courseId, e);&#10;                                    if (coursesProcessed.incrementAndGet() &gt;= totalCourses) {&#10;                                        Log.d(&quot;TeacherDashboard&quot;, &quot;Finished processing all courses (with some errors). Final unique students count: &quot; + uniqueStudentIds.size());&#10;                                        runOnUiThread(() -&gt; {&#10;                                            tvStudentsCount.setText(String.valueOf(uniqueStudentIds.size()));&#10;                                        });&#10;                                    }&#10;                                });&#10;                    }&#10;                                    tvStudentsCount.setText(String.valueOf(finalCount));&#10;                                });&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading teacher courses&quot;, e);&#10;                                tvStudentsCount.setText(&quot;0&quot;);&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading courses&quot;, e);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading approved requests&quot;, e);&#10;                    tvStudentsCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    // Sửa để hiển thị TẤT CẢ pending requests (không filter theo teacherId)&#10;    private void setupRealTimePendingRequestsCount() {&#10;        // Đơn giản hóa - đếm tất cả pending requests&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)&#10;                .addSnapshotListener((queryDocumentSnapshots, e) -&gt; {&#10;                    if (e != null) {&#10;                        Log.e(&quot;TeacherDashboard&quot;, &quot;Error listening to pending requests&quot;, e);&#10;                        tvPendingRequestsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    if (queryDocumentSnapshots != null) {&#10;                        int count = queryDocumentSnapshots.size();&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Real-time update: &quot; + count + &quot; pending requests total&quot;);&#10;&#10;                        runOnUiThread(() -&gt; {&#10;                            tvPendingRequestsCount.setText(String.valueOf(count));&#10;&#10;                            if (count &gt; 0) {&#10;                                btnViewRequests.setText(&quot;Xem yêu cầu (&quot; + count + &quot;)&quot;);&#10;                                // Animation nhấp nháy khi có yêu cầu mới&#10;                                btnViewRequests.animate()&#10;                                        .scaleX(1.1f)&#10;                                        .scaleY(1.1f)&#10;                                        .setDuration(200)&#10;                        return;&#10;                    }&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : snapshots) {&#10;                        String courseID = doc.getString(&quot;courseID&quot;);&#10;                        String studentID = doc.getString(&quot;studentID&quot;);&#10;                        String fullName = doc.getString(&quot;fullName&quot;);&#10;&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Enrollment: &quot; + fullName + &quot; → Course: &quot; + courseID + &quot; (StudentID: &quot; + studentID + &quot;)&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error checking enrollments&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.teacher_toolbar_menu, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;        if (itemId == R.id.action_logout) {&#10;            logout();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    private void logout() {&#10;        mAuth.signOut();&#10;        Intent intent = new Intent(this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh data khi quay lại activity&#10;        loadDashboardData();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Cleanup listeners khi destroy activity&#10;        if (realtimeManager != null) {&#10;            realtimeManager.removeAllListeners();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.utils.RealtimeManager;&#10;&#10;public class TeacherDashboardActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TextView tvWelcome, tvCoursesCount, tvStudentsCount, tvPendingRequestsCount;&#10;    private LinearLayout btnManageCourses, btnViewRequests, btnCreateQuiz, btnCreateCourse;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private RealtimeManager realtimeManager;&#10;    private String currentTeacherId; // Đổi từ currentTeacherName sang currentTeacherId&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_teacher_dashboard);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        loadDashboardData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvWelcome = findViewById(R.id.tv_welcome);&#10;        tvCoursesCount = findViewById(R.id.tv_courses_count);&#10;        tvStudentsCount = findViewById(R.id.tv_students_count);&#10;        tvPendingRequestsCount = findViewById(R.id.tv_pending_requests_count);&#10;&#10;        btnManageCourses = findViewById(R.id.btn_manage_courses);&#10;        btnViewRequests = findViewById(R.id.btn_view_requests);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnCreateCourse = findViewById(R.id.btn_create_course);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bảng điều khiển giáo viên&quot;);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        realtimeManager = RealtimeManager.getInstance();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnManageCourses.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseManagementActivity.class));&#10;        });&#10;&#10;        // Thêm click listener cho nút &quot;View Requests&quot;&#10;        btnViewRequests.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseRequestManagementActivity.class));&#10;        });&#10;&#10;        btnCreateQuiz.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, SelectCourseForQuizActivity.class));&#10;        });&#10;&#10;        // Nút &quot;Quản lý đăng ký&quot; - chuyển đến EnrollmentStatusSelectionActivity&#10;        btnCreateCourse.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, EnrollmentStatusSelectionActivity.class);&#10;            // Truyền teacherId để activity có thể lọc dữ liệu theo giáo viên&#10;            intent.putExtra(&quot;teacherId&quot;, currentTeacherId);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void loadDashboardData() {&#10;        String teacherId = mAuth.getCurrentUser().getUid();&#10;        currentTeacherId = teacherId; // Lưu teacherId trực tiếp&#10;&#10;        // Thêm debug enrollments&#10;        debugEnrollments();&#10;&#10;        // Load teacher info&#10;        db.collection(&quot;users&quot;).document(teacherId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String fullName = documentSnapshot.getString(&quot;fullName&quot;);&#10;                        tvWelcome.setText(&quot;Xin chào, &quot; + fullName);&#10;&#10;                        // Load counts với teacherId&#10;                        loadCoursesCount(teacherId);&#10;                        loadStudentsCount(teacherId);&#10;                        setupRealTimePendingRequestsCount(); // Sử dụng teacherId&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Toast.makeText(this, &quot;Lỗi khi tải thông tin&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadCoursesCount(String teacherId) {&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int count = queryDocumentSnapshots.size();&#10;                    tvCoursesCount.setText(String.valueOf(count));&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    tvCoursesCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    private void loadStudentsCount(String teacherId) {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;Starting loadStudentsCount for teacherId: &quot; + teacherId);&#10;&#10;        // Lấy tất cả approved requests từ courseRequests&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(approvedRequests -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + approvedRequests.size() + &quot; approved requests total&quot;);&#10;&#10;                    if (approvedRequests.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;No approved requests found, setting students count to 0&quot;);&#10;                        tvStudentsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    // Lấy danh sách courseIds của teacher này&#10;                    db.collection(&quot;courses&quot;)&#10;                            .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                            .get()&#10;                            .addOnSuccessListener(teacherCourses -&gt; {&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Teacher has &quot; + teacherCourses.size() + &quot; courses&quot;);&#10;&#10;                                // Tạo Set chứa courseIds của teacher&#10;                                java.util.Set&lt;String&gt; teacherCourseIds = new java.util.HashSet&lt;&gt;();&#10;                                for (com.google.firebase.firestore.QueryDocumentSnapshot courseDoc : teacherCourses) {&#10;                                    teacherCourseIds.add(courseDoc.getId());&#10;                                    Log.d(&quot;TeacherDashboard&quot;, &quot;Teacher course ID: &quot; + courseDoc.getId());&#10;                                }&#10;&#10;                                // Tạo Set để lưu unique studentId của teacher này&#10;                                java.util.Set&lt;String&gt; uniqueStudentIds = new java.util.HashSet&lt;&gt;();&#10;&#10;                                // Duyệt qua tất cả approved requests&#10;                                for (com.google.firebase.firestore.QueryDocumentSnapshot requestDoc : approvedRequests) {&#10;                                    String studentName = requestDoc.getString(&quot;studentName&quot;);&#10;                                    String studentId = requestDoc.getString(&quot;studentId&quot;);&#10;                                    String courseId = requestDoc.getString(&quot;courseId&quot;);&#10;                                    String courseName = requestDoc.getString(&quot;courseName&quot;);&#10;&#10;                                    Log.d(&quot;TeacherDashboard&quot;, &quot;Processing approved request - Student: &quot; + studentName +&#10;                                            &quot;, StudentId: &quot; + studentId + &quot;, CourseId: &quot; + courseId + &quot;, Course: &quot; + courseName);&#10;&#10;                                    // Chỉ đếm nếu courseId thuộc về teacher này&#10;                                    if (teacherCourseIds.contains(courseId)) {&#10;                                        if (studentId != null &amp;&amp; !studentId.isEmpty()) {&#10;                                            uniqueStudentIds.add(studentId);&#10;                                            Log.d(&quot;TeacherDashboard&quot;, &quot;Added studentId: &quot; + studentId +&#10;                                                    &quot; for teacher's course: &quot; + courseName + &quot;. Total unique students: &quot; + uniqueStudentIds.size());&#10;                                        }&#10;                                    } else {&#10;                                        Log.d(&quot;TeacherDashboard&quot;, &quot;Skipping request for course not belonging to this teacher: &quot; + courseName);&#10;                                    }&#10;                                }&#10;&#10;                                // Cập nhật UI&#10;                                int finalCount = uniqueStudentIds.size();&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Final unique students count for teacher: &quot; + finalCount);&#10;&#10;                                runOnUiThread(() -&gt; {&#10;                                    tvStudentsCount.setText(String.valueOf(finalCount));&#10;                                });&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading teacher courses&quot;, e);&#10;                                tvStudentsCount.setText(&quot;0&quot;);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading approved requests&quot;, e);&#10;                    tvStudentsCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    // Sửa để hiển thị TẤT CẢ pending requests (không filter theo teacherId)&#10;    private void setupRealTimePendingRequestsCount() {&#10;        // Đơn giản hóa - đếm tất cả pending requests&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)&#10;                .addSnapshotListener((queryDocumentSnapshots, e) -&gt; {&#10;                    if (e != null) {&#10;                        Log.e(&quot;TeacherDashboard&quot;, &quot;Error listening to pending requests&quot;, e);&#10;                        tvPendingRequestsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    if (queryDocumentSnapshots != null) {&#10;                        int count = queryDocumentSnapshots.size();&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Real-time update: &quot; + count + &quot; pending requests total&quot;);&#10;&#10;                        runOnUiThread(() -&gt; {&#10;                            tvPendingRequestsCount.setText(String.valueOf(count));&#10;&#10;                            if (count &gt; 0) {&#10;                                // Animation nhấp nháy khi có yêu cầu mới&#10;                                btnViewRequests.animate()&#10;                                        .scaleX(1.1f)&#10;                                        .scaleY(1.1f)&#10;                                        .setDuration(200)&#10;                                        .withEndAction(() -&gt; {&#10;                                            btnViewRequests.animate()&#10;                                                    .scaleX(1f)&#10;                                                    .scaleY(1f)&#10;                                                    .setDuration(200)&#10;                                                    .start();&#10;                                        })&#10;                                        .start();&#10;                            }&#10;                        });&#10;                    }&#10;                });&#10;    }&#10;&#10;    // Thêm method debug để kiểm tra enrollments&#10;    private void debugEnrollments() {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;=== DEBUG: Checking all enrollments ===&quot;);&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(snapshots -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Total enrollments in database: &quot; + snapshots.size());&#10;&#10;                    if (snapshots.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;❌ NO ENROLLMENTS FOUND - This is why student count is 0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : snapshots) {&#10;                        String courseID = doc.getString(&quot;courseID&quot;);&#10;                        String studentID = doc.getString(&quot;studentID&quot;);&#10;                        String fullName = doc.getString(&quot;fullName&quot;);&#10;&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Enrollment: &quot; + fullName + &quot; → Course: &quot; + courseID + &quot; (StudentID: &quot; + studentID + &quot;)&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error checking enrollments&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.teacher_toolbar_menu, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;        if (itemId == R.id.action_logout) {&#10;            logout();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    private void logout() {&#10;        mAuth.signOut();&#10;        Intent intent = new Intent(this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh data khi quay lại activity&#10;        loadDashboardData();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Cleanup listeners khi destroy activity&#10;        if (realtimeManager != null) {&#10;            realtimeManager.removeAllListeners();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/CourseSelectAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/CourseSelectAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.adapters;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.vantinh.tienganh.R;&#10;import com.vantinh.tienganh.models.Course;&#10;import java.util.List;&#10;&#10;public class CourseSelectAdapter extends RecyclerView.Adapter&lt;CourseSelectAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;Course&gt; courses;&#10;    private OnCourseSelectListener listener;&#10;&#10;    public interface OnCourseSelectListener {&#10;        void onCourseSelected(Course course);&#10;    }&#10;&#10;    public CourseSelectAdapter(List&lt;Course&gt; courses, OnCourseSelectListener listener) {&#10;        this.courses = courses;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_course_select, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        Course course = courses.get(position);&#10;        holder.bind(course);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return courses.size();&#10;    }&#10;&#10;    class ViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvCourseName, tvCourseDescription;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            tvCourseDescription = itemView.findViewById(R.id.tv_course_description);&#10;&#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onCourseSelected(courses.get(getAdapterPosition()));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(Course course) {&#10;            tvCourseName.setText(course.getCourseName());&#10;            tvCourseDescription.setText(course.getDescription());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/EditTestQuestionAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/EditTestQuestionAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.adapters;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.vantinh.tienganh.R;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import java.util.List;&#10;&#10;public class EditTestQuestionAdapter extends RecyclerView.Adapter&lt;EditTestQuestionAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;SimpleTestQuestion&gt; questions;&#10;    private OnQuestionClickListener editListener;&#10;    private OnQuestionClickListener deleteListener;&#10;&#10;    public interface OnQuestionClickListener {&#10;        void onQuestionClick(SimpleTestQuestion question);&#10;    }&#10;&#10;    public EditTestQuestionAdapter(List&lt;SimpleTestQuestion&gt; questions, &#10;                                  OnQuestionClickListener editListener,&#10;                                  OnQuestionClickListener deleteListener) {&#10;        this.questions = questions;&#10;        this.editListener = editListener;&#10;        this.deleteListener = deleteListener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_edit_test_question, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        SimpleTestQuestion question = questions.get(position);&#10;        &#10;        holder.tvQuestionNumber.setText(&quot;Câu &quot; + (position + 1));&#10;        holder.tvQuestion.setText(question.getQuestion());&#10;        &#10;        // Hiển thị các lựa chọn&#10;        List&lt;String&gt; options = question.getCorrectAnswer();&#10;        if (options != null &amp;&amp; options.size() &gt;= 4) {&#10;            holder.tvOptionA.setText(&quot;A. &quot; + options.get(0));&#10;            holder.tvOptionB.setText(&quot;B. &quot; + options.get(1));&#10;            holder.tvOptionC.setText(&quot;C. &quot; + options.get(2));&#10;            holder.tvOptionD.setText(&quot;D. &quot; + options.get(3));&#10;        }&#10;        &#10;        // Hiển thị đáp án đúng&#10;        int correctIndex = question.getOptions();&#10;        String correctLabel = &quot;&quot;;&#10;        switch (correctIndex) {&#10;            case 0: correctLabel = &quot;A&quot;; break;&#10;            case 1: correctLabel = &quot;B&quot;; break;&#10;            case 2: correctLabel = &quot;C&quot;; break;&#10;            case 3: correctLabel = &quot;D&quot;; break;&#10;        }&#10;        holder.tvCorrectAnswer.setText(&quot;Đáp án đúng: &quot; + correctLabel);&#10;        &#10;        // Set click listeners&#10;        holder.btnEdit.setOnClickListener(v -&gt; {&#10;            if (editListener != null) {&#10;                editListener.onQuestionClick(question);&#10;            }&#10;        });&#10;        &#10;        holder.btnDelete.setOnClickListener(v -&gt; {&#10;            if (deleteListener != null) {&#10;                deleteListener.onQuestionClick(question);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return questions.size();&#10;    }&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvQuestionNumber, tvQuestion, tvOptionA, tvOptionB, tvOptionC, tvOptionD, tvCorrectAnswer;&#10;        Button btnEdit, btnDelete;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvQuestionNumber = itemView.findViewById(R.id.tv_question_number);&#10;            tvQuestion = itemView.findViewById(R.id.tv_question);&#10;            tvOptionA = itemView.findViewById(R.id.tv_option_a);&#10;            tvOptionB = itemView.findViewById(R.id.tv_option_b);&#10;            tvOptionC = itemView.findViewById(R.id.tv_option_c);&#10;            tvOptionD = itemView.findViewById(R.id.tv_option_d);&#10;            tvCorrectAnswer = itemView.findViewById(R.id.tv_correct_answer);&#10;            btnEdit = itemView.findViewById(R.id.btn_edit);&#10;            btnDelete = itemView.findViewById(R.id.btn_delete);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Course.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Course.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class Course {&#10;    private String id;&#10;    private String title;&#10;    private String description;&#10;    private String teacherId;&#10;    private String imageUrl;&#10;    private String level; // Beginner, Intermediate, Advanced&#10;    private String category; // Grammar, Vocabulary, Listening, Speaking&#10;    private int duration; // in hours&#10;    private Date createdAt;&#10;    private Date updatedAt;&#10;    private boolean isActive;&#10;    private int enrolledStudents;&#10;    private double rating;&#10;    private List&lt;String&gt; tags;&#10;&#10;    public Course() {&#10;        // Required empty constructor for Firebase&#10;    }&#10;&#10;    public Course(String title, String description, String teacherId,&#10;                  String level, String category, int duration) {&#10;        this.title = title;&#10;        this.description = description;&#10;        this.teacherId = teacherId;&#10;        this.level = level;&#10;        this.category = category;&#10;        this.duration = duration;&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;        this.isActive = true;&#10;        this.enrolledStudents = 0;&#10;        this.rating = 0.0;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public void setId(String id) { this.id = id; }&#10;&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;&#10;    public String getTeacherId() { return teacherId; }&#10;    public void setTeacherId(String teacherId) { this.teacherId = teacherId; }&#10;&#10;    public String getImageUrl() { return imageUrl; }&#10;    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }&#10;&#10;    public String getLevel() { return level; }&#10;    public void setLevel(String level) { this.level = level; }&#10;&#10;    public String getCategory() { return category; }&#10;    public void setCategory(String category) { this.category = category; }&#10;&#10;    public int getDuration() { return duration; }&#10;    public void setDuration(int duration) { this.duration = duration; }&#10;&#10;    public Date getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }&#10;&#10;    public Date getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(Date updatedAt) { this.updatedAt = updatedAt; }&#10;&#10;    public boolean isActive() { return isActive; }&#10;    public void setActive(boolean active) { isActive = active; }&#10;&#10;    public int getEnrolledStudents() { return enrolledStudents; }&#10;    public void setEnrolledStudents(int enrolledStudents) { this.enrolledStudents = enrolledStudents; }&#10;&#10;    public double getRating() { return rating; }&#10;    public void setRating(double rating) { this.rating = rating; }&#10;&#10;    public List&lt;String&gt; getTags() { return tags; }&#10;    public void setTags(List&lt;String&gt; tags) { this.tags = tags; }&#10;&#10;    // Thêm phương thức getCourseName() để tương thích với code hiện tại&#10;    public String getCourseName() {&#10;        return this.title;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.title = courseName;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/LessonProgress.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/LessonProgress.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.Date;&#10;&#10;public class LessonProgress {&#10;    private String id;&#10;    private String studentId;&#10;    private String courseId;&#10;    private String lessonId;&#10;    private boolean isCompleted;&#10;    private Date completedAt;&#10;    private Date createdAt;&#10;    private Date updatedAt;&#10;&#10;    public LessonProgress() {&#10;        // Constructor mặc định cho Firestore&#10;    }&#10;&#10;    public LessonProgress(String studentId, String courseId, String lessonId, boolean isCompleted) {&#10;        this.studentId = studentId;&#10;        this.courseId = courseId;&#10;        this.lessonId = lessonId;&#10;        this.isCompleted = isCompleted;&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;        if (isCompleted) {&#10;            this.completedAt = new Date();&#10;        }&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getLessonId() {&#10;        return lessonId;&#10;    }&#10;&#10;    public void setLessonId(String lessonId) {&#10;        this.lessonId = lessonId;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return isCompleted;&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        isCompleted = completed;&#10;        this.updatedAt = new Date();&#10;        if (completed &amp;&amp; this.completedAt == null) {&#10;            this.completedAt = new Date();&#10;        }&#10;    }&#10;&#10;    public Date getCompletedAt() {&#10;        return completedAt;&#10;    }&#10;&#10;    public void setCompletedAt(Date completedAt) {&#10;        this.completedAt = completedAt;&#10;    }&#10;&#10;    public Date getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Date getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Date updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Quiz.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Quiz.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class Quiz {&#10;    private String id;&#10;    private String title;&#10;    private String courseId;&#10;    private String courseName;&#10;    private String teacherId;&#10;    private List&lt;QuizQuestion&gt; questions;&#10;    private Date createdAt;&#10;    private boolean active;&#10;&#10;    public Quiz() {&#10;        // Empty constructor required for Firestore&#10;    }&#10;&#10;    public Quiz(String title, String courseId, String courseName, String teacherId, &#10;                List&lt;QuizQuestion&gt; questions, Date createdAt, boolean active) {&#10;        this.title = title;&#10;        this.courseId = courseId;&#10;        this.courseName = courseName;&#10;        this.teacherId = teacherId;&#10;        this.questions = questions;&#10;        this.createdAt = createdAt;&#10;        this.active = active;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getCourseName() {&#10;        return courseName;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.courseName = courseName;&#10;    }&#10;&#10;    public String getTeacherId() {&#10;        return teacherId;&#10;    }&#10;&#10;    public void setTeacherId(String teacherId) {&#10;        this.teacherId = teacherId;&#10;    }&#10;&#10;    public List&lt;QuizQuestion&gt; getQuestions() {&#10;        return questions;&#10;    }&#10;&#10;    public void setQuestions(List&lt;QuizQuestion&gt; questions) {&#10;        this.questions = questions;&#10;    }&#10;&#10;    public Date getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public boolean isActive() {&#10;        return active;&#10;    }&#10;&#10;    public void setActive(boolean active) {&#10;        this.active = active;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/animated_indicator.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/animated_indicator.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:endColor=&quot;#764ba2&quot;&#10;        android:angle=&quot;90&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;2dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_avatar_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_avatar_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ffffff&quot;&#10;        android:endColor=&quot;#f0f0f0&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#20000000&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_white_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_white_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@android:color/white&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#20FFFFFF&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/glass_toolbar_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/glass_toolbar_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#20FFFFFF&quot;&#10;        android:centerColor=&quot;#10FFFFFF&quot;&#10;        android:endColor=&quot;#05FFFFFF&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_approved.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_approved.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#56ab2f&quot;&#10;        android:centerColor=&quot;#a8e6cf&quot;&#10;        android:endColor=&quot;#00b09b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;20dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background_light.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background_light.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#e3ffe7&quot;&#10;        android:centerColor=&quot;#d9ffdb&quot;&#10;        android:endColor=&quot;#b3ffb3&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_courses.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_courses.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4facfe&quot;&#10;        android:centerColor=&quot;#00f2fe&quot;&#10;        android:endColor=&quot;#43e97b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_enrollment.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_enrollment.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_quiz.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_quiz.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#a8edea&quot;&#10;        android:centerColor=&quot;#fed6e3&quot;&#10;        android:endColor=&quot;#ffecd2&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_requests.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_requests.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff6b6b&quot;&#10;        android:centerColor=&quot;#ee5a52&quot;&#10;        android:endColor=&quot;#ff9a9e&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_courses.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_courses.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4facfe&quot;&#10;        android:centerColor=&quot;#00f2fe&quot;&#10;        android:endColor=&quot;#43e97b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_requests.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_requests.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff6b6b&quot;&#10;        android:centerColor=&quot;#ee5a52&quot;&#10;        android:endColor=&quot;#ff9a9e&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_students.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_students.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_dashboard_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_dashboard_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_header_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_header_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4facfe&quot;&#10;        android:centerColor=&quot;#00f2fe&quot;&#10;        android:endColor=&quot;#43e97b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_line_accent.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_line_accent.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff9a9e&quot;&#10;        android:centerColor=&quot;#fecfef&quot;&#10;        android:endColor=&quot;#fecfef&quot;&#10;        android:angle=&quot;0&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;2dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_rejected.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_rejected.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff416c&quot;&#10;        android:centerColor=&quot;#ff4b2b&quot;&#10;        android:endColor=&quot;#ff8a80&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;20dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_student_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_student_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_book_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_book_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M18,2H6c-1.1,0 -2,0.9 -2,2v16c0,1.1 0.89,2 2,2h12c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zM6,4h5v8l-2.5,-1.5L6,12V4z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_check_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_check_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41,-1.41z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_circle.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_circle.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_cross_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_cross_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_diamond.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_diamond.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2l2,6h6l-5,4 2,6-5-4-5,4 2-6-5-4h6z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_education_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_education_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,3L1,9l11,6l9,-4.91V17h2V9M5,13.18v4L12,21l7,-3.82v-4L12,17&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_empty_state.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_empty_state.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-6h2v6zM13,9h-2L11,7h2v2z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_management.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_management.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M16,9V4H8v5H2v11h20V9H16zM10,4h4v5h-4V4zM20,18H4v-7h16V18z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M6,13h2v2H6zM9,13h6v2H9z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_star.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_star.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2l3.09,6.26L22,9.27l-5,4.87L18.18,22L12,18.77L5.82,22L7,14.14L2,9.27l6.91,-1.01L12,2z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_student_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_student_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_green.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_green.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#4CAF50&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_red.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_red.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/radio_button_selector_d.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/radio_button_selector_d.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item android:state_checked=&quot;true&quot;&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;solid android:color=&quot;#dc3545&quot; /&gt;&#10;            &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;            &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#bd2130&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;    &lt;item android:state_checked=&quot;false&quot;&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;solid android:color=&quot;#f8d7da&quot; /&gt;&#10;            &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;            &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;#ff6b6b&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;&lt;/selector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/radio_text_color_d.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/radio_text_color_d.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item android:state_checked=&quot;true&quot; android:color=&quot;@android:color/white&quot; /&gt;&#10;    &lt;item android:state_checked=&quot;false&quot; android:color=&quot;#721c24&quot; /&gt;&#10;&lt;/selector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/shine_overlay.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/shine_overlay.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#40FFFFFF&quot;&#10;        android:centerColor=&quot;#20FFFFFF&quot;&#10;        android:endColor=&quot;#00FFFFFF&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/status_indicator.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/status_indicator.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4CAF50&quot;&#10;        android:endColor=&quot;#8BC34A&quot;&#10;        android:angle=&quot;90&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;3dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_teacher_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_teacher_dashboard.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/gradient_dashboard_background&quot;&gt;&#10;&#10;    &lt;!-- Floating particles background effect --&gt;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;150dp&quot;&#10;        android:layout_height=&quot;150dp&quot;&#10;        android:layout_alignParentEnd=&quot;true&quot;&#10;        android:layout_marginTop=&quot;100dp&quot;&#10;        android:layout_marginEnd=&quot;30dp&quot;&#10;        android:alpha=&quot;0.05&quot;&#10;        android:rotation=&quot;15&quot;&#10;        android:src=&quot;@drawable/ic_education_pattern&quot;&#10;        android:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;100dp&quot;&#10;        android:layout_height=&quot;100dp&quot;&#10;        android:layout_alignParentStart=&quot;true&quot;&#10;        android:layout_marginStart=&quot;20dp&quot;&#10;        android:layout_marginTop=&quot;300dp&quot;&#10;        android:alpha=&quot;0.08&quot;&#10;        android:rotation=&quot;-25&quot;&#10;        android:src=&quot;@drawable/ic_book_pattern&quot;&#10;        android:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;!-- Toolbar --&gt;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        android:background=&quot;@drawable/glass_toolbar_bg&quot;&#10;        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&#10;        android:elevation=&quot;8dp&quot;&#10;        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;&#10;&#10;    &lt;!-- Main Content --&gt;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_below=&quot;@id/toolbar&quot;&#10;        android:fillViewport=&quot;true&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Welcome Section --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_marginBottom=&quot;32dp&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;‍&quot;&#10;                    android:textSize=&quot;64sp&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&#10;                    android:alpha=&quot;0.9&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_welcome&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Xin chào, Giáo viên&quot;&#10;                    android:textSize=&quot;28sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:shadowColor=&quot;#40000000&quot;&#10;                    android:shadowDx=&quot;2&quot;&#10;                    android:shadowDy=&quot;2&quot;&#10;                    android:shadowRadius=&quot;8&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:fontFamily=&quot;sans-serif-condensed&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Bảng điều khiển giáo viên&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:alpha=&quot;0.8&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:fontFamily=&quot;sans-serif-light&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Statistics Cards --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;32dp&quot;&gt;&#10;&#10;                &lt;!-- Courses Card --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/gradient_card_courses&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:padding=&quot;16dp&quot;&#10;                    android:elevation=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_courses_count&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:shadowColor=&quot;#40000000&quot;&#10;                        android:shadowDx=&quot;1&quot;&#10;                        android:shadowDy=&quot;1&quot;&#10;                        android:shadowRadius=&quot;4&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Khóa học&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:alpha=&quot;0.9&quot;&#10;                        android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Students Card --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_marginHorizontal=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/gradient_card_students&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:padding=&quot;16dp&quot;&#10;                    android:elevation=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_students_count&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:shadowColor=&quot;#40000000&quot;&#10;                        android:shadowDx=&quot;1&quot;&#10;                        android:shadowDy=&quot;1&quot;&#10;                        android:shadowRadius=&quot;4&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Học viên&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:alpha=&quot;0.9&quot;&#10;                        android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Requests Card --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;120dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/gradient_card_requests&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:padding=&quot;16dp&quot;&#10;                    android:elevation=&quot;12dp&quot;&#10;                    android:clickable=&quot;true&quot;&#10;                    android:focusable=&quot;true&quot;&#10;                    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_pending_requests_count&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;0&quot;&#10;                        android:textSize=&quot;32sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:shadowColor=&quot;#40000000&quot;&#10;                        android:shadowDx=&quot;1&quot;&#10;                        android:shadowDy=&quot;1&quot;&#10;                        android:shadowRadius=&quot;4&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Yêu cầu&quot;&#10;                        android:textSize=&quot;12sp&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:alpha=&quot;0.9&quot;&#10;                        android:fontFamily=&quot;sans-serif-medium&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Action Buttons Section --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;!-- Section Title --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⚡&quot;&#10;                        android:textSize=&quot;24sp&quot;&#10;                        android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:text=&quot;Hành động nhanh&quot;&#10;                        android:textSize=&quot;20sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:shadowColor=&quot;#40000000&quot;&#10;                        android:shadowDx=&quot;1&quot;&#10;                        android:shadowDy=&quot;1&quot;&#10;                        android:shadowRadius=&quot;4&quot; /&gt;&#10;&#10;                    &lt;View&#10;                        android:layout_width=&quot;50dp&quot;&#10;                        android:layout_height=&quot;3dp&quot;&#10;                        android:background=&quot;@drawable/gradient_line_accent&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- First Row Buttons --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;!-- Quản lý đăng ký Button --&gt;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/btn_create_course&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;80dp&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginEnd=&quot;8dp&quot;&#10;                        android:background=&quot;@drawable/gradient_button_enrollment&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:gravity=&quot;center_vertical&quot;&#10;                        android:padding=&quot;16dp&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:focusable=&quot;true&quot;&#10;                        android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                        android:elevation=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;&quot;&#10;                            android:textSize=&quot;28sp&quot;&#10;                            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Quản lý đăng ký&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:shadowColor=&quot;#40000000&quot;&#10;                                android:shadowDx=&quot;1&quot;&#10;                                android:shadowDy=&quot;1&quot;&#10;                                android:shadowRadius=&quot;2&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Quản lý sinh viên&quot;&#10;                                android:textSize=&quot;10sp&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:alpha=&quot;0.8&quot;&#10;                                android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;!-- Quản lý khóa học Button --&gt;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/btn_manage_courses&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;80dp&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:background=&quot;@drawable/gradient_button_courses&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:gravity=&quot;center_vertical&quot;&#10;                        android:padding=&quot;16dp&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:focusable=&quot;true&quot;&#10;                        android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                        android:elevation=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;&quot;&#10;                            android:textSize=&quot;28sp&quot;&#10;                            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Quản lý khóa học&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:shadowColor=&quot;#40000000&quot;&#10;                                android:shadowDx=&quot;1&quot;&#10;                                android:shadowDy=&quot;1&quot;&#10;                                android:shadowRadius=&quot;2&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Tạo và chỉnh sửa&quot;&#10;                                android:textSize=&quot;10sp&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:alpha=&quot;0.8&quot;&#10;                                android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Second Row Buttons --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                    &lt;!-- Xem yêu cầu Button --&gt;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/btn_view_requests&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;80dp&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginEnd=&quot;8dp&quot;&#10;                        android:background=&quot;@drawable/gradient_button_requests&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:gravity=&quot;center_vertical&quot;&#10;                        android:padding=&quot;16dp&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:focusable=&quot;true&quot;&#10;                        android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                        android:elevation=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;&quot;&#10;                            android:textSize=&quot;28sp&quot;&#10;                            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Xem yêu cầu&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:shadowColor=&quot;#40000000&quot;&#10;                                android:shadowDx=&quot;1&quot;&#10;                                android:shadowDy=&quot;1&quot;&#10;                                android:shadowRadius=&quot;2&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Duyệt đăng ký&quot;&#10;                                android:textSize=&quot;10sp&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:alpha=&quot;0.8&quot;&#10;                                android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;!-- Tạo bài kiểm tra Button --&gt;&#10;                    &lt;LinearLayout&#10;                        android:id=&quot;@+id/btn_create_quiz&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;80dp&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:background=&quot;@drawable/gradient_button_quiz&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:gravity=&quot;center_vertical&quot;&#10;                        android:padding=&quot;16dp&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:focusable=&quot;true&quot;&#10;                        android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;                        android:elevation=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;&quot;&#10;                            android:textSize=&quot;28sp&quot;&#10;                            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Tạo bài kiểm tra&quot;&#10;                                android:textSize=&quot;14sp&quot;&#10;                                android:textStyle=&quot;bold&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:shadowColor=&quot;#40000000&quot;&#10;                                android:shadowDx=&quot;1&quot;&#10;                                android:shadowDy=&quot;1&quot;&#10;                                android:shadowRadius=&quot;2&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Quiz và bài tập&quot;&#10;                                android:textSize=&quot;10sp&quot;&#10;                                android:textColor=&quot;@android:color/white&quot;&#10;                                android:alpha=&quot;0.8&quot;&#10;                                android:layout_marginTop=&quot;2dp&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Footer --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginTop=&quot;32dp&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot; Tip: Nhấn vào các thẻ để xem chi tiết&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:alpha=&quot;0.6&quot;&#10;                    android:fontFamily=&quot;sans-serif-light&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_teacher_dashboard_temp.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_teacher_dashboard_temp.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.appcompat.widget.Toolbar&#10;        android:id=&quot;@+id/toolbar&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;?attr/actionBarSize&quot;&#10;        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_centerInParent=&quot;true&quot;&#10;        android:text=&quot;Teacher Dashboard&quot;&#10;        android:textSize=&quot;24sp&quot; /&gt;&#10;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_quiz_question.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_quiz_question.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_marginBottom=&quot;24dp&quot;&#10;    android:background=&quot;@drawable/border_gray&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tv_question_number&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Câu hỏi 1:&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/holo_purple&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:hint=&quot;Nhập câu hỏi&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/et_question&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minLines=&quot;2&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Các lựa chọn:&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- Option A --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_a&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;A&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn A&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_a&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Option B --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_b&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;B&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn B&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_b&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Option C --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_c&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;C&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn C&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_c&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Option D --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_d&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;D&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn D&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_d&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Chọn đáp án đúng bằng cách tick vào radio button tương ứng&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textStyle=&quot;italic&quot;&#10;        android:textColor=&quot;@android:color/darker_gray&quot;&#10;        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_marginBottom=&quot;24dp&quot;&#10;    android:background=&quot;@drawable/border_gray&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tv_question_number&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Câu hỏi 1:&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/holo_purple&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:hint=&quot;Nhập câu hỏi&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/et_question&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minLines=&quot;2&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Các lựa chọn:&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- RadioGroup to properly group RadioButtons --&gt;&#10;    &lt;RadioGroup&#10;        android:id=&quot;@+id/rg_correct_answer&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Option A --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_a&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;A&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn A&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_a&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Option B --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_b&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;B&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn B&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_b&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Option C --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_c&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;C&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn C&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_c&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Option D --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_d&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;D&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn D&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_d&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/RadioGroup&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Chọn đáp án đúng bằng cách tick vào radio button tương ứng&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textStyle=&quot;italic&quot;&#10;        android:textColor=&quot;@android:color/darker_gray&quot;&#10;        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>