<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Final&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- Main Activity (Launcher) --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;&#10;        &lt;!-- Splash Activity --&gt;&#10;        &lt;activity android:name=&quot;.SplashActivity&quot; /&gt;&#10;&#10;        &lt;!-- Authentication Activities --&gt;&#10;        &lt;activity android:name=&quot;.LoginActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.RegisterActivity&quot; /&gt;&#10;&#10;        &lt;!-- Dashboard Activities --&gt;&#10;        &lt;activity android:name=&quot;.TeacherDashboardActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentDashboardActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.AdminDashboardActivity&quot; /&gt;&#10;&#10;        &lt;!-- Course Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StudentCourseSearchActivity&quot;&#10;            android:theme=&quot;@style/Theme.Final.NoActionBar&quot; /&gt;&#10;&#10;        &lt;!-- Edit Test Questions Activity --&gt;&#10;        &lt;activity android:name=&quot;.EditTestQuestionsActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.EditSingleTestQuestionActivity&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CourseRequestManagementActivity&quot;&#10;            android:label=&quot;Quản lý yêu cầu khóa học&quot;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#10;&#10;        &lt;!-- Student Learning Activities --&gt;&#10;        &lt;activity android:name=&quot;.StudentMyCoursesActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentCourseLessonsActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentCourseDetailActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentLessonLearningActivity&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.CourseTestActivity&quot;&#10;            android:label=&quot;Bài kiểm tra khóa học&quot;&#10;            android:parentActivityName=&quot;.StudentCourseDetailActivity&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StudentFeedbackActivity&quot;&#10;            android:label=&quot;Đánh giá khóa học&quot;&#10;            android:parentActivityName=&quot;.StudentDashboardActivity&quot; /&gt;&#10;&#10;&#10;        &lt;!-- Data Migration Tool --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.DataMigrationActivity&quot;&#10;            android:label=&quot;Data Migration Tool&quot; /&gt;&#10;&#10;&#10;        &lt;!-- Quiz Management Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SelectCourseForQuizActivity&quot;&#10;            android:label=&quot;Chọn khóa học&quot;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.CreateQuizActivity&quot;&#10;            android:label=&quot;Tạo bài kiểm tra&quot;&#10;            android:parentActivityName=&quot;.SelectCourseForQuizActivity&quot; /&gt;&#10;&#10;&#10;        &lt;!-- Other Activities --&gt;&#10;        &lt;activity android:name=&quot;.CourseManagementActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.LessonManagementActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.EnrollmentManagementActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.CreateCourseActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.EditCourseActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.CourseListActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.CourseLessonsActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.CourseStudentsActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.CreateLessonActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.EditLessonActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.LessonDetailActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.PersonalScheduleActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudyProgressActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentProgressDetailActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.QuizActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.UpdateProfileActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.FeedbackActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.AdminAccountManagementActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.ContentCreationActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.SystemStatisticsActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentReportActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.StudentDetailReportActivity&quot; /&gt;&#10;&#10;        &lt;!-- New Enrollment Management Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.EnrollmentStatusSelectionActivity&quot;&#10;            android:label=&quot;Quản lý đăng ký&quot;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.EnrollmentListActivity&quot;&#10;            android:label=&quot;Danh sách học viên&quot;&#10;            android:parentActivityName=&quot;.EnrollmentStatusSelectionActivity&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Final&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- Main Activity (Launcher) --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;&#13;&#10;        &lt;!-- Splash Activity --&gt;&#13;&#10;        &lt;activity android:name=&quot;.SplashActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Authentication Activities --&gt;&#13;&#10;        &lt;activity android:name=&quot;.LoginActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.RegisterActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Dashboard Activities --&gt;&#13;&#10;        &lt;activity android:name=&quot;.TeacherDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.AdminDashboardActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Course Activities --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StudentCourseSearchActivity&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Final.NoActionBar&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Edit Test Questions Activity --&gt;&#13;&#10;        &lt;activity android:name=&quot;.EditTestQuestionsActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.EditSingleTestQuestionActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.CourseRequestManagementActivity&quot;&#13;&#10;            android:label=&quot;Quản lý yêu cầu khóa học&quot;&#13;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Student Learning Activities --&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentMyCoursesActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentCourseLessonsActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentCourseDetailActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentLessonLearningActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.FavoriteLessonsActivity&quot;&#13;&#10;            android:label=&quot;Bài học yêu thích&quot;&#13;&#10;            android:parentActivityName=&quot;.StudentDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StudentInboxActivity&quot;&#13;&#10;            android:label=&quot;Hộp thư&quot;&#13;&#10;            android:parentActivityName=&quot;.StudentDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.TeacherFeedbackManagementActivity&quot;&#13;&#10;            android:label=&quot;Quản lý phản hồi&quot;&#13;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.CourseTestActivity&quot;&#13;&#10;            android:label=&quot;Bài kiểm tra khóa học&quot;&#13;&#10;            android:parentActivityName=&quot;.StudentCourseDetailActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StudentFeedbackActivity&quot;&#13;&#10;            android:label=&quot;Đánh giá khóa học&quot;&#13;&#10;            android:parentActivityName=&quot;.StudentDashboardActivity&quot; /&gt;&#13;&#10;&#13;&#10;&#13;&#10;        &lt;!-- Data Migration Tool --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.DataMigrationActivity&quot;&#13;&#10;            android:label=&quot;Data Migration Tool&quot; /&gt;&#13;&#10;&#13;&#10;&#13;&#10;        &lt;!-- Quiz Management Activities --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SelectCourseForQuizActivity&quot;&#13;&#10;            android:label=&quot;Chọn khóa học&quot;&#13;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.CreateQuizActivity&quot;&#13;&#10;            android:label=&quot;Tạo bài kiểm tra&quot;&#13;&#10;            android:parentActivityName=&quot;.SelectCourseForQuizActivity&quot; /&gt;&#13;&#10;&#13;&#10;&#13;&#10;        &lt;!-- Other Activities --&gt;&#13;&#10;        &lt;activity android:name=&quot;.CourseManagementActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.LessonManagementActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.EnrollmentManagementActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.CreateCourseActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.EditCourseActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.CourseListActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.CourseLessonsActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.CourseStudentsActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.CreateLessonActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.EditLessonActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.LessonDetailActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.PersonalScheduleActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudyProgressActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentProgressDetailActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.QuizActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.UpdateProfileActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.FeedbackActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.AdminAccountManagementActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.ContentCreationActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.SystemStatisticsActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentReportActivity&quot; /&gt;&#13;&#10;        &lt;activity android:name=&quot;.StudentDetailReportActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- New Enrollment Management Activities --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.EnrollmentStatusSelectionActivity&quot;&#13;&#10;            android:label=&quot;Quản lý đăng ký&quot;&#13;&#10;            android:parentActivityName=&quot;.TeacherDashboardActivity&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.EnrollmentListActivity&quot;&#13;&#10;            android:label=&quot;Danh sách học viên&quot;&#13;&#10;            android:parentActivityName=&quot;.EnrollmentStatusSelectionActivity&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/ContentCreationActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/ContentCreationActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.android.material.tabs.TabLayout;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class ContentCreationActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TabLayout tabLayout;&#10;    private CardView cardLessonCreation, cardQuizCreation, cardVocabularyList;&#10;    private LinearLayout layoutLessonForm, layoutQuizForm, layoutVocabularyForm;&#10;&#10;    // Lesson creation components&#10;    private EditText etLessonTitle, etLessonDescription, etLessonContent;&#10;    private Spinner spinnerLessonCategory, spinnerDifficulty;&#10;    private Button btnSaveLesson, btnPreviewLesson;&#10;&#10;    // Quiz creation components&#10;    private EditText etQuizTitle, etQuizDescription;&#10;    private EditText etQuestion, etOption1, etOption2, etOption3, etOption4;&#10;    private RadioGroup rgCorrectAnswer;&#10;    private RecyclerView rvQuestions;&#10;    private Button btnAddQuestion, btnSaveQuiz, btnPreviewQuiz;&#10;&#10;    // Vocabulary components&#10;    private EditText etWord, etMeaning, etExample, etPronunciation;&#10;    private Spinner spinnerWordCategory;&#10;    private Button btnAddWord, btnSaveVocabulary;&#10;    private RecyclerView rvVocabularyList;&#10;&#10;    private FloatingActionButton fabPublish;&#10;    private TextView tvContentCount;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String mode; // &quot;lesson&quot;, &quot;quiz&quot;, &quot;vocabulary&quot;&#10;    private String teacherId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_content_creation);&#10;&#10;        // Get mode from intent&#10;        mode = getIntent().getStringExtra(&quot;mode&quot;);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        if (mAuth.getCurrentUser() != null) {&#10;            teacherId = mAuth.getCurrentUser().getUid();&#10;        }&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupTabs();&#10;        setupClickListeners();&#10;        handleModeSpecificSetup();&#10;        loadExistingContent();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tabLayout = findViewById(R.id.tab_layout);&#10;&#10;        // Cards&#10;        cardLessonCreation = findViewById(R.id.card_lesson_creation);&#10;        cardQuizCreation = findViewById(R.id.card_quiz_creation);&#10;        cardVocabularyList = findViewById(R.id.card_vocabulary_list);&#10;&#10;        // Layouts&#10;        layoutLessonForm = findViewById(R.id.layout_lesson_form);&#10;        layoutQuizForm = findViewById(R.id.layout_quiz_form);&#10;        layoutVocabularyForm = findViewById(R.id.layout_vocabulary_form);&#10;&#10;        // Lesson creation&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#10;        etLessonDescription = findViewById(R.id.et_lesson_description);&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#10;        spinnerLessonCategory = findViewById(R.id.spinner_lesson_category);&#10;        spinnerDifficulty = findViewById(R.id.spinner_difficulty);&#10;        btnSaveLesson = findViewById(R.id.btn_save_lesson);&#10;        btnPreviewLesson = findViewById(R.id.btn_preview_lesson);&#10;&#10;        // Quiz creation&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#10;        etQuizDescription = findViewById(R.id.et_quiz_description);&#10;        etQuestion = findViewById(R.id.et_question);&#10;        etOption1 = findViewById(R.id.et_option1);&#10;        etOption2 = findViewById(R.id.et_option2);&#10;        etOption3 = findViewById(R.id.et_option3);&#10;        etOption4 = findViewById(R.id.et_option4);&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#10;        rvQuestions = findViewById(R.id.rv_questions);&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#10;        btnSaveQuiz = findViewById(R.id.btn_save_quiz);&#10;        btnPreviewQuiz = findViewById(R.id.btn_preview_quiz);&#10;&#10;        // Vocabulary&#10;        etWord = findViewById(R.id.et_word);&#10;        etMeaning = findViewById(R.id.et_meaning);&#10;        etExample = findViewById(R.id.et_example);&#10;        etPronunciation = findViewById(R.id.et_pronunciation);&#10;        spinnerWordCategory = findViewById(R.id.spinner_word_category);&#10;        btnAddWord = findViewById(R.id.btn_add_word);&#10;        btnSaveVocabulary = findViewById(R.id.btn_save_vocabulary);&#10;        rvVocabularyList = findViewById(R.id.rv_vocabulary_list);&#10;&#10;        // Other components&#10;        fabPublish = findViewById(R.id.fab_publish);&#10;        tvContentCount = findViewById(R.id.tv_content_count);&#10;&#10;        // Setup RecyclerViews&#10;        if (rvQuestions != null) {&#10;            rvQuestions.setLayoutManager(new LinearLayoutManager(this));&#10;        }&#10;        if (rvVocabularyList != null) {&#10;            rvVocabularyList.setLayoutManager(new LinearLayoutManager(this));&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#10;            getSupportActionBar().setTitle(&quot;Tạo nội dung&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupTabs() {&#10;        if (tabLayout != null) {&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Bài học&quot;));&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Quiz&quot;));&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Từ vựng&quot;));&#10;&#10;            tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {&#10;                @Override&#10;                public void onTabSelected(TabLayout.Tab tab) {&#10;                    switchContentType(tab.getPosition());&#10;                }&#10;&#10;                @Override&#10;                public void onTabUnselected(TabLayout.Tab tab) {}&#10;&#10;                @Override&#10;                public void onTabReselected(TabLayout.Tab tab) {}&#10;            });&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Lesson creation&#10;        if (btnSaveLesson != null) {&#10;            btnSaveLesson.setOnClickListener(v -&gt; saveLesson());&#10;        }&#10;        if (btnPreviewLesson != null) {&#10;            btnPreviewLesson.setOnClickListener(v -&gt; previewLesson());&#10;        }&#10;&#10;        // Quiz creation&#10;        if (btnAddQuestion != null) {&#10;            btnAddQuestion.setOnClickListener(v -&gt; addQuestion());&#10;        }&#10;        if (btnSaveQuiz != null) {&#10;            btnSaveQuiz.setOnClickListener(v -&gt; saveQuiz());&#10;        }&#10;        if (btnPreviewQuiz != null) {&#10;            btnPreviewQuiz.setOnClickListener(v -&gt; previewQuiz());&#10;        }&#10;&#10;        // Vocabulary&#10;        if (btnAddWord != null) {&#10;            btnAddWord.setOnClickListener(v -&gt; addWord());&#10;        }&#10;        if (btnSaveVocabulary != null) {&#10;            btnSaveVocabulary.setOnClickListener(v -&gt; saveVocabularyList());&#10;        }&#10;&#10;        // FAB&#10;        if (fabPublish != null) {&#10;            fabPublish.setOnClickListener(v -&gt; publishContent());&#10;        }&#10;    }&#10;&#10;    private void handleModeSpecificSetup() {&#10;        if (&quot;lesson&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#10;            tabLayout.getTabAt(0).select();&#10;            switchContentType(0);&#10;        } else if (&quot;quiz&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#10;            tabLayout.getTabAt(1).select();&#10;            switchContentType(1);&#10;        } else if (&quot;vocabulary&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#10;            tabLayout.getTabAt(2).select();&#10;            switchContentType(2);&#10;        }&#10;    }&#10;&#10;    private void switchContentType(int position) {&#10;        // Hide all layouts first&#10;        hideAllLayouts();&#10;&#10;        switch (position) {&#10;            case 0: // Lesson&#10;                if (layoutLessonForm != null) {&#10;                    layoutLessonForm.setVisibility(View.VISIBLE);&#10;                }&#10;                break;&#10;            case 1: // Quiz&#10;                if (layoutQuizForm != null) {&#10;                    layoutQuizForm.setVisibility(View.VISIBLE);&#10;                }&#10;                break;&#10;            case 2: // Vocabulary&#10;                if (layoutVocabularyForm != null) {&#10;                    layoutVocabularyForm.setVisibility(View.VISIBLE);&#10;                }&#10;                break;&#10;        }&#10;    }&#10;&#10;    private void hideAllLayouts() {&#10;        if (layoutLessonForm != null) layoutLessonForm.setVisibility(View.GONE);&#10;        if (layoutQuizForm != null) layoutQuizForm.setVisibility(View.GONE);&#10;        if (layoutVocabularyForm != null) layoutVocabularyForm.setVisibility(View.GONE);&#10;    }&#10;&#10;    private void saveLesson() {&#10;        if (teacherId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không thể xác định giáo viên&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String title = etLessonTitle != null ? etLessonTitle.getText().toString().trim() : &quot;&quot;;&#10;        String description = etLessonDescription != null ? etLessonDescription.getText().toString().trim() : &quot;&quot;;&#10;        String content = etLessonContent != null ? etLessonContent.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (title.isEmpty() || content.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập đầy đủ tiêu đề và nội dung&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#10;        lessonData.put(&quot;teacherId&quot;, teacherId);&#10;        lessonData.put(&quot;title&quot;, title);&#10;        lessonData.put(&quot;description&quot;, description);&#10;        lessonData.put(&quot;content&quot;, content);&#10;        lessonData.put(&quot;type&quot;, &quot;lesson&quot;);&#10;        lessonData.put(&quot;createdAt&quot;, System.currentTimeMillis());&#10;        lessonData.put(&quot;status&quot;, &quot;draft&quot;);&#10;&#10;        db.collection(&quot;content&quot;)&#10;                .add(lessonData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    Toast.makeText(this, &quot;Bài học đã được lưu thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                    clearLessonForm();&#10;                    updateContentCount();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void previewLesson() {&#10;        Intent intent = new Intent(this, CourseListActivity.class);&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#10;        intent.putExtra(&quot;title&quot;, etLessonTitle != null ? etLessonTitle.getText().toString() : &quot;&quot;);&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void addQuestion() {&#10;        String question = etQuestion != null ? etQuestion.getText().toString().trim() : &quot;&quot;;&#10;        String option1 = etOption1 != null ? etOption1.getText().toString().trim() : &quot;&quot;;&#10;        String option2 = etOption2 != null ? etOption2.getText().toString().trim() : &quot;&quot;;&#10;        String option3 = etOption3 != null ? etOption3.getText().toString().trim() : &quot;&quot;;&#10;        String option4 = etOption4 != null ? etOption4.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (question.isEmpty() || option1.isEmpty() || option2.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập câu hỏi và ít nhất 2 đáp án&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        int correctAnswer = 0;&#10;        if (rgCorrectAnswer != null &amp;&amp; rgCorrectAnswer.getCheckedRadioButtonId() != -1) {&#10;            RadioButton selectedButton = findViewById(rgCorrectAnswer.getCheckedRadioButtonId());&#10;            // Logic to determine correct answer index&#10;        }&#10;&#10;        // Add question to list (implementation would involve adapter)&#10;        Toast.makeText(this, &quot;Câu hỏi đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#10;        clearQuestionForm();&#10;    }&#10;&#10;    private void saveQuiz() {&#10;        // Implementation similar to saveLesson&#10;        Toast.makeText(this, &quot;Quiz đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void previewQuiz() {&#10;        Intent intent = new Intent(this, QuizActivity.class);&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void addWord() {&#10;        String word = etWord != null ? etWord.getText().toString().trim() : &quot;&quot;;&#10;        String meaning = etMeaning != null ? etMeaning.getText().toString().trim() : &quot;&quot;;&#10;        String example = etExample != null ? etExample.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (word.isEmpty() || meaning.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập từ và nghĩa&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Add word to vocabulary list&#10;        Toast.makeText(this, &quot;Từ vựng đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#10;        clearVocabularyForm();&#10;    }&#10;&#10;    private void saveVocabularyList() {&#10;        Toast.makeText(this, &quot;Danh sách từ vựng đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void publishContent() {&#10;        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Xuất bản nội dung&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xuất bản nội dung này? Học viên sẽ có thể truy cập.&quot;)&#10;                .setPositiveButton(&quot;Xuất bản&quot;, (dialog, which) -&gt; {&#10;                    Toast.makeText(this, &quot;Nội dung đã được xuất bản!&quot;, Toast.LENGTH_SHORT).show();&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void clearLessonForm() {&#10;        if (etLessonTitle != null) etLessonTitle.setText(&quot;&quot;);&#10;        if (etLessonDescription != null) etLessonDescription.setText(&quot;&quot;);&#10;        if (etLessonContent != null) etLessonContent.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void clearQuestionForm() {&#10;        if (etQuestion != null) etQuestion.setText(&quot;&quot;);&#10;        if (etOption1 != null) etOption1.setText(&quot;&quot;);&#10;        if (etOption2 != null) etOption2.setText(&quot;&quot;);&#10;        if (etOption3 != null) etOption3.setText(&quot;&quot;);&#10;        if (etOption4 != null) etOption4.setText(&quot;&quot;);&#10;        if (rgCorrectAnswer != null) rgCorrectAnswer.clearCheck();&#10;    }&#10;&#10;    private void clearVocabularyForm() {&#10;        if (etWord != null) etWord.setText(&quot;&quot;);&#10;        if (etMeaning != null) etMeaning.setText(&quot;&quot;);&#10;        if (etExample != null) etExample.setText(&quot;&quot;);&#10;        if (etPronunciation != null) etPronunciation.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void loadExistingContent() {&#10;        updateContentCount();&#10;    }&#10;&#10;    private void updateContentCount() {&#10;        if (teacherId != null) {&#10;            db.collection(&quot;content&quot;)&#10;                    .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                    .get()&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                        int count = queryDocumentSnapshots.size();&#10;                        if (tvContentCount != null) {&#10;                            tvContentCount.setText(&quot;Đã tạo: &quot; + count + &quot; nội dung&quot;);&#10;                        }&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        Intent intent = new Intent(this, TeacherDashboardActivity.class);&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.RadioButton;&#13;&#10;import android.widget.RadioGroup;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import androidx.cardview.widget.CardView;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#13;&#10;import com.google.android.material.tabs.TabLayout;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class ContentCreationActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private TabLayout tabLayout;&#13;&#10;    private CardView cardLessonCreation, cardQuizCreation, cardVocabularyList;&#13;&#10;    private LinearLayout layoutLessonForm, layoutQuizForm, layoutVocabularyForm;&#13;&#10;&#13;&#10;    // Lesson creation components&#13;&#10;    private EditText etLessonTitle, etLessonDescription, etLessonContent;&#13;&#10;    private Spinner spinnerLessonCategory, spinnerDifficulty;&#13;&#10;    private Button btnSaveLesson, btnPreviewLesson;&#13;&#10;&#13;&#10;    // Quiz creation components&#13;&#10;    private EditText etQuizTitle, etQuizDescription;&#13;&#10;    private EditText etQuestion, etOption1, etOption2, etOption3, etOption4;&#13;&#10;    private RadioGroup rgCorrectAnswer;&#13;&#10;    private RecyclerView rvQuestions;&#13;&#10;    private Button btnAddQuestion, btnSaveQuiz, btnPreviewQuiz;&#13;&#10;&#13;&#10;    // Vocabulary components&#13;&#10;    private EditText etWord, etMeaning, etExample, etPronunciation;&#13;&#10;    private Spinner spinnerWordCategory;&#13;&#10;    private Button btnAddWord, btnSaveVocabulary;&#13;&#10;    private RecyclerView rvVocabularyList;&#13;&#10;&#13;&#10;    private FloatingActionButton fabPublish;&#13;&#10;    private TextView tvContentCount;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String mode; // &quot;lesson&quot;, &quot;quiz&quot;, &quot;vocabulary&quot;&#13;&#10;    private String teacherId;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_content_creation);&#13;&#10;&#13;&#10;        // Get mode from intent&#13;&#10;        mode = getIntent().getStringExtra(&quot;mode&quot;);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        if (mAuth.getCurrentUser() != null) {&#13;&#10;            teacherId = mAuth.getCurrentUser().getUid();&#13;&#10;        }&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupTabs();&#13;&#10;        setupClickListeners();&#13;&#10;        handleModeSpecificSetup();&#13;&#10;        loadExistingContent();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        tabLayout = findViewById(R.id.tab_layout);&#13;&#10;&#13;&#10;        // Cards&#13;&#10;        cardLessonCreation = findViewById(R.id.card_lesson_creation);&#13;&#10;        cardQuizCreation = findViewById(R.id.card_quiz_creation);&#13;&#10;        cardVocabularyList = findViewById(R.id.card_vocabulary_list);&#13;&#10;&#13;&#10;        // Layouts&#13;&#10;        layoutLessonForm = findViewById(R.id.layout_lesson_form);&#13;&#10;        layoutQuizForm = findViewById(R.id.layout_quiz_form);&#13;&#10;        layoutVocabularyForm = findViewById(R.id.layout_vocabulary_form);&#13;&#10;&#13;&#10;        // Lesson creation&#13;&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#13;&#10;        etLessonDescription = findViewById(R.id.et_lesson_description);&#13;&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#13;&#10;        spinnerLessonCategory = findViewById(R.id.spinner_lesson_category);&#13;&#10;        spinnerDifficulty = findViewById(R.id.spinner_difficulty);&#13;&#10;        btnSaveLesson = findViewById(R.id.btn_save_lesson);&#13;&#10;        btnPreviewLesson = findViewById(R.id.btn_preview_lesson);&#13;&#10;&#13;&#10;        // Quiz creation&#13;&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#13;&#10;        etQuizDescription = findViewById(R.id.et_quiz_description);&#13;&#10;        etQuestion = findViewById(R.id.et_question);&#13;&#10;        etOption1 = findViewById(R.id.et_option1);&#13;&#10;        etOption2 = findViewById(R.id.et_option2);&#13;&#10;        etOption3 = findViewById(R.id.et_option3);&#13;&#10;        etOption4 = findViewById(R.id.et_option4);&#13;&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#13;&#10;        rvQuestions = findViewById(R.id.rv_questions);&#13;&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#13;&#10;        btnSaveQuiz = findViewById(R.id.btn_save_quiz);&#13;&#10;        btnPreviewQuiz = findViewById(R.id.btn_preview_quiz);&#13;&#10;&#13;&#10;        // Vocabulary&#13;&#10;        etWord = findViewById(R.id.et_word);&#13;&#10;        etMeaning = findViewById(R.id.et_meaning);&#13;&#10;        etExample = findViewById(R.id.et_example);&#13;&#10;        etPronunciation = findViewById(R.id.et_pronunciation);&#13;&#10;        spinnerWordCategory = findViewById(R.id.spinner_word_category);&#13;&#10;        btnAddWord = findViewById(R.id.btn_add_word);&#13;&#10;        btnSaveVocabulary = findViewById(R.id.btn_save_vocabulary);&#13;&#10;        rvVocabularyList = findViewById(R.id.rv_vocabulary_list);&#13;&#10;&#13;&#10;        // Other components&#13;&#10;        fabPublish = findViewById(R.id.fab_publish);&#13;&#10;        tvContentCount = findViewById(R.id.tv_content_count);&#13;&#10;&#13;&#10;        // Setup RecyclerViews&#13;&#10;        if (rvQuestions != null) {&#13;&#10;            rvQuestions.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        }&#13;&#10;        if (rvVocabularyList != null) {&#13;&#10;            rvVocabularyList.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;            getSupportActionBar().setDisplayShowHomeEnabled(true);&#13;&#10;            getSupportActionBar().setTitle(&quot;Tạo nội dung&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupTabs() {&#13;&#10;        if (tabLayout != null) {&#13;&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Bài học&quot;));&#13;&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Quiz&quot;));&#13;&#10;            tabLayout.addTab(tabLayout.newTab().setText(&quot;Từ vựng&quot;));&#13;&#10;&#13;&#10;            tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {&#13;&#10;                @Override&#13;&#10;                public void onTabSelected(TabLayout.Tab tab) {&#13;&#10;                    switchContentType(tab.getPosition());&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onTabUnselected(TabLayout.Tab tab) {}&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onTabReselected(TabLayout.Tab tab) {}&#13;&#10;            });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        // Lesson creation&#13;&#10;        if (btnSaveLesson != null) {&#13;&#10;            btnSaveLesson.setOnClickListener(v -&gt; saveLesson());&#13;&#10;        }&#13;&#10;        if (btnPreviewLesson != null) {&#13;&#10;            btnPreviewLesson.setOnClickListener(v -&gt; previewLesson());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Quiz creation&#13;&#10;        if (btnAddQuestion != null) {&#13;&#10;            btnAddQuestion.setOnClickListener(v -&gt; addQuestion());&#13;&#10;        }&#13;&#10;        if (btnSaveQuiz != null) {&#13;&#10;            btnSaveQuiz.setOnClickListener(v -&gt; saveQuiz());&#13;&#10;        }&#13;&#10;        if (btnPreviewQuiz != null) {&#13;&#10;            btnPreviewQuiz.setOnClickListener(v -&gt; previewQuiz());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Vocabulary&#13;&#10;        if (btnAddWord != null) {&#13;&#10;            btnAddWord.setOnClickListener(v -&gt; addWord());&#13;&#10;        }&#13;&#10;        if (btnSaveVocabulary != null) {&#13;&#10;            btnSaveVocabulary.setOnClickListener(v -&gt; saveVocabularyList());&#13;&#10;        }&#13;&#10;&#13;&#10;        // FAB&#13;&#10;        if (fabPublish != null) {&#13;&#10;            fabPublish.setOnClickListener(v -&gt; publishContent());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleModeSpecificSetup() {&#13;&#10;        if (&quot;lesson&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#13;&#10;            tabLayout.getTabAt(0).select();&#13;&#10;            switchContentType(0);&#13;&#10;        } else if (&quot;quiz&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#13;&#10;            tabLayout.getTabAt(1).select();&#13;&#10;            switchContentType(1);&#13;&#10;        } else if (&quot;vocabulary&quot;.equals(mode) &amp;&amp; tabLayout != null) {&#13;&#10;            tabLayout.getTabAt(2).select();&#13;&#10;            switchContentType(2);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void switchContentType(int position) {&#13;&#10;        // Hide all layouts first&#13;&#10;        hideAllLayouts();&#13;&#10;&#13;&#10;        switch (position) {&#13;&#10;            case 0: // Lesson&#13;&#10;                if (layoutLessonForm != null) {&#13;&#10;                    layoutLessonForm.setVisibility(View.VISIBLE);&#13;&#10;                }&#13;&#10;                break;&#13;&#10;            case 1: // Quiz&#13;&#10;                if (layoutQuizForm != null) {&#13;&#10;                    layoutQuizForm.setVisibility(View.VISIBLE);&#13;&#10;                }&#13;&#10;                break;&#13;&#10;            case 2: // Vocabulary&#13;&#10;                if (layoutVocabularyForm != null) {&#13;&#10;                    layoutVocabularyForm.setVisibility(View.VISIBLE);&#13;&#10;                }&#13;&#10;                break;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void hideAllLayouts() {&#13;&#10;        if (layoutLessonForm != null) layoutLessonForm.setVisibility(View.GONE);&#13;&#10;        if (layoutQuizForm != null) layoutQuizForm.setVisibility(View.GONE);&#13;&#10;        if (layoutVocabularyForm != null) layoutVocabularyForm.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveLesson() {&#13;&#10;        if (teacherId == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không thể xác định giáo viên&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String title = etLessonTitle != null ? etLessonTitle.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String description = etLessonDescription != null ? etLessonDescription.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String content = etLessonContent != null ? etLessonContent.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (title.isEmpty() || content.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng nhập đầy đủ tiêu đề và nội dung&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#13;&#10;        lessonData.put(&quot;teacherId&quot;, teacherId);&#13;&#10;        lessonData.put(&quot;title&quot;, title);&#13;&#10;        lessonData.put(&quot;description&quot;, description);&#13;&#10;        lessonData.put(&quot;content&quot;, content);&#13;&#10;        lessonData.put(&quot;type&quot;, &quot;lesson&quot;);&#13;&#10;        lessonData.put(&quot;createdAt&quot;, System.currentTimeMillis());&#13;&#10;        lessonData.put(&quot;status&quot;, &quot;draft&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;content&quot;)&#13;&#10;                .add(lessonData)&#13;&#10;                .addOnSuccessListener(documentReference -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Bài học đã được lưu thành công!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    clearLessonForm();&#13;&#10;                    updateContentCount();&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void previewLesson() {&#13;&#10;        Intent intent = new Intent(this, CourseListActivity.class);&#13;&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#13;&#10;        intent.putExtra(&quot;title&quot;, etLessonTitle != null ? etLessonTitle.getText().toString() : &quot;&quot;);&#13;&#10;        startActivity(intent);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addQuestion() {&#13;&#10;        String question = etQuestion != null ? etQuestion.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option1 = etOption1 != null ? etOption1.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option2 = etOption2 != null ? etOption2.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option3 = etOption3 != null ? etOption3.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String option4 = etOption4 != null ? etOption4.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (question.isEmpty() || option1.isEmpty() || option2.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng nhập câu hỏi và ít nhất 2 đáp án&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        int correctAnswer = 0;&#13;&#10;        if (rgCorrectAnswer != null &amp;&amp; rgCorrectAnswer.getCheckedRadioButtonId() != -1) {&#13;&#10;            RadioButton selectedButton = findViewById(rgCorrectAnswer.getCheckedRadioButtonId());&#13;&#10;            // Logic to determine correct answer index&#13;&#10;        }&#13;&#10;&#13;&#10;        // Add question to list (implementation would involve adapter)&#13;&#10;        Toast.makeText(this, &quot;Câu hỏi đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;        clearQuestionForm();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveQuiz() {&#13;&#10;        // Implementation similar to saveLesson&#13;&#10;        Toast.makeText(this, &quot;Quiz đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void previewQuiz() {&#13;&#10;        Intent intent = new Intent(this, QuizActivity.class);&#13;&#10;        intent.putExtra(&quot;mode&quot;, &quot;preview&quot;);&#13;&#10;        startActivity(intent);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addWord() {&#13;&#10;        String word = etWord != null ? etWord.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String meaning = etMeaning != null ? etMeaning.getText().toString().trim() : &quot;&quot;;&#13;&#10;        String example = etExample != null ? etExample.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (word.isEmpty() || meaning.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng nhập từ và nghĩa&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Add word to vocabulary list&#13;&#10;        Toast.makeText(this, &quot;Từ vựng đã được thêm&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;        clearVocabularyForm();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveVocabularyList() {&#13;&#10;        Toast.makeText(this, &quot;Danh sách từ vựng đã được lưu&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void publishContent() {&#13;&#10;        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this);&#13;&#10;        builder.setTitle(&quot;Xuất bản nội dung&quot;)&#13;&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xuất bản nội dung này? Học viên sẽ có thể truy cập.&quot;)&#13;&#10;                .setPositiveButton(&quot;Xuất bản&quot;, (dialog, which) -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;Nội dung đã được xuất bản!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                })&#13;&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#13;&#10;                .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void clearLessonForm() {&#13;&#10;        if (etLessonTitle != null) etLessonTitle.setText(&quot;&quot;);&#13;&#10;        if (etLessonDescription != null) etLessonDescription.setText(&quot;&quot;);&#13;&#10;        if (etLessonContent != null) etLessonContent.setText(&quot;&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void clearQuestionForm() {&#13;&#10;        if (etQuestion != null) etQuestion.setText(&quot;&quot;);&#13;&#10;        if (etOption1 != null) etOption1.setText(&quot;&quot;);&#13;&#10;        if (etOption2 != null) etOption2.setText(&quot;&quot;);&#13;&#10;        if (etOption3 != null) etOption3.setText(&quot;&quot;);&#13;&#10;        if (etOption4 != null) etOption4.setText(&quot;&quot;);&#13;&#10;        if (rgCorrectAnswer != null) rgCorrectAnswer.clearCheck();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void clearVocabularyForm() {&#13;&#10;        if (etWord != null) etWord.setText(&quot;&quot;);&#13;&#10;        if (etMeaning != null) etMeaning.setText(&quot;&quot;);&#13;&#10;        if (etExample != null) etExample.setText(&quot;&quot;);&#13;&#10;        if (etPronunciation != null) etPronunciation.setText(&quot;&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadExistingContent() {&#13;&#10;        updateContentCount();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateContentCount() {&#13;&#10;        if (teacherId != null) {&#13;&#10;            db.collection(&quot;content&quot;)&#13;&#10;                    .whereEqualTo(&quot;teacherId&quot;, teacherId)&#13;&#10;                    .get()&#13;&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                        int count = queryDocumentSnapshots.size();&#13;&#10;                        if (tvContentCount != null) {&#13;&#10;                            tvContentCount.setText(&quot;Đã tạo: &quot; + count + &quot; nội dung&quot;);&#13;&#10;                        }&#13;&#10;                    });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            onBackPressed();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBackPressed() {&#13;&#10;        super.onBackPressed();&#13;&#10;        Intent intent = new Intent(this, TeacherDashboardActivity.class);&#13;&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#13;&#10;        startActivity(intent);&#13;&#10;        finish();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseStudent.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseStudent.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import java.util.Date;&#10;&#10;public class CourseStudent {&#10;    private String studentId;&#10;    private String studentName;&#10;    private String studentEmail;&#10;    private Date enrollmentDate;&#10;    private String enrollmentId;&#10;    private int totalQuizzes;&#10;    private int completedQuizzes;&#10;    private double averageScore;&#10;    private double progress; // Percentage&#10;    private Date lastActivity;&#10;&#10;    // Constructors&#10;    public CourseStudent() {}&#10;&#10;    public CourseStudent(String studentId, String studentName, String studentEmail) {&#10;        this.studentId = studentId;&#10;        this.studentName = studentName;&#10;        this.studentEmail = studentEmail;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getStudentName() {&#10;        return studentName;&#10;    }&#10;&#10;    public void setStudentName(String studentName) {&#10;        this.studentName = studentName;&#10;    }&#10;&#10;    public String getStudentEmail() {&#10;        return studentEmail;&#10;    }&#10;&#10;    public void setStudentEmail(String studentEmail) {&#10;        this.studentEmail = studentEmail;&#10;    }&#10;&#10;    public Date getEnrollmentDate() {&#10;        return enrollmentDate;&#10;    }&#10;&#10;    public void setEnrollmentDate(Date enrollmentDate) {&#10;        this.enrollmentDate = enrollmentDate;&#10;    }&#10;&#10;    public String getEnrollmentId() {&#10;        return enrollmentId;&#10;    }&#10;&#10;    public void setEnrollmentId(String enrollmentId) {&#10;        this.enrollmentId = enrollmentId;&#10;    }&#10;&#10;    public int getTotalQuizzes() {&#10;        return totalQuizzes;&#10;    }&#10;&#10;    public void setTotalQuizzes(int totalQuizzes) {&#10;        this.totalQuizzes = totalQuizzes;&#10;    }&#10;&#10;    public int getCompletedQuizzes() {&#10;        return completedQuizzes;&#10;    }&#10;&#10;    public void setCompletedQuizzes(int completedQuizzes) {&#10;        this.completedQuizzes = completedQuizzes;&#10;    }&#10;&#10;    public double getAverageScore() {&#10;        return averageScore;&#10;    }&#10;&#10;    public void setAverageScore(double averageScore) {&#10;        this.averageScore = averageScore;&#10;    }&#10;&#10;    public double getProgress() {&#10;        return progress;&#10;    }&#10;&#10;    public void setProgress(double progress) {&#10;        this.progress = progress;&#10;    }&#10;&#10;    public Date getLastActivity() {&#10;        return lastActivity;&#10;    }&#10;&#10;    public void setLastActivity(Date lastActivity) {&#10;        this.lastActivity = lastActivity;&#10;    }&#10;&#10;    // Helper methods&#10;    public String getProgressText() {&#10;        return String.format(&quot;%.1f%%&quot;, progress);&#10;    }&#10;&#10;    public String getScoreText() {&#10;        return String.format(&quot;%.1f điểm&quot;, averageScore);&#10;    }&#10;&#10;    public String getQuizProgressText() {&#10;        return completedQuizzes + &quot;/&quot; + totalQuizzes + &quot; bài kiểm tra&quot;;&#10;    }&#10;&#10;    public String getProgressStatus() {&#10;        if (progress &gt;= 100) {&#10;            return &quot;Hoàn thành&quot;;&#10;        } else if (progress &gt;= 50) {&#10;            return &quot;Đang tiến bộ&quot;;&#10;        } else if (progress &gt; 0) {&#10;            return &quot;Mới bắt đầu&quot;;&#10;        } else {&#10;            return &quot;Chưa bắt đầu&quot;;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import java.util.Date;&#13;&#10;&#13;&#10;public class CourseStudent {&#13;&#10;    private String studentId;&#13;&#10;    private String studentName;&#13;&#10;    private String studentEmail;&#13;&#10;    private Date enrollmentDate;&#13;&#10;    private String enrollmentId;&#13;&#10;    private String status; // Thêm field status&#13;&#10;    private int totalQuizzes;&#13;&#10;    private int completedQuizzes;&#13;&#10;    private double averageScore;&#13;&#10;    private double progress; // Percentage&#13;&#10;    private Date lastActivity;&#13;&#10;&#13;&#10;    // Constructors&#13;&#10;    public CourseStudent() {}&#13;&#10;&#13;&#10;    public CourseStudent(String studentId, String studentName, String studentEmail) {&#13;&#10;        this.studentId = studentId;&#13;&#10;        this.studentName = studentName;&#13;&#10;        this.studentEmail = studentEmail;&#13;&#10;        this.status = &quot;approved&quot;; // Default status&#13;&#10;    }&#13;&#10;&#13;&#10;    // Getters and Setters&#13;&#10;    public String getStudentId() {&#13;&#10;        return studentId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setStudentId(String studentId) {&#13;&#10;        this.studentId = studentId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getStudentName() {&#13;&#10;        return studentName;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setStudentName(String studentName) {&#13;&#10;        this.studentName = studentName;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getStudentEmail() {&#13;&#10;        return studentEmail;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setStudentEmail(String studentEmail) {&#13;&#10;        this.studentEmail = studentEmail;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Date getEnrollmentDate() {&#13;&#10;        return enrollmentDate;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setEnrollmentDate(Date enrollmentDate) {&#13;&#10;        this.enrollmentDate = enrollmentDate;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getEnrollmentId() {&#13;&#10;        return enrollmentId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setEnrollmentId(String enrollmentId) {&#13;&#10;        this.enrollmentId = enrollmentId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getStatus() { // Thêm getter cho status&#13;&#10;        return status;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setStatus(String status) { // Thêm setter cho status&#13;&#10;        this.status = status;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getTotalQuizzes() {&#13;&#10;        return totalQuizzes;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setTotalQuizzes(int totalQuizzes) {&#13;&#10;        this.totalQuizzes = totalQuizzes;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getCompletedQuizzes() {&#13;&#10;        return completedQuizzes;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setCompletedQuizzes(int completedQuizzes) {&#13;&#10;        this.completedQuizzes = completedQuizzes;&#13;&#10;    }&#13;&#10;&#13;&#10;    public double getAverageScore() {&#13;&#10;        return averageScore;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setAverageScore(double averageScore) {&#13;&#10;        this.averageScore = averageScore;&#13;&#10;    }&#13;&#10;&#13;&#10;    public double getProgress() {&#13;&#10;        return progress;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setProgress(double progress) {&#13;&#10;        this.progress = progress;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Date getLastActivity() {&#13;&#10;        return lastActivity;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setLastActivity(Date lastActivity) {&#13;&#10;        this.lastActivity = lastActivity;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Helper methods&#13;&#10;    public String getProgressText() {&#13;&#10;        return String.format(&quot;%.1f%%&quot;, progress);&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getScoreText() {&#13;&#10;        return String.format(&quot;%.1f điểm&quot;, averageScore);&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getQuizProgressText() {&#13;&#10;        return completedQuizzes + &quot;/&quot; + totalQuizzes + &quot; bài kiểm tra&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getProgressStatus() {&#13;&#10;        if (progress &gt;= 100) {&#13;&#10;            return &quot;Hoàn thành&quot;;&#13;&#10;        } else if (progress &gt;= 50) {&#13;&#10;            return &quot;Đang tiến bộ&quot;;&#13;&#10;        } else if (progress &gt; 0) {&#13;&#10;            return &quot;Mới bắt đầu&quot;;&#13;&#10;        } else {&#13;&#10;            return &quot;Chưa bắt đầu&quot;;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseStudentsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CourseStudentsActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class CourseStudentsActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvStudents;&#10;    private TextView tvNoStudents, tvCourseTitle;&#10;    private ProgressBar progressBar;&#10;    private BottomNavigationView bottomNavigation;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;CourseStudent&gt; studentList;&#10;    private CourseStudentAdapter studentAdapter;&#10;    private String courseId, courseTitle;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_course_students);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        studentList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupBottomNavigation();&#10;        setupRecyclerView();&#10;        loadStudents();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#10;        rvStudents = findViewById(R.id.rv_students);&#10;        layoutNoStudents = findViewById(R.id.tv_no_students); // Sử dụng ID đúng từ layout XML&#10;        tvNoStudents = findViewById(R.id.tv_no_students);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;&#10;        if (courseTitle != null) {&#10;            tvCourseTitle.setText(courseTitle);&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Danh sách học viên&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setSelectedItemId(R.id.nav_students);&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                startActivity(new Intent(this, CourseManagementActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_students) {&#10;                // Already on students&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        studentAdapter = new CourseStudentAdapter(studentList, new CourseStudentAdapter.OnStudentActionListener() {&#10;            @Override&#10;            public void onViewProgress(CourseStudent student) {&#10;                Intent intent = new Intent(CourseStudentsActivity.this, StudentProgressDetailActivity.class);&#10;                intent.putExtra(&quot;studentId&quot;, student.getStudentId());&#10;                intent.putExtra(&quot;studentName&quot;, student.getStudentName());&#10;                intent.putExtra(&quot;courseId&quot;, courseId);&#10;                intent.putExtra(&quot;courseName&quot;, courseTitle);&#10;                startActivity(intent);&#10;            }&#10;&#10;            @Override&#10;            public void onRemoveStudent(CourseStudent student) {&#10;                showRemoveStudentDialog(student);&#10;            }&#10;&#10;            @Override&#10;            public void onSendMessage(CourseStudent student) {&#10;                // TODO: Implement messaging functionality&#10;                Toast.makeText(CourseStudentsActivity.this, &quot;Chức năng nhắn tin đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;        rvStudents.setLayoutManager(new LinearLayoutManager(this));&#10;        rvStudents.setAdapter(studentAdapter);&#10;    }&#10;&#10;    private void loadStudents() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Load students từ courseRequests với status &quot;approved&quot; cho courseId này&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful()) {&#10;                        studentList.clear();&#10;&#10;                        if (task.getResult().isEmpty()) {&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;No approved requests found for courseId: &quot; + courseId);&#10;                            updateUI();&#10;                            progressBar.setVisibility(View.GONE);&#10;                            return;&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Found &quot; + task.getResult().size() + &quot; approved requests for courseId: &quot; + courseId);&#10;&#10;                        for (QueryDocumentSnapshot doc : task.getResult()) {&#10;                            // Lấy dữ liệu trực tiếp từ courseRequests&#10;                            String studentName = doc.getString(&quot;studentName&quot;);&#10;                            String studentId = doc.getString(&quot;studentId&quot;);&#10;                            String studentEmail = doc.getString(&quot;studentEmail&quot;);&#10;                            String courseName = doc.getString(&quot;courseName&quot;);&#10;&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;Processing approved request - Student: &quot; + studentName +&#10;                                  &quot;, StudentId: &quot; + studentId + &quot;, Course: &quot; + courseName);&#10;&#10;                            // Tạo CourseStudent object&#10;                            CourseStudent student = new CourseStudent();&#10;                            student.setStudentId(studentId);&#10;                            student.setStudentName(studentName);&#10;                            student.setStudentEmail(studentEmail);&#10;                            student.setEnrollmentDate(new java.util.Date()); // Có thể lấy từ timestamp nếu có&#10;&#10;                            studentList.add(student);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Added &quot; + studentList.size() + &quot; students to list&quot;);&#10;                        updateUI();&#10;                        progressBar.setVisibility(View.GONE);&#10;&#10;                    } else {&#10;                        android.util.Log.e(&quot;CourseStudents&quot;, &quot;Error loading approved requests&quot;, task.getException());&#10;                        progressBar.setVisibility(View.GONE);&#10;                        Toast.makeText(this, &quot;Lỗi tải danh sách học viên: &quot; +&#10;                            (task.getException() != null ? task.getException().getMessage() : &quot;Unknown error&quot;),&#10;                            Toast.LENGTH_SHORT).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void showRemoveStudentDialog(CourseStudent student) {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xác nhận xóa học viên&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa &quot; + student.getStudentName() + &quot; khỏi khóa học này?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; removeStudent(student))&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void removeStudent(CourseStudent student) {&#10;        if (student.getEnrollmentId() == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin đăng ký&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Update enrollment status to REMOVED instead of deleting&#10;        db.collection(&quot;enrollments&quot;).document(student.getEnrollmentId())&#10;                .update(&quot;status&quot;, &quot;REMOVED&quot;)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Đã xóa học viên khỏi khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadStudents(); // Reload the list&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (studentList.isEmpty()) {&#10;            layoutNoStudents.setVisibility(View.VISIBLE);&#10;            rvStudents.setVisibility(View.GONE);&#10;            tvNoStudents.setVisibility(View.VISIBLE);&#10;            layoutNoStudents.setVisibility(View.GONE);&#10;            rvStudents.setVisibility(View.VISIBLE);&#10;            tvNoStudents.setVisibility(View.GONE);&#10;        studentAdapter.notifyDataSetChanged();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class CourseStudentsActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private RecyclerView rvStudents;&#13;&#10;    private LinearLayout layoutNoStudents;  // Đổi từ TextView thành LinearLayout&#13;&#10;    private TextView tvCourseTitle;&#13;&#10;    private ProgressBar progressBar;&#13;&#10;    private BottomNavigationView bottomNavigation;&#13;&#10;    private Toolbar toolbar;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private List&lt;CourseStudent&gt; studentList;&#13;&#10;    private CourseStudentAdapter studentAdapter;&#13;&#10;    private String courseId, courseTitle;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_course_students);&#13;&#10;&#13;&#10;        // Get course info from intent&#13;&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#13;&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#13;&#10;&#13;&#10;        if (courseId == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            finish();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;        studentList = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupBottomNavigation();&#13;&#10;        setupRecyclerView();&#13;&#10;        loadStudents();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#13;&#10;        rvStudents = findViewById(R.id.rv_students);&#13;&#10;        layoutNoStudents = findViewById(R.id.tv_no_students); // Sử dụng ID đúng từ layout XML&#13;&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#13;&#10;        progressBar = findViewById(R.id.progress_bar);&#13;&#10;&#13;&#10;        if (courseTitle != null) {&#13;&#10;            tvCourseTitle.setText(courseTitle);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Danh sách học viên&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupBottomNavigation() {&#13;&#10;        bottomNavigation.setSelectedItemId(R.id.nav_students);&#13;&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#13;&#10;            int itemId = item.getItemId();&#13;&#10;            if (itemId == R.id.nav_home) {&#13;&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_courses) {&#13;&#10;                startActivity(new Intent(this, CourseManagementActivity.class));&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_students) {&#13;&#10;                // Already on students&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_profile) {&#13;&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#13;&#10;                return true;&#13;&#10;            }&#13;&#10;            return false;&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupRecyclerView() {&#13;&#10;        studentAdapter = new CourseStudentAdapter(studentList, new CourseStudentAdapter.OnStudentActionListener() {&#13;&#10;            @Override&#13;&#10;            public void onViewProgress(CourseStudent student) {&#13;&#10;                Intent intent = new Intent(CourseStudentsActivity.this, StudentProgressDetailActivity.class);&#13;&#10;                intent.putExtra(&quot;studentId&quot;, student.getStudentId());&#13;&#10;                intent.putExtra(&quot;studentName&quot;, student.getStudentName());&#13;&#10;                intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;                intent.putExtra(&quot;courseName&quot;, courseTitle);&#13;&#10;                startActivity(intent);&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onRemoveStudent(CourseStudent student) {&#13;&#10;                showRemoveStudentDialog(student);&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onSendMessage(CourseStudent student) {&#13;&#10;                // TODO: Implement messaging functionality&#13;&#10;                Toast.makeText(CourseStudentsActivity.this, &quot;Chức năng nhắn tin đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            }&#13;&#10;        }, courseId); // Thêm courseId vào constructor&#13;&#10;        rvStudents.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        rvStudents.setAdapter(studentAdapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadStudents() {&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        // Load students từ courseRequests với status &quot;approved&quot; cho courseId này&#13;&#10;        db.collection(&quot;courseRequests&quot;)&#13;&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#13;&#10;                .get()&#13;&#10;                .addOnCompleteListener(task -&gt; {&#13;&#10;                    if (task.isSuccessful()) {&#13;&#10;                        studentList.clear();&#13;&#10;&#13;&#10;                        if (task.getResult().isEmpty()) {&#13;&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;No approved requests found for courseId: &quot; + courseId);&#13;&#10;                            updateUI();&#13;&#10;                            progressBar.setVisibility(View.GONE);&#13;&#10;                            return;&#13;&#10;                        }&#13;&#10;&#13;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Found &quot; + task.getResult().size() + &quot; approved requests for courseId: &quot; + courseId);&#13;&#10;&#13;&#10;                        for (QueryDocumentSnapshot doc : task.getResult()) {&#13;&#10;                            // Lấy dữ liệu trực tiếp từ courseRequests&#13;&#10;                            String studentName = doc.getString(&quot;studentName&quot;);&#13;&#10;                            String studentId = doc.getString(&quot;studentId&quot;);&#13;&#10;                            String studentEmail = doc.getString(&quot;studentEmail&quot;);&#13;&#10;                            String courseName = doc.getString(&quot;courseName&quot;);&#13;&#10;&#13;&#10;                            android.util.Log.d(&quot;CourseStudents&quot;, &quot;Processing approved request - Student: &quot; + studentName +&#13;&#10;                                  &quot;, StudentId: &quot; + studentId + &quot;, Course: &quot; + courseName);&#13;&#10;&#13;&#10;                            // Tạo CourseStudent object&#13;&#10;                            CourseStudent student = new CourseStudent();&#13;&#10;                            student.setStudentId(studentId);&#13;&#10;                            student.setStudentName(studentName);&#13;&#10;                            student.setStudentEmail(studentEmail);&#13;&#10;                            student.setEnrollmentDate(new java.util.Date()); // Có thể lấy từ timestamp nếu có&#13;&#10;&#13;&#10;                            studentList.add(student);&#13;&#10;                        }&#13;&#10;&#13;&#10;                        android.util.Log.d(&quot;CourseStudents&quot;, &quot;Added &quot; + studentList.size() + &quot; students to list&quot;);&#13;&#10;                        updateUI();&#13;&#10;                        progressBar.setVisibility(View.GONE);&#13;&#10;&#13;&#10;                    } else {&#13;&#10;                        android.util.Log.e(&quot;CourseStudents&quot;, &quot;Error loading approved requests&quot;, task.getException());&#13;&#10;                        progressBar.setVisibility(View.GONE);&#13;&#10;                        Toast.makeText(this, &quot;Lỗi tải danh sách học viên: &quot; +&#13;&#10;                            (task.getException() != null ? task.getException().getMessage() : &quot;Unknown error&quot;),&#13;&#10;                            Toast.LENGTH_SHORT).show();&#13;&#10;                    }&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showRemoveStudentDialog(CourseStudent student) {&#13;&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#13;&#10;                .setTitle(&quot;Xác nhận xóa học viên&quot;)&#13;&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa &quot; + student.getStudentName() + &quot; khỏi khóa học này?&quot;)&#13;&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; removeStudent(student))&#13;&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#13;&#10;                .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void removeStudent(CourseStudent student) {&#13;&#10;        if (student.getEnrollmentId() == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin đăng ký&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        // Update enrollment status to REMOVED instead of deleting&#13;&#10;        db.collection(&quot;enrollments&quot;).document(student.getEnrollmentId())&#13;&#10;                .update(&quot;status&quot;, &quot;REMOVED&quot;)&#13;&#10;                .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                    progressBar.setVisibility(View.GONE);&#13;&#10;                    Toast.makeText(this, &quot;Đã xóa học viên khỏi khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    loadStudents(); // Reload the list&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    progressBar.setVisibility(View.GONE);&#13;&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa học viên&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateUI() {&#13;&#10;        if (studentList.isEmpty()) {&#13;&#10;            layoutNoStudents.setVisibility(View.VISIBLE);&#13;&#10;            rvStudents.setVisibility(View.GONE);&#13;&#10;        } else {&#13;&#10;            layoutNoStudents.setVisibility(View.GONE);&#13;&#10;            rvStudents.setVisibility(View.VISIBLE);&#13;&#10;        }&#13;&#10;        studentAdapter.notifyDataSetChanged();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateLessonActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateLessonActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class CreateLessonActivity extends AppCompatActivity {&#10;&#10;    private TextInputEditText etLessonTitle, etLessonContent, etEstimatedTime;&#10;    private Spinner spinnerLessonType;&#10;    private Button btnCreateLesson, btnAddExample, btnAddUsage, btnAddNote;&#10;    private Toolbar toolbar;&#10;&#10;    // Grammar-specific fields&#10;    private LinearLayout layoutGrammarContent;&#10;    private TextInputEditText etGrammarRule, etGrammarStructure;&#10;    private LinearLayout layoutExamples, layoutUsage, layoutNotes;&#10;    private List&lt;TextInputEditText&gt; exampleInputs, usageInputs, noteInputs;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId, courseTitle, courseCategory;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_create_lesson);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupSpinners();&#10;        setupClickListeners();&#10;        loadCourseCategory();&#10;        addAnimations();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#10;        etEstimatedTime = findViewById(R.id.et_estimated_time);&#10;        spinnerLessonType = findViewById(R.id.spinner_lesson_type);&#10;        btnCreateLesson = findViewById(R.id.btn_create_lesson);&#10;&#10;        // Grammar-specific views - Kích hoạt lại các view&#10;        layoutGrammarContent = findViewById(R.id.layout_grammar_content);&#10;        etGrammarRule = findViewById(R.id.et_grammar_rule);&#10;        etGrammarStructure = findViewById(R.id.et_grammar_structure);&#10;        layoutExamples = findViewById(R.id.layout_examples);&#10;        layoutUsage = findViewById(R.id.layout_usage);&#10;        layoutNotes = findViewById(R.id.layout_notes);&#10;        btnAddExample = findViewById(R.id.btn_add_example);&#10;        btnAddUsage = findViewById(R.id.btn_add_usage);&#10;        btnAddNote = findViewById(R.id.btn_add_note);&#10;&#10;        // Initialize lists&#10;        exampleInputs = new ArrayList&lt;&gt;();&#10;        usageInputs = new ArrayList&lt;&gt;();&#10;        noteInputs = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Tạo bài học mới&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupSpinners() {&#10;        String[] lessonTypes = {&quot;text&quot;, &quot;video&quot;, &quot;audio&quot;, &quot;quiz&quot;};&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_spinner_item, lessonTypes);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerLessonType.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCreateLesson.setOnClickListener(v -&gt; createLesson());&#10;        btnAddExample.setOnClickListener(v -&gt; addExampleField());&#10;        btnAddUsage.setOnClickListener(v -&gt; addUsageField());&#10;        btnAddNote.setOnClickListener(v -&gt; addNoteField());&#10;    }&#10;&#10;    private void loadCourseCategory() {&#10;        if (courseId == null) return;&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                if (documentSnapshot.exists()) {&#10;                    courseCategory = documentSnapshot.getString(&quot;category&quot;);&#10;                    android.util.Log.d(&quot;CreateLesson&quot;, &quot;Course category: &quot; + courseCategory);&#10;&#10;                    // Show/hide grammar-specific fields based on category&#10;                    if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#10;                        layoutGrammarContent.setVisibility(View.VISIBLE);&#10;                        addInitialFields();&#10;                    } else {&#10;                        layoutGrammarContent.setVisibility(View.GONE);&#10;                    }&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error loading course category&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            });&#10;    }&#10;&#10;    private void addInitialFields() {&#10;        // Add initial example, usage, and note fields for Grammar lessons&#10;        addExampleField();&#10;        addUsageField();&#10;        addNoteField();&#10;    }&#10;&#10;    private void addExampleField() {&#10;        TextInputEditText etExample = new TextInputEditText(this);&#10;        etExample.setHint(&quot;Ví dụ &quot; + (exampleInputs.size() + 1));&#10;        etExample.setLayoutParams(new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#10;        etExample.setPadding(0, 8, 0, 8);&#10;&#10;        layoutExamples.addView(etExample);&#10;        exampleInputs.add(etExample);&#10;    }&#10;&#10;    private void addUsageField() {&#10;        TextInputEditText etUsage = new TextInputEditText(this);&#10;        etUsage.setHint(&quot;Cách sử dụng &quot; + (usageInputs.size() + 1));&#10;        etUsage.setLayoutParams(new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#10;        etUsage.setPadding(0, 8, 0, 8);&#10;&#10;        layoutUsage.addView(etUsage);&#10;        usageInputs.add(etUsage);&#10;    }&#10;&#10;    private void addNoteField() {&#10;        TextInputEditText etNote = new TextInputEditText(this);&#10;        etNote.setHint(&quot;Ghi chú &quot; + (noteInputs.size() + 1));&#10;        etNote.setLayoutParams(new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#10;        etNote.setPadding(0, 8, 0, 8);&#10;&#10;        layoutNotes.addView(etNote);&#10;        noteInputs.add(etNote);&#10;    }&#10;&#10;    private void addAnimations() {&#10;        // Add fade-in animation - Comment out vì không có main_content ID&#10;        // findViewById(R.id.main_content).setAlpha(0f);&#10;        // findViewById(R.id.main_content).animate()&#10;        //     .alpha(1f)&#10;        //     .setDuration(500)&#10;        //     .start();&#10;    }&#10;&#10;    private void createLesson() {&#10;        String title = etLessonTitle.getText().toString().trim();&#10;        String content = etLessonContent.getText().toString().trim();&#10;        String estimatedTimeStr = etEstimatedTime.getText().toString().trim();&#10;        String lessonType = spinnerLessonType.getSelectedItem().toString();&#10;&#10;        // Validation&#10;        if (TextUtils.isEmpty(title)) {&#10;            etLessonTitle.setError(&quot;Vui lòng nhập tiêu đề bài học&quot;);&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(content)) {&#10;            etLessonContent.setError(&quot;Vui lòng nhập nội dung bài học&quot;);&#10;            return;&#10;        }&#10;&#10;        int estimatedTime = 30; // default&#10;        if (!TextUtils.isEmpty(estimatedTimeStr)) {&#10;            try {&#10;                estimatedTime = Integer.parseInt(estimatedTimeStr);&#10;            } catch (NumberFormatException e) {&#10;                etEstimatedTime.setError(&quot;Thời gian ước tính phải là số&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Create lesson object&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#10;        lessonData.put(&quot;title&quot;, title);&#10;        lessonData.put(&quot;content&quot;, content);&#10;        lessonData.put(&quot;courseId&quot;, courseId);&#10;        lessonData.put(&quot;teacherId&quot;, mAuth.getCurrentUser().getUid());&#10;        lessonData.put(&quot;type&quot;, lessonType);&#10;        lessonData.put(&quot;category&quot;, courseCategory);&#10;        lessonData.put(&quot;estimatedTime&quot;, estimatedTime);&#10;        lessonData.put(&quot;createdAt&quot;, new Date());&#10;        lessonData.put(&quot;updatedAt&quot;, new Date());&#10;        lessonData.put(&quot;isPublished&quot;, false);&#10;&#10;        // Add grammar-specific data if this is a Grammar lesson&#10;        if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#10;            addGrammarData(lessonData);&#10;        }&#10;&#10;        // Get next order number&#10;        getNextOrderNumber(lessonData);&#10;    }&#10;&#10;    private void addGrammarData(Map&lt;String, Object&gt; lessonData) {&#10;        String grammarRule = etGrammarRule.getText().toString().trim();&#10;        String grammarStructure = etGrammarStructure.getText().toString().trim();&#10;&#10;        if (!TextUtils.isEmpty(grammarRule)) {&#10;            lessonData.put(&quot;grammarRule&quot;, grammarRule);&#10;        }&#10;&#10;        if (!TextUtils.isEmpty(grammarStructure)) {&#10;            lessonData.put(&quot;grammarStructure&quot;, grammarStructure);&#10;        }&#10;&#10;        // Collect examples&#10;        List&lt;String&gt; examples = new ArrayList&lt;&gt;();&#10;        for (TextInputEditText etExample : exampleInputs) {&#10;            String example = etExample.getText().toString().trim();&#10;            if (!TextUtils.isEmpty(example)) {&#10;                examples.add(example);&#10;            }&#10;        }&#10;        if (!examples.isEmpty()) {&#10;            lessonData.put(&quot;grammarExamples&quot;, examples);&#10;        }&#10;&#10;        // Collect usage notes&#10;        List&lt;String&gt; usage = new ArrayList&lt;&gt;();&#10;        for (TextInputEditText etUsage : usageInputs) {&#10;            String usageNote = etUsage.getText().toString().trim();&#10;            if (!TextUtils.isEmpty(usageNote)) {&#10;                usage.add(usageNote);&#10;            }&#10;        }&#10;        if (!usage.isEmpty()) {&#10;            lessonData.put(&quot;grammarUsage&quot;, usage);&#10;        }&#10;&#10;        // Collect notes&#10;        List&lt;String&gt; notes = new ArrayList&lt;&gt;();&#10;        for (TextInputEditText etNote : noteInputs) {&#10;            String note = etNote.getText().toString().trim();&#10;            if (!TextUtils.isEmpty(note)) {&#10;                notes.add(note);&#10;            }&#10;        }&#10;        if (!notes.isEmpty()) {&#10;            lessonData.put(&quot;grammarNotes&quot;, notes);&#10;        }&#10;    }&#10;&#10;    private void getNextOrderNumber(Map&lt;String, Object&gt; lessonData) {&#10;        db.collection(&quot;lessons&quot;)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                int nextOrder = queryDocumentSnapshots.size() + 1;&#10;                lessonData.put(&quot;order&quot;, nextOrder);&#10;                saveLessonToFirebase(lessonData);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                lessonData.put(&quot;order&quot;, 1);&#10;                saveLessonToFirebase(lessonData);&#10;            });&#10;    }&#10;&#10;    private void saveLessonToFirebase(Map&lt;String, Object&gt; lessonData) {&#10;        btnCreateLesson.setEnabled(false);&#10;        btnCreateLesson.setText(&quot;Đang tạo...&quot;);&#10;&#10;        db.collection(&quot;lessons&quot;)&#10;            .add(lessonData)&#10;            .addOnSuccessListener(documentReference -&gt; {&#10;                android.util.Log.d(&quot;CreateLesson&quot;, &quot;Lesson created with ID: &quot; + documentReference.getId());&#10;                Toast.makeText(this, &quot;Tạo bài học thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                finish();&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error creating lesson&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tạo bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                btnCreateLesson.setEnabled(true);&#10;                btnCreateLesson.setText(&quot;Tạo bài học&quot;);&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.text.TextUtils;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.android.material.textfield.TextInputEditText;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class CreateLessonActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private TextInputEditText etLessonTitle, etLessonContent, etEstimatedTime;&#13;&#10;    private Spinner spinnerLessonType;&#13;&#10;    private Button btnCreateLesson, btnAddExample, btnAddUsage, btnAddNote;&#13;&#10;    private Toolbar toolbar;&#13;&#10;&#13;&#10;    // Grammar-specific fields&#13;&#10;    private LinearLayout layoutGrammarContent;&#13;&#10;    private TextInputEditText etGrammarRule, etGrammarStructure;&#13;&#10;    private LinearLayout layoutExamples, layoutUsage, layoutNotes;&#13;&#10;    private List&lt;TextInputEditText&gt; exampleInputs, usageInputs, noteInputs;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String courseId, courseTitle, courseCategory;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_create_lesson);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        // Get course info from intent&#13;&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#13;&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupSpinners();&#13;&#10;        setupClickListeners();&#13;&#10;        loadCourseCategory();&#13;&#10;        addAnimations();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        etLessonTitle = findViewById(R.id.et_lesson_title);&#13;&#10;        etLessonContent = findViewById(R.id.et_lesson_content);&#13;&#10;        etEstimatedTime = findViewById(R.id.et_estimated_time);&#13;&#10;        spinnerLessonType = findViewById(R.id.spinner_lesson_type);&#13;&#10;        btnCreateLesson = findViewById(R.id.btn_create_lesson);&#13;&#10;&#13;&#10;        // Grammar-specific views - Kích hoạt lại các view&#13;&#10;        layoutGrammarContent = findViewById(R.id.layout_grammar_content);&#13;&#10;        etGrammarRule = findViewById(R.id.et_grammar_rule);&#13;&#10;        etGrammarStructure = findViewById(R.id.et_grammar_structure);&#13;&#10;        layoutExamples = findViewById(R.id.layout_examples);&#13;&#10;        layoutUsage = findViewById(R.id.layout_usage);&#13;&#10;        layoutNotes = findViewById(R.id.layout_notes);&#13;&#10;        btnAddExample = findViewById(R.id.btn_add_example);&#13;&#10;        btnAddUsage = findViewById(R.id.btn_add_usage);&#13;&#10;        btnAddNote = findViewById(R.id.btn_add_note);&#13;&#10;&#13;&#10;        // Initialize lists&#13;&#10;        exampleInputs = new ArrayList&lt;&gt;();&#13;&#10;        usageInputs = new ArrayList&lt;&gt;();&#13;&#10;        noteInputs = new ArrayList&lt;&gt;();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Tạo bài học mới&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinners() {&#13;&#10;        String[] lessonTypes = {&quot;text&quot;, &quot;video&quot;, &quot;audio&quot;, &quot;quiz&quot;};&#13;&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(this,&#13;&#10;            android.R.layout.simple_spinner_item, lessonTypes);&#13;&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spinnerLessonType.setAdapter(adapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnCreateLesson.setOnClickListener(v -&gt; createLesson());&#13;&#10;        btnAddExample.setOnClickListener(v -&gt; addExampleField());&#13;&#10;        btnAddUsage.setOnClickListener(v -&gt; addUsageField());&#13;&#10;        btnAddNote.setOnClickListener(v -&gt; addNoteField());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadCourseCategory() {&#13;&#10;        if (courseId == null) return;&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                if (documentSnapshot.exists()) {&#13;&#10;                    courseCategory = documentSnapshot.getString(&quot;category&quot;);&#13;&#10;                    android.util.Log.d(&quot;CreateLesson&quot;, &quot;Course category: &quot; + courseCategory);&#13;&#10;&#13;&#10;                    // Show/hide grammar-specific fields based on category&#13;&#10;                    if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#13;&#10;                        layoutGrammarContent.setVisibility(View.VISIBLE);&#13;&#10;                        addInitialFields();&#13;&#10;                    } else {&#13;&#10;                        layoutGrammarContent.setVisibility(View.GONE);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error loading course category&quot;, e);&#13;&#10;                Toast.makeText(this, &quot;Lỗi tải thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addInitialFields() {&#13;&#10;        // Add initial example, usage, and note fields for Grammar lessons&#13;&#10;        addExampleField();&#13;&#10;        addUsageField();&#13;&#10;        addNoteField();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addExampleField() {&#13;&#10;        TextInputEditText etExample = new TextInputEditText(this);&#13;&#10;        etExample.setHint(&quot;Ví dụ &quot; + (exampleInputs.size() + 1));&#13;&#10;        etExample.setLayoutParams(new LinearLayout.LayoutParams(&#13;&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#13;&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#13;&#10;        etExample.setPadding(0, 8, 0, 8);&#13;&#10;&#13;&#10;        layoutExamples.addView(etExample);&#13;&#10;        exampleInputs.add(etExample);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addUsageField() {&#13;&#10;        TextInputEditText etUsage = new TextInputEditText(this);&#13;&#10;        etUsage.setHint(&quot;Cách sử dụng &quot; + (usageInputs.size() + 1));&#13;&#10;        etUsage.setLayoutParams(new LinearLayout.LayoutParams(&#13;&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#13;&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#13;&#10;        etUsage.setPadding(0, 8, 0, 8);&#13;&#10;&#13;&#10;        layoutUsage.addView(etUsage);&#13;&#10;        usageInputs.add(etUsage);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addNoteField() {&#13;&#10;        TextInputEditText etNote = new TextInputEditText(this);&#13;&#10;        etNote.setHint(&quot;Ghi chú &quot; + (noteInputs.size() + 1));&#13;&#10;        etNote.setLayoutParams(new LinearLayout.LayoutParams(&#13;&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#13;&#10;            LinearLayout.LayoutParams.WRAP_CONTENT));&#13;&#10;        etNote.setPadding(0, 8, 0, 8);&#13;&#10;&#13;&#10;        layoutNotes.addView(etNote);&#13;&#10;        noteInputs.add(etNote);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addAnimations() {&#13;&#10;        // Add fade-in animation - Comment out vì không có main_content ID&#13;&#10;        // findViewById(R.id.main_content).setAlpha(0f);&#13;&#10;        // findViewById(R.id.main_content).animate()&#13;&#10;        //     .alpha(1f)&#13;&#10;        //     .setDuration(500)&#13;&#10;        //     .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void createLesson() {&#13;&#10;        String title = etLessonTitle.getText().toString().trim();&#13;&#10;        String content = etLessonContent.getText().toString().trim();&#13;&#10;        String estimatedTimeStr = etEstimatedTime.getText().toString().trim();&#13;&#10;        String lessonType = spinnerLessonType.getSelectedItem().toString();&#13;&#10;&#13;&#10;        // Validation&#13;&#10;        if (TextUtils.isEmpty(title)) {&#13;&#10;            etLessonTitle.setError(&quot;Vui lòng nhập tiêu đề bài học&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (TextUtils.isEmpty(content)) {&#13;&#10;            etLessonContent.setError(&quot;Vui lòng nhập nội dung bài học&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        int estimatedTime = 30; // default&#13;&#10;        if (!TextUtils.isEmpty(estimatedTimeStr)) {&#13;&#10;            try {&#13;&#10;                estimatedTime = Integer.parseInt(estimatedTimeStr);&#13;&#10;            } catch (NumberFormatException e) {&#13;&#10;                etEstimatedTime.setError(&quot;Thời gian ước tính phải là số&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Create lesson object&#13;&#10;        Map&lt;String, Object&gt; lessonData = new HashMap&lt;&gt;();&#13;&#10;        lessonData.put(&quot;title&quot;, title);&#13;&#10;        lessonData.put(&quot;content&quot;, content);&#13;&#10;        lessonData.put(&quot;courseId&quot;, courseId);&#13;&#10;        lessonData.put(&quot;teacherId&quot;, mAuth.getCurrentUser().getUid());&#13;&#10;        lessonData.put(&quot;type&quot;, lessonType);&#13;&#10;        lessonData.put(&quot;category&quot;, courseCategory);&#13;&#10;        lessonData.put(&quot;estimatedTime&quot;, estimatedTime);&#13;&#10;        lessonData.put(&quot;createdAt&quot;, new Date());&#13;&#10;        lessonData.put(&quot;updatedAt&quot;, new Date());&#13;&#10;        lessonData.put(&quot;isPublished&quot;, true); // Changed from false to true - auto publish lessons&#13;&#10;&#13;&#10;        // Add grammar-specific data if this is a Grammar lesson&#13;&#10;        if (&quot;Grammar&quot;.equalsIgnoreCase(courseCategory)) {&#13;&#10;            addGrammarData(lessonData);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Get next order number&#13;&#10;        getNextOrderNumber(lessonData);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addGrammarData(Map&lt;String, Object&gt; lessonData) {&#13;&#10;        String grammarRule = etGrammarRule.getText().toString().trim();&#13;&#10;        String grammarStructure = etGrammarStructure.getText().toString().trim();&#13;&#10;&#13;&#10;        if (!TextUtils.isEmpty(grammarRule)) {&#13;&#10;            lessonData.put(&quot;grammarRule&quot;, grammarRule);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (!TextUtils.isEmpty(grammarStructure)) {&#13;&#10;            lessonData.put(&quot;grammarStructure&quot;, grammarStructure);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Collect examples&#13;&#10;        List&lt;String&gt; examples = new ArrayList&lt;&gt;();&#13;&#10;        for (TextInputEditText etExample : exampleInputs) {&#13;&#10;            String example = etExample.getText().toString().trim();&#13;&#10;            if (!TextUtils.isEmpty(example)) {&#13;&#10;                examples.add(example);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        if (!examples.isEmpty()) {&#13;&#10;            lessonData.put(&quot;grammarExamples&quot;, examples);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Collect usage notes&#13;&#10;        List&lt;String&gt; usage = new ArrayList&lt;&gt;();&#13;&#10;        for (TextInputEditText etUsage : usageInputs) {&#13;&#10;            String usageNote = etUsage.getText().toString().trim();&#13;&#10;            if (!TextUtils.isEmpty(usageNote)) {&#13;&#10;                usage.add(usageNote);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        if (!usage.isEmpty()) {&#13;&#10;            lessonData.put(&quot;grammarUsage&quot;, usage);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Collect notes&#13;&#10;        List&lt;String&gt; notes = new ArrayList&lt;&gt;();&#13;&#10;        for (TextInputEditText etNote : noteInputs) {&#13;&#10;            String note = etNote.getText().toString().trim();&#13;&#10;            if (!TextUtils.isEmpty(note)) {&#13;&#10;                notes.add(note);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        if (!notes.isEmpty()) {&#13;&#10;            lessonData.put(&quot;grammarNotes&quot;, notes);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void getNextOrderNumber(Map&lt;String, Object&gt; lessonData) {&#13;&#10;        db.collection(&quot;lessons&quot;)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                int nextOrder = queryDocumentSnapshots.size() + 1;&#13;&#10;                lessonData.put(&quot;order&quot;, nextOrder);&#13;&#10;                saveLessonToFirebase(lessonData);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                lessonData.put(&quot;order&quot;, 1);&#13;&#10;                saveLessonToFirebase(lessonData);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveLessonToFirebase(Map&lt;String, Object&gt; lessonData) {&#13;&#10;        btnCreateLesson.setEnabled(false);&#13;&#10;        btnCreateLesson.setText(&quot;Đang tạo...&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;lessons&quot;)&#13;&#10;            .add(lessonData)&#13;&#10;            .addOnSuccessListener(documentReference -&gt; {&#13;&#10;                android.util.Log.d(&quot;CreateLesson&quot;, &quot;Lesson created with ID: &quot; + documentReference.getId());&#13;&#10;                Toast.makeText(this, &quot;Tạo bài học thành công!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                finish();&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;CreateLesson&quot;, &quot;Error creating lesson&quot;, e);&#13;&#10;                Toast.makeText(this, &quot;Lỗi tạo bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                btnCreateLesson.setEnabled(true);&#13;&#10;                btnCreateLesson.setText(&quot;Tạo bài học&quot;);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateQuizActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/CreateQuizActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.widget.LinearLayout;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.Quiz;&#10;import com.vantinh.tienganh.models.QuizQuestion;&#10;import com.vantinh.tienganh.models.TestQuestion;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import com.vantinh.tienganh.utils.QuestionViewHelper;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class CreateQuizActivity extends AppCompatActivity implements QuestionViewHelper.OnQuestionCountChangeListener {&#10;&#10;    private Toolbar toolbar;&#10;    private EditText etQuizTitle;&#10;    private TextView tvCourseName, tvQuestionCount;&#10;    private Button btnCreateQuiz, btnAddQuestion, btnRemoveQuestion, btnDebugCreate;&#10;    private LinearLayout llQuestionsContainer;&#10;    private String courseId, courseName;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth mAuth;&#10;&#10;    private QuestionViewHelper questionViewHelper;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_create_quiz);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCourseInfo();&#10;        initQuestionHelper();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#10;        tvCourseName = findViewById(R.id.tv_course_name);&#10;        tvQuestionCount = findViewById(R.id.tv_question_count);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#10;        btnRemoveQuestion = findViewById(R.id.btn_remove_question);&#10;        llQuestionsContainer = findViewById(R.id.ll_questions_container);&#10;        btnDebugCreate = findViewById(R.id.btn_debug_create);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Tạo bài kiểm tra&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;        mAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    private void getCourseInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;&#10;        if (courseName != null) {&#10;            tvCourseName.setText(&quot;Khóa học: &quot; + courseName);&#10;        }&#10;    }&#10;&#10;    private void initQuestionHelper() {&#10;        questionViewHelper = new QuestionViewHelper(this, llQuestionsContainer);&#10;        questionViewHelper.setOnQuestionCountChangeListener(this);&#10;        questionViewHelper.initializeWithDefaultQuestions();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCreateQuiz.setOnClickListener(v -&gt; createQuiz());&#10;&#10;        btnAddQuestion.setOnClickListener(v -&gt; {&#10;            questionViewHelper.addQuestion();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Added question, total: &quot; + questionViewHelper.getQuestionCount());&#10;        });&#10;&#10;        btnRemoveQuestion.setOnClickListener(v -&gt; {&#10;            int countBefore = questionViewHelper.getQuestionCount();&#10;            questionViewHelper.removeLastQuestion();&#10;            int countAfter = questionViewHelper.getQuestionCount();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Remove clicked - Before: &quot; + countBefore + &quot;, After: &quot; + countAfter);&#10;            Toast.makeText(this, &quot;Đã xóa câu hỏi cuối&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        btnDebugCreate.setOnClickListener(v -&gt; createDebugSampleData());&#10;    }&#10;&#10;    @Override&#10;    public void onQuestionCountChanged(int count) {&#10;        tvQuestionCount.setText(&quot;(&quot; + count + &quot; câu)&quot;);&#10;        boolean canRemove = count &gt; 2;&#10;        btnRemoveQuestion.setEnabled(canRemove);&#10;&#10;        // Debug log&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Question count changed: &quot; + count + &quot;, Can remove: &quot; + canRemove);&#10;&#10;        // Thay đổi màu nút để thể hiện trạng thái&#10;        if (canRemove) {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.holo_red_dark));&#10;            btnRemoveQuestion.setAlpha(1.0f);&#10;        } else {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.darker_gray));&#10;            btnRemoveQuestion.setAlpha(0.5f);&#10;        }&#10;    }&#10;&#10;    private void createQuiz() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        // Debug: Bắt đầu quá trình tạo bài kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== BẮT ĐẦU TẠO BÁI KIỂM TRA ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course ID: &quot; + courseId);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course Name: &quot; + courseName);&#10;&#10;        List&lt;SimpleTestQuestion&gt; simpleTestQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo từng câu hỏi theo cấu trúc mới chỉ với 3 trường&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Số câu hỏi cần tạo: &quot; + questionViews.size());&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            // 1. Lấy question (String) - nội dung câu hỏi&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            &#10;            // 2. Lấy correctAnswer (Array) - 4 đáp án A,B,C,D&#10;            List&lt;String&gt; correctAnswerArray = new ArrayList&lt;&gt;();&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String optionText = questionData.etOptions[j].getText().toString().trim();&#10;                correctAnswerArray.add(optionText);&#10;                android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  Option &quot; + (char)('A' + j) + &quot;: &quot; + optionText);&#10;            }&#10;&#10;            // 3. Lấy options (Number) - index của đáp án đúng (0-3)&#10;            int correctAnswerIndex = getCorrectAnswerIndex(questionData);&#10;            &#10;            // Tạo SimpleTestQuestion với cấu trúc ĐÚNG&#10;            SimpleTestQuestion simpleQuestion = new SimpleTestQuestion();&#10;            simpleQuestion.setCourseId(courseId);                    // String - ID khóa học&#10;            simpleQuestion.setOptions(correctAnswerArray);          // SỬA: options là array - 4 đáp án&#10;            simpleQuestion.setCorrectAnswer(correctAnswerIndex);    // SỬA: correctAnswer là number - index đáp án đúng&#10;            simpleQuestion.setQuestion(questionText);              // String - câu hỏi&#10;&#10;            simpleTestQuestions.add(simpleQuestion);&#10;&#10;            // Debug log chi tiết cho từng câu hỏi với courseId&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;--- QUESTION &quot; + (i+1) + &quot; DEBUG ---&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;courseId (String): \&quot;&quot; + courseId + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;question (String): \&quot;&quot; + questionText + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;correctAnswer (Array): &quot; + correctAnswerArray.toString());&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;options (Number): &quot; + correctAnswerIndex);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Đáp án đúng là: &quot; +&#10;                (correctAnswerIndex &gt;= 0 &amp;&amp; correctAnswerIndex &lt; correctAnswerArray.size() ?&#10;                 correctAnswerArray.get(correctAnswerIndex) : &quot;KHÔNG XÁC ĐỊNH&quot;));&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;SimpleTestQuestion Object: &quot; + simpleQuestion.toString());&#10;        }&#10;&#10;        // Debug tổng kết trước khi lưu&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TỔNG KẾT TRƯỚC KHI LƯU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Tổng số câu hỏi: &quot; + simpleTestQuestions.size());&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Collection đích: test&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Cấu trúc mỗi document:&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - correctAnswer: Array[4] (4 đáp án)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - options: Number (index đáp án đúng)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - question: String (câu hỏi)&quot;);&#10;&#10;        // Lưu từng câu hỏi như một document riêng trong collection &quot;test&quot;&#10;        saveSimpleTestQuestionsToFirebase(simpleTestQuestions);&#10;    }&#10;&#10;    private void createDebugSampleData() {&#10;        // Tạo dữ liệu mẫu để kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TẠO DỮ LIỆU MẪU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;CourseId for sample data: &quot; + courseId);&#10;&#10;        // Tạo một danh sách câu hỏi mẫu&#10;        List&lt;SimpleTestQuestion&gt; sampleQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo 5 câu hỏi mẫu với đáp án ngẫu nhiên&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            SimpleTestQuestion question = new SimpleTestQuestion();&#10;            question.setCourseId(courseId);  // Thêm courseId cho dữ liệu mẫu&#10;            question.setQuestion(&quot;Câu hỏi mẫu &quot; + i + &quot; - Khóa học: &quot; + courseName);&#10;&#10;            List&lt;String&gt; answers = new ArrayList&lt;&gt;();&#10;            answers.add(&quot;Đáp án A - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án B - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án C - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án D - Câu hỏi &quot; + i);&#10;            question.setCorrectAnswer(answers);&#10;&#10;            // Chọn ngẫu nhiên một đáp án đúng&#10;            int correctIndex = (int) (Math.random() * 4);&#10;            question.setOptions(correctIndex);&#10;&#10;            sampleQuestions.add(question);&#10;&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Câu hỏi mẫu &quot; + i + &quot;: &quot; + question.toString());&#10;        }&#10;&#10;        // Lưu vào Firebase&#10;        saveSimpleTestQuestionsToFirebase(sampleQuestions);&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        // Bỏ validation tên bài kiểm tra vì không cần thiết với cấu trúc mới&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            if (questionText.isEmpty()) {&#10;                questionData.etQuestion.setError(&quot;Vui lòng nhập câu hỏi &quot; + (i + 1));&#10;                questionData.etQuestion.requestFocus();&#10;                return false;&#10;            }&#10;&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String option = questionData.etOptions[j].getText().toString().trim();&#10;                if (option.isEmpty()) {&#10;                    questionData.etOptions[j].setError(&quot;Vui lòng nhập lựa chọn &quot; + (char)('A' + j));&#10;                    questionData.etOptions[j].requestFocus();&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            // Check if any radio button is selected for this question&#10;            if (questionData.rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;                Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng cho câu hỏi &quot; + (i + 1), Toast.LENGTH_SHORT).show();&#10;                return false;&#10;            }&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex(QuestionViewHelper.QuestionViewData questionData) {&#10;        RadioGroup radioGroup = questionData.rgCorrectAnswer;&#10;        int checkedId = radioGroup.getCheckedRadioButtonId();&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Getting correct answer - checkedId: &quot; + checkedId);&#10;&#10;        if (checkedId == -1) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;No option selected&quot;);&#10;            return -1;&#10;        }&#10;&#10;        // Phương pháp đơn giản: Kiểm tra trực tiếp từng RadioButton theo ID gốc&#10;        RadioButton rbA = questionData.questionView.findViewById(R.id.rb_option_a);&#10;        RadioButton rbB = questionData.questionView.findViewById(R.id.rb_option_b);&#10;        RadioButton rbC = questionData.questionView.findViewById(R.id.rb_option_c);&#10;        RadioButton rbD = questionData.questionView.findViewById(R.id.rb_option_d);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;RadioButton states - A:&quot; + (rbA != null ? rbA.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, B:&quot; + (rbB != null ? rbB.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, C:&quot; + (rbC != null ? rbC.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, D:&quot; + (rbD != null ? rbD.isChecked() : &quot;null&quot;));&#10;&#10;        if (rbA != null &amp;&amp; rbA.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option A selected (index 0)&quot;);&#10;            return 0;&#10;        }&#10;        if (rbB != null &amp;&amp; rbB.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option B selected (index 1)&quot;);&#10;            return 1;&#10;        }&#10;        if (rbC != null &amp;&amp; rbC.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option C selected (index 2)&quot;);&#10;            return 2;&#10;        }&#10;        if (rbD != null &amp;&amp; rbD.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option D selected (index 3)&quot;);&#10;            return 3;&#10;        }&#10;&#10;        // Nếu vẫn không tìm được, thử kiểm tra bằng ID được sinh ra động&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Fallback: Checking by generated IDs&quot;);&#10;        for (int i = 0; i &lt; radioGroup.getChildCount(); i++) {&#10;            View child = radioGroup.getChildAt(i);&#10;            if (child instanceof RadioButton) {&#10;                RadioButton rb = (RadioButton) child;&#10;                if (rb.isChecked()) {&#10;                    android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Found checked RadioButton at child position &quot; + i);&#10;                    return i;&#10;                }&#10;            }&#10;        }&#10;&#10;        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Could not determine correct answer index for checkedId: &quot; + checkedId);&#10;        return -1;&#10;    }&#10;&#10;    private void saveTestQuestionsToFirebase(List&lt;TestQuestion&gt; testQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (TestQuestion question : testQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  courseId: &quot; + question.getCourseId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  teacherId: &quot; + question.getTeacherId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == testQuestions.get(testQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveSimpleTestQuestionsToFirebase(List&lt;SimpleTestQuestion&gt; simpleTestQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for simple test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (SimpleTestQuestion question : simpleTestQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Simple test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Simple Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == simpleTestQuestions.get(simpleTestQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveQuizQuestionsToFirebase(List&lt;QuizQuestion&gt; quizQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for quiz questions (old structure)...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (QuizQuestion question : quizQuestions) {&#10;            db.collection(&quot;quizzes&quot;)  // Lưu vào collection &quot;quizzes&quot; với cấu trúc cũ&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Quiz question (old structure) saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == quizQuestions.get(quizQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import android.widget.LinearLayout;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.Quiz;&#10;import com.vantinh.tienganh.models.QuizQuestion;&#10;import com.vantinh.tienganh.models.TestQuestion;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import com.vantinh.tienganh.utils.QuestionViewHelper;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class CreateQuizActivity extends AppCompatActivity implements QuestionViewHelper.OnQuestionCountChangeListener {&#10;&#10;    private Toolbar toolbar;&#10;    private EditText etQuizTitle;&#10;    private TextView tvCourseName, tvQuestionCount;&#10;    private Button btnCreateQuiz, btnAddQuestion, btnRemoveQuestion, btnDebugCreate;&#10;    private LinearLayout llQuestionsContainer;&#10;    private String courseId, courseName;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth mAuth;&#10;&#10;    private QuestionViewHelper questionViewHelper;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_create_quiz);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCourseInfo();&#10;        initQuestionHelper();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuizTitle = findViewById(R.id.et_quiz_title);&#10;        tvCourseName = findViewById(R.id.tv_course_name);&#10;        tvQuestionCount = findViewById(R.id.tv_question_count);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnAddQuestion = findViewById(R.id.btn_add_question);&#10;        btnRemoveQuestion = findViewById(R.id.btn_remove_question);&#10;        llQuestionsContainer = findViewById(R.id.ll_questions_container);&#10;        btnDebugCreate = findViewById(R.id.btn_debug_create);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Tạo bài kiểm tra&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;        mAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    private void getCourseInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;&#10;        if (courseName != null) {&#10;            tvCourseName.setText(&quot;Khóa học: &quot; + courseName);&#10;        }&#10;    }&#10;&#10;    private void initQuestionHelper() {&#10;        questionViewHelper = new QuestionViewHelper(this, llQuestionsContainer);&#10;        questionViewHelper.setOnQuestionCountChangeListener(this);&#10;        questionViewHelper.initializeWithDefaultQuestions();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCreateQuiz.setOnClickListener(v -&gt; createQuiz());&#10;&#10;        btnAddQuestion.setOnClickListener(v -&gt; {&#10;            questionViewHelper.addQuestion();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Added question, total: &quot; + questionViewHelper.getQuestionCount());&#10;        });&#10;&#10;        btnRemoveQuestion.setOnClickListener(v -&gt; {&#10;            int countBefore = questionViewHelper.getQuestionCount();&#10;            questionViewHelper.removeLastQuestion();&#10;            int countAfter = questionViewHelper.getQuestionCount();&#10;            // Debug log&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Remove clicked - Before: &quot; + countBefore + &quot;, After: &quot; + countAfter);&#10;            Toast.makeText(this, &quot;Đã xóa câu hỏi cuối&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        btnDebugCreate.setOnClickListener(v -&gt; createDebugSampleData());&#10;    }&#10;&#10;    @Override&#10;    public void onQuestionCountChanged(int count) {&#10;        tvQuestionCount.setText(&quot;(&quot; + count + &quot; câu)&quot;);&#10;        boolean canRemove = count &gt; 2;&#10;        btnRemoveQuestion.setEnabled(canRemove);&#10;&#10;        // Debug log&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Question count changed: &quot; + count + &quot;, Can remove: &quot; + canRemove);&#10;&#10;        // Thay đổi màu nút để thể hiện trạng thái&#10;        if (canRemove) {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.holo_red_dark));&#10;            btnRemoveQuestion.setAlpha(1.0f);&#10;        } else {&#10;            btnRemoveQuestion.setBackgroundTintList(getResources().getColorStateList(android.R.color.darker_gray));&#10;            btnRemoveQuestion.setAlpha(0.5f);&#10;        }&#10;    }&#10;&#10;    private void createQuiz() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        // Debug: Bắt đầu quá trình tạo bài kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== BẮT ĐẦU TẠO BÁI KIỂM TRA ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course ID: &quot; + courseId);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Course Name: &quot; + courseName);&#10;&#10;        List&lt;SimpleTestQuestion&gt; simpleTestQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo từng câu hỏi theo cấu trúc mới chỉ với 3 trường&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Số câu hỏi cần tạo: &quot; + questionViews.size());&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            // 1. Lấy question (String) - nội dung câu hỏi&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            &#10;            // 2. Lấy correctAnswer (Array) - 4 đáp án A,B,C,D&#10;            List&lt;String&gt; correctAnswerArray = new ArrayList&lt;&gt;();&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String optionText = questionData.etOptions[j].getText().toString().trim();&#10;                correctAnswerArray.add(optionText);&#10;                android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  Option &quot; + (char)('A' + j) + &quot;: &quot; + optionText);&#10;            }&#10;&#10;            // 3. Lấy options (Number) - index của đáp án đúng (0-3)&#10;            int correctAnswerIndex = getCorrectAnswerIndex(questionData);&#10;            &#10;            // Tạo SimpleTestQuestion với cấu trúc ĐÚNG&#10;            SimpleTestQuestion simpleQuestion = new SimpleTestQuestion();&#10;            simpleQuestion.setCourseId(courseId);                    // String - ID khóa học&#10;            simpleQuestion.setOptions(correctAnswerArray);          // SỬA: options là array - 4 đáp án&#10;            simpleQuestion.setCorrectAnswer(correctAnswerIndex);    // SỬA: correctAnswer là number - index đáp án đúng&#10;            simpleQuestion.setQuestion(questionText);              // String - câu hỏi&#10;&#10;            simpleTestQuestions.add(simpleQuestion);&#10;&#10;            // Debug log chi tiết cho từng câu hỏi với courseId&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;--- QUESTION &quot; + (i+1) + &quot; DEBUG ---&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;courseId (String): \&quot;&quot; + courseId + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;question (String): \&quot;&quot; + questionText + &quot;\&quot;&quot;);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;correctAnswer (Array): &quot; + correctAnswerArray.toString());&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;options (Number): &quot; + correctAnswerIndex);&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Đáp án đúng là: &quot; +&#10;                (correctAnswerIndex &gt;= 0 &amp;&amp; correctAnswerIndex &lt; correctAnswerArray.size() ?&#10;                 correctAnswerArray.get(correctAnswerIndex) : &quot;KHÔNG XÁC ĐỊNH&quot;));&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;SimpleTestQuestion Object: &quot; + simpleQuestion.toString());&#10;        }&#10;&#10;        // Debug tổng kết trước khi lưu&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TỔNG KẾT TRƯỚC KHI LƯU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Tổng số câu hỏi: &quot; + simpleTestQuestions.size());&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Collection đích: test&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Cấu trúc mỗi document:&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - correctAnswer: Array[4] (4 đáp án)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - options: Number (index đáp án đúng)&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  - question: String (câu hỏi)&quot;);&#10;&#10;        // Lưu từng câu hỏi như một document riêng trong collection &quot;test&quot;&#10;        saveSimpleTestQuestionsToFirebase(simpleTestQuestions);&#10;    }&#10;&#10;    private void createDebugSampleData() {&#10;        // Tạo dữ liệu mẫu để kiểm tra&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;=== TẠO DỮ LIỆU MẪU ===&quot;);&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;CourseId for sample data: &quot; + courseId);&#10;&#10;        // Tạo một danh sách câu hỏi mẫu&#10;        List&lt;SimpleTestQuestion&gt; sampleQuestions = new ArrayList&lt;&gt;();&#10;&#10;        // Tạo 5 câu hỏi mẫu với đáp án ngẫu nhiên&#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            SimpleTestQuestion question = new SimpleTestQuestion();&#10;            question.setCourseId(courseId);  // Thêm courseId cho dữ liệu mẫu&#10;            question.setQuestion(&quot;Câu hỏi mẫu &quot; + i + &quot; - Khóa học: &quot; + courseName);&#10;&#10;            List&lt;String&gt; answers = new ArrayList&lt;&gt;();&#10;            answers.add(&quot;Đáp án A - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án B - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án C - Câu hỏi &quot; + i);&#10;            answers.add(&quot;Đáp án D - Câu hỏi &quot; + i);&#10;            question.setOptions(answers);          // SỬA: options là array&#10;&#10;            // Chọn ngẫu nhiên một đáp án đúng&#10;            int correctIndex = (int) (Math.random() * 4);&#10;            question.setCorrectAnswer(correctIndex);  // SỬA: correctAnswer là number&#10;&#10;            sampleQuestions.add(question);&#10;&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Câu hỏi mẫu &quot; + i + &quot;: &quot; + question.toString());&#10;        }&#10;&#10;        // Lưu vào Firebase&#10;        saveSimpleTestQuestionsToFirebase(sampleQuestions);&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        // Bỏ validation tên bài kiểm tra vì không cần thiết với cấu trúc mới&#10;        List&lt;QuestionViewHelper.QuestionViewData&gt; questionViews = questionViewHelper.getQuestionViews();&#10;&#10;        for (int i = 0; i &lt; questionViews.size(); i++) {&#10;            QuestionViewHelper.QuestionViewData questionData = questionViews.get(i);&#10;&#10;            String questionText = questionData.etQuestion.getText().toString().trim();&#10;            if (questionText.isEmpty()) {&#10;                questionData.etQuestion.setError(&quot;Vui lòng nhập câu hỏi &quot; + (i + 1));&#10;                questionData.etQuestion.requestFocus();&#10;                return false;&#10;            }&#10;&#10;            for (int j = 0; j &lt; 4; j++) {&#10;                String option = questionData.etOptions[j].getText().toString().trim();&#10;                if (option.isEmpty()) {&#10;                    questionData.etOptions[j].setError(&quot;Vui lòng nhập lựa chọn &quot; + (char)('A' + j));&#10;                    questionData.etOptions[j].requestFocus();&#10;                    return false;&#10;                }&#10;            }&#10;&#10;            // Check if any radio button is selected for this question&#10;            if (questionData.rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;                Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng cho câu hỏi &quot; + (i + 1), Toast.LENGTH_SHORT).show();&#10;                return false;&#10;            }&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex(QuestionViewHelper.QuestionViewData questionData) {&#10;        RadioGroup radioGroup = questionData.rgCorrectAnswer;&#10;        int checkedId = radioGroup.getCheckedRadioButtonId();&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Getting correct answer - checkedId: &quot; + checkedId);&#10;&#10;        if (checkedId == -1) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;No option selected&quot;);&#10;            return -1;&#10;        }&#10;&#10;        // Phương pháp đơn giản: Kiểm tra trực tiếp từng RadioButton theo ID gốc&#10;        RadioButton rbA = questionData.questionView.findViewById(R.id.rb_option_a);&#10;        RadioButton rbB = questionData.questionView.findViewById(R.id.rb_option_b);&#10;        RadioButton rbC = questionData.questionView.findViewById(R.id.rb_option_c);&#10;        RadioButton rbD = questionData.questionView.findViewById(R.id.rb_option_d);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;RadioButton states - A:&quot; + (rbA != null ? rbA.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, B:&quot; + (rbB != null ? rbB.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, C:&quot; + (rbC != null ? rbC.isChecked() : &quot;null&quot;) +&#10;                                        &quot;, D:&quot; + (rbD != null ? rbD.isChecked() : &quot;null&quot;));&#10;&#10;        if (rbA != null &amp;&amp; rbA.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option A selected (index 0)&quot;);&#10;            return 0;&#10;        }&#10;        if (rbB != null &amp;&amp; rbB.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option B selected (index 1)&quot;);&#10;            return 1;&#10;        }&#10;        if (rbC != null &amp;&amp; rbC.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option C selected (index 2)&quot;);&#10;            return 2;&#10;        }&#10;        if (rbD != null &amp;&amp; rbD.isChecked()) {&#10;            android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Option D selected (index 3)&quot;);&#10;            return 3;&#10;        }&#10;&#10;        // Nếu vẫn không tìm được, thử kiểm tra bằng ID được sinh ra động&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Fallback: Checking by generated IDs&quot;);&#10;        for (int i = 0; i &lt; radioGroup.getChildCount(); i++) {&#10;            View child = radioGroup.getChildAt(i);&#10;            if (child instanceof RadioButton) {&#10;                RadioButton rb = (RadioButton) child;&#10;                if (rb.isChecked()) {&#10;                    android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Found checked RadioButton at child position &quot; + i);&#10;                    return i;&#10;                }&#10;            }&#10;        }&#10;&#10;        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Could not determine correct answer index for checkedId: &quot; + checkedId);&#10;        return -1;&#10;    }&#10;&#10;    private void saveTestQuestionsToFirebase(List&lt;TestQuestion&gt; testQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (TestQuestion question : testQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  courseId: &quot; + question.getCourseId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  teacherId: &quot; + question.getTeacherId());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == testQuestions.get(testQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveSimpleTestQuestionsToFirebase(List&lt;SimpleTestQuestion&gt; simpleTestQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for simple test questions...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (SimpleTestQuestion question : simpleTestQuestions) {&#10;            db.collection(&quot;test&quot;)  // Thay đổi từ &quot;quizzes&quot; sang &quot;test&quot;&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Simple test question saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Log từng câu hỏi đã lưu&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Saved Simple Test Question:&quot;);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  ID: &quot; + documentId);&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  correctAnswer: &quot; + question.getCorrectAnswer());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  options: &quot; + question.getOptions());&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;  question: &quot; + question.getQuestion());&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == simpleTestQuestions.get(simpleTestQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void saveQuizQuestionsToFirebase(List&lt;QuizQuestion&gt; quizQuestions) {&#10;        btnCreateQuiz.setEnabled(false);&#10;        btnCreateQuiz.setText(&quot;Đang tạo...&quot;);&#10;&#10;        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Starting Firebase save for quiz questions (old structure)...&quot;);&#10;&#10;        // Lưu từng câu hỏi trong danh sách như một document riêng biệt&#10;        for (QuizQuestion question : quizQuestions) {&#10;            db.collection(&quot;quizzes&quot;)  // Lưu vào collection &quot;quizzes&quot; với cấu trúc cũ&#10;                    .add(question)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        String documentId = documentReference.getId();&#10;                        android.util.Log.d(&quot;CreateQuiz&quot;, &quot;Quiz question (old structure) saved successfully with ID: &quot; + documentId);&#10;&#10;                        // Hiển thị thông báo thành công cho lần lưu cuối cùng&#10;                        if (question == quizQuestions.get(quizQuestions.size() - 1)) {&#10;                            Toast.makeText(this, &quot;Tạo bài kiểm tra thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;CreateQuiz&quot;, &quot;Firebase save failed: &quot; + e.getMessage(), e);&#10;                        Toast.makeText(this, &quot;Lỗi khi tạo bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                        btnCreateQuiz.setEnabled(true);&#10;                        btnCreateQuiz.setText(&quot;Tạo bài kiểm tra&quot;);&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/DataMigrationActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/DataMigrationActivity.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class DataMigrationActivity extends AppCompatActivity {&#10;&#10;    private FirebaseFirestore db;&#10;    private TextView tvStatus;&#10;    private Button btnMigrateEnrollments;&#10;    private Button btnCheckEnrollments;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_data_migration);&#10;&#10;        db = FirebaseFirestore.getInstance();&#10;        &#10;        initViews();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        tvStatus = findViewById(R.id.tv_status);&#10;        btnMigrateEnrollments = findViewById(R.id.btn_migrate_enrollments);&#10;        btnCheckEnrollments = findViewById(R.id.btn_check_enrollments);&#10;&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Data Migration&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnCheckEnrollments.setOnClickListener(v -&gt; checkEnrollmentsStatus());&#10;        btnMigrateEnrollments.setOnClickListener(v -&gt; migrateEnrollmentsData());&#10;    }&#10;&#10;    private void checkEnrollmentsStatus() {&#10;        updateStatus(&quot;Đang kiểm tra dữ liệu enrollments...&quot;);&#10;        &#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int totalEnrollments = queryDocumentSnapshots.size();&#10;                    int enrollmentsWithStatus = 0;&#10;                    int enrollmentsWithoutStatus = 0;&#10;                    &#10;                    StringBuilder report = new StringBuilder();&#10;                    report.append(&quot;=== KIỂM TRA ENROLLMENTS ===\n&quot;);&#10;                    report.append(&quot;Tổng số enrollments: &quot;).append(totalEnrollments).append(&quot;\n\n&quot;);&#10;&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        String docId = doc.getId();&#10;                        String studentId = doc.getString(&quot;studentID&quot;);&#10;                        String courseId = doc.getString(&quot;courseID&quot;);&#10;                        String status = doc.getString(&quot;status&quot;);&#10;                        &#10;                        if (status != null &amp;&amp; !status.isEmpty()) {&#10;                            enrollmentsWithStatus++;&#10;                            report.append(&quot;✓ &quot;).append(docId).append(&quot; - Status: &quot;).append(status).append(&quot;\n&quot;);&#10;                        } else {&#10;                            enrollmentsWithoutStatus++;&#10;                            report.append(&quot;✗ &quot;).append(docId).append(&quot; - THIẾU STATUS (Student: &quot;)&#10;                                   .append(studentId).append(&quot;, Course: &quot;).append(courseId).append(&quot;)\n&quot;);&#10;                        }&#10;                    }&#10;                    &#10;                    report.append(&quot;\n=== TỔNG KẾT ===\n&quot;);&#10;                    report.append(&quot;Có status: &quot;).append(enrollmentsWithStatus).append(&quot;\n&quot;);&#10;                    report.append(&quot;Thiếu status: &quot;).append(enrollmentsWithoutStatus).append(&quot;\n&quot;);&#10;                    &#10;                    if (enrollmentsWithoutStatus &gt; 0) {&#10;                        report.append(&quot;\n⚠️ CẦN MIGRATION DỮ LIỆU!&quot;);&#10;                    } else {&#10;                        report.append(&quot;\n✅ TẤT CẢ DỮ LIỆU ĐÃ ĐẦY ĐỦ!&quot;);&#10;                    }&#10;&#10;                    updateStatus(report.toString());&#10;                    &#10;                    Log.d(&quot;DataMigration&quot;, report.toString());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    String error = &quot;Lỗi kiểm tra dữ liệu: &quot; + e.getMessage();&#10;                    updateStatus(error);&#10;                    Log.e(&quot;DataMigration&quot;, error, e);&#10;                });&#10;    }&#10;&#10;    private void migrateEnrollmentsData() {&#10;        updateStatus(&quot;Đang bắt đầu migration dữ liệu...&quot;);&#10;        &#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;status&quot;, null) // Tìm các document không có trường status&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        updateStatus(&quot;✅ Không có dữ liệu nào cần migration!&quot;);&#10;                        return;&#10;                    }&#10;                    &#10;                    int totalToMigrate = queryDocumentSnapshots.size();&#10;                    updateStatus(&quot;Tìm thấy &quot; + totalToMigrate + &quot; enrollments cần thêm status...&quot;);&#10;                    &#10;                    final int[] migratedCount = {0};&#10;                    final int[] errorCount = {0};&#10;                    &#10;                    // Thêm trường status = &quot;approved&quot; cho tất cả enrollments hiện có&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        String docId = doc.getId();&#10;                        &#10;                        Map&lt;String, Object&gt; updateData = new HashMap&lt;&gt;();&#10;                        updateData.put(&quot;status&quot;, &quot;approved&quot;); // Mặc định các enrollment hiện có đều là đã được duyệt&#10;                        &#10;                        db.collection(&quot;enrollments&quot;).document(docId)&#10;                                .update(updateData)&#10;                                .addOnSuccessListener(aVoid -&gt; {&#10;                                    migratedCount[0]++;&#10;                                    Log.d(&quot;DataMigration&quot;, &quot;Updated enrollment &quot; + docId + &quot; with status = approved&quot;);&#10;                                    &#10;                                    // Kiểm tra xem đã hoàn thành chưa&#10;                                    if (migratedCount[0] + errorCount[0] == totalToMigrate) {&#10;                                        String finalReport = &quot;=== MIGRATION HOÀN THÀNH ===\n&quot; +&#10;                                                &quot;Tổng số: &quot; + totalToMigrate + &quot;\n&quot; +&#10;                                                &quot;Thành công: &quot; + migratedCount[0] + &quot;\n&quot; +&#10;                                                &quot;Lỗi: &quot; + errorCount[0] + &quot;\n\n&quot; +&#10;                                                &quot;✅ Bây giờ bạn có thể test lại ứng dụng!&quot;;&#10;                                        updateStatus(finalReport);&#10;                                        &#10;                                        Toast.makeText(this, &quot;Migration hoàn thành!&quot;, Toast.LENGTH_LONG).show();&#10;                                    }&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    errorCount[0]++;&#10;                                    Log.e(&quot;DataMigration&quot;, &quot;Error updating enrollment &quot; + docId, e);&#10;                                    &#10;                                    // Kiểm tra xem đã hoàn thành chưa&#10;                                    if (migratedCount[0] + errorCount[0] == totalToMigrate) {&#10;                                        String finalReport = &quot;=== MIGRATION HOÀN THÀNH (CÓ LỖI) ===\n&quot; +&#10;                                                &quot;Tổng số: &quot; + totalToMigrate + &quot;\n&quot; +&#10;                                                &quot;Thành công: &quot; + migratedCount[0] + &quot;\n&quot; +&#10;                                                &quot;Lỗi: &quot; + errorCount[0] + &quot;\n\n&quot; +&#10;                                                &quot;⚠️ Có một số lỗi xảy ra!&quot;;&#10;                                        updateStatus(finalReport);&#10;                                    }&#10;                                });&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    String error = &quot;Lỗi migration: &quot; + e.getMessage();&#10;                    updateStatus(error);&#10;                    Log.e(&quot;DataMigration&quot;, error, e);&#10;                });&#10;        &#10;        // Ngoài ra, cũng tìm và cập nhật những enrollment không có trường status&#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(allDocs -&gt; {&#10;                    for (QueryDocumentSnapshot doc : allDocs) {&#10;                        if (!doc.contains(&quot;status&quot;)) {&#10;                            String docId = doc.getId();&#10;                            &#10;                            Map&lt;String, Object&gt; updateData = new HashMap&lt;&gt;();&#10;                            updateData.put(&quot;status&quot;, &quot;approved&quot;);&#10;                            &#10;                            db.collection(&quot;enrollments&quot;).document(docId)&#10;                                    .update(updateData)&#10;                                    .addOnSuccessListener(aVoid -&gt; {&#10;                                        Log.d(&quot;DataMigration&quot;, &quot;Added status field to enrollment &quot; + docId);&#10;                                    })&#10;                                    .addOnFailureListener(e -&gt; {&#10;                                        Log.e(&quot;DataMigration&quot;, &quot;Error adding status to enrollment &quot; + docId, e);&#10;                                    });&#10;                        }&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void updateStatus(String status) {&#10;        runOnUiThread(() -&gt; {&#10;            tvStatus.setText(status);&#10;            Log.d(&quot;DataMigration&quot;, status);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(android.view.MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditCourseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditCourseActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.ProgressBar;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class EditCourseActivity extends AppCompatActivity {&#10;&#10;    private EditText etCourseTitle, etCourseDescription, etCourseDuration;&#10;    private Spinner spinnerLevel, spinnerCategory;&#10;    private Button btnUpdateCourse, btnDeleteCourse, btnManageLessons, btnViewStudents;&#10;    private ProgressBar progressBar;&#10;    private BottomNavigationView bottomNavigation;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId;&#10;    private Course currentCourse;&#10;&#10;    // Arrays cho spinners&#10;    private String[] levels = {&quot;Beginner&quot;, &quot;Intermediate&quot;, &quot;Advanced&quot;};&#10;    private String[] categories = {&quot;Grammar&quot;, &quot;Vocabulary&quot;, &quot;Listening&quot;, &quot;Speaking&quot;, &quot;Reading&quot;, &quot;Writing&quot;};&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_course);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        // Get course ID from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupSpinners();&#10;        setupBottomNavigation();&#10;        setupClickListeners();&#10;        loadCourseData();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#10;        etCourseTitle = findViewById(R.id.et_course_title);&#10;        etCourseDescription = findViewById(R.id.et_course_description);&#10;        etCourseDuration = findViewById(R.id.et_course_duration);&#10;        spinnerLevel = findViewById(R.id.spinner_level);&#10;        spinnerCategory = findViewById(R.id.spinner_category);&#10;        btnUpdateCourse = findViewById(R.id.btn_update_course);&#10;        btnDeleteCourse = findViewById(R.id.btn_delete_course);&#10;        btnManageLessons = findViewById(R.id.btn_manage_lessons);&#10;        btnViewStudents = findViewById(R.id.btn_view_students);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa khóa học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupSpinners() {&#10;        // Setup Level spinner&#10;        ArrayAdapter&lt;String&gt; levelAdapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_spinner_item, levels);&#10;        levelAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerLevel.setAdapter(levelAdapter);&#10;&#10;        // Setup Category spinner&#10;        ArrayAdapter&lt;String&gt; categoryAdapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_spinner_item, categories);&#10;        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerCategory.setAdapter(categoryAdapter);&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setSelectedItemId(R.id.nav_courses);&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                // Already on courses&#10;                return true;&#10;            } else if (itemId == R.id.nav_students) {&#10;                startActivity(new Intent(this, EnrollmentManagementActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnUpdateCourse.setOnClickListener(v -&gt; updateCourse());&#10;        btnDeleteCourse.setOnClickListener(v -&gt; deleteCourse());&#10;        btnManageLessons.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, LessonManagementActivity.class);&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#10;            intent.putExtra(&quot;courseCategory&quot;, currentCourse != null ? currentCourse.getCategory() : &quot;&quot;);&#10;            startActivity(intent);&#10;        });&#10;        btnViewStudents.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, CourseStudentsActivity.class);&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void loadCourseData() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                if (documentSnapshot.exists()) {&#10;                    currentCourse = documentSnapshot.toObject(Course.class);&#10;                    if (currentCourse != null) {&#10;                        currentCourse.setId(documentSnapshot.getId());&#10;                        populateFields();&#10;                    }&#10;                } else {&#10;                    Toast.makeText(this, &quot;Không tìm thấy khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(this, &quot;Lỗi khi tải dữ liệu khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error loading course&quot;, e);&#10;            });&#10;    }&#10;&#10;    private void populateFields() {&#10;        // Điền thông tin khóa học vào các trường&#10;        etCourseTitle.setText(currentCourse.getTitle());&#10;        etCourseDescription.setText(currentCourse.getDescription());&#10;        etCourseDuration.setText(String.valueOf(currentCourse.getDuration()));&#10;&#10;        // Set spinner selections&#10;        setSpinnerSelection(spinnerLevel, currentCourse.getLevel());&#10;        setSpinnerSelection(spinnerCategory, currentCourse.getCategory());&#10;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Populated fields for course: &quot; + currentCourse.getTitle());&#10;    }&#10;&#10;    private void setSpinnerSelection(Spinner spinner, String value) {&#10;        if (value != null) {&#10;            ArrayAdapter adapter = (ArrayAdapter) spinner.getAdapter();&#10;            int position = adapter.getPosition(value);&#10;            if (position &gt;= 0) {&#10;                spinner.setSelection(position);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void updateCourse() {&#10;        String title = etCourseTitle.getText().toString().trim();&#10;        String description = etCourseDescription.getText().toString().trim();&#10;        String durationStr = etCourseDuration.getText().toString().trim();&#10;        String level = spinnerLevel.getSelectedItem().toString();&#10;        String category = spinnerCategory.getSelectedItem().toString();&#10;&#10;        // Validation&#10;        if (title.isEmpty()) {&#10;            etCourseTitle.setError(&quot;Vui lòng nhập tên khóa học&quot;);&#10;            etCourseTitle.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (description.isEmpty()) {&#10;            etCourseDescription.setError(&quot;Vui lòng nhập mô tả khóa học&quot;);&#10;            etCourseDescription.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (durationStr.isEmpty()) {&#10;            etCourseDuration.setError(&quot;Vui lòng nhập thời lượng&quot;);&#10;            etCourseDuration.requestFocus();&#10;            return;&#10;        }&#10;&#10;        int duration;&#10;        try {&#10;            duration = Integer.parseInt(durationStr);&#10;            if (duration &lt;= 0) {&#10;                etCourseDuration.setError(&quot;Thời lượng phải lớn hơn 0&quot;);&#10;                etCourseDuration.requestFocus();&#10;                return;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            etCourseDuration.setError(&quot;Thời lượng phải là số&quot;);&#10;            etCourseDuration.requestFocus();&#10;            return;&#10;        }&#10;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        btnUpdateCourse.setEnabled(false);&#10;&#10;        // Tạo map để update&#10;        Map&lt;String, Object&gt; updates = new HashMap&lt;&gt;();&#10;        updates.put(&quot;title&quot;, title);&#10;        updates.put(&quot;description&quot;, description);&#10;        updates.put(&quot;duration&quot;, duration);&#10;        updates.put(&quot;level&quot;, level);&#10;        updates.put(&quot;category&quot;, category);&#10;        updates.put(&quot;updatedAt&quot;, new Date());&#10;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Updating course with: &quot; + updates);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .update(updates)&#10;            .addOnSuccessListener(aVoid -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                btnUpdateCourse.setEnabled(true);&#10;                Toast.makeText(this, &quot;Cập nhật khóa học thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                // Cập nhật currentCourse object&#10;                currentCourse.setTitle(title);&#10;                currentCourse.setDescription(description);&#10;                currentCourse.setDuration(duration);&#10;                currentCourse.setLevel(level);&#10;                currentCourse.setCategory(category);&#10;&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course updated successfully&quot;);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                btnUpdateCourse.setEnabled(true);&#10;                Toast.makeText(this, &quot;Lỗi khi cập nhật khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error updating course&quot;, e);&#10;            });&#10;    }&#10;&#10;    private void deleteCourse() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;            .setTitle(&quot;Xác nhận xóa khóa học&quot;)&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa khóa học \&quot;&quot; + currentCourse.getTitle() + &quot;\&quot;?\n\nHành động này sẽ:\n- Xóa khóa học vĩnh viễn\n- Xóa tất cả bài học trong khóa\n- Không thể hoàn tác&quot;)&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteCourse())&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#10;            .setIcon(android.R.drawable.ic_dialog_alert)&#10;            .show();&#10;    }&#10;&#10;    private void performDeleteCourse() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        btnDeleteCourse.setEnabled(false);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .delete()&#10;            .addOnSuccessListener(aVoid -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                Toast.makeText(this, &quot;Đã xóa khóa học thành công&quot;, Toast.LENGTH_SHORT).show();&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course deleted successfully&quot;);&#10;&#10;                // Quay về CourseManagementActivity&#10;                Intent intent = new Intent(this, CourseManagementActivity.class);&#10;                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#10;                startActivity(intent);&#10;                finish();&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                progressBar.setVisibility(View.GONE);&#10;                btnDeleteCourse.setEnabled(true);&#10;                Toast.makeText(this, &quot;Lỗi khi xóa khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error deleting course&quot;, e);&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload course data when returning to this activity&#10;        if (courseId != null) {&#10;            loadCourseData();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class EditCourseActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private EditText etCourseTitle, etCourseDescription, etCourseDuration;&#13;&#10;    private Spinner spinnerLevel, spinnerCategory;&#13;&#10;    private Button btnUpdateCourse, btnDeleteCourse, btnManageLessons, btnViewStudents, btnEditTestQuestions;&#13;&#10;    private ProgressBar progressBar;&#13;&#10;    private BottomNavigationView bottomNavigation;&#13;&#10;    private Toolbar toolbar;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String courseId;&#13;&#10;    private Course currentCourse;&#13;&#10;&#13;&#10;    // Arrays cho spinners&#13;&#10;    private String[] levels = {&quot;Beginner&quot;, &quot;Intermediate&quot;, &quot;Advanced&quot;};&#13;&#10;    private String[] categories = {&quot;Grammar&quot;, &quot;Vocabulary&quot;, &quot;Listening&quot;, &quot;Speaking&quot;, &quot;Reading&quot;, &quot;Writing&quot;};&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_edit_course);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        // Get course ID from intent&#13;&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#13;&#10;        if (courseId == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            finish();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupSpinners();&#13;&#10;        setupBottomNavigation();&#13;&#10;        setupClickListeners();&#13;&#10;        loadCourseData();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        bottomNavigation = findViewById(R.id.bottom_navigation);&#13;&#10;        etCourseTitle = findViewById(R.id.et_course_title);&#13;&#10;        etCourseDescription = findViewById(R.id.et_course_description);&#13;&#10;        etCourseDuration = findViewById(R.id.et_course_duration);&#13;&#10;        spinnerLevel = findViewById(R.id.spinner_level);&#13;&#10;        spinnerCategory = findViewById(R.id.spinner_category);&#13;&#10;        btnUpdateCourse = findViewById(R.id.btn_update_course);&#13;&#10;        btnDeleteCourse = findViewById(R.id.btn_delete_course);&#13;&#10;        btnManageLessons = findViewById(R.id.btn_manage_lessons);&#13;&#10;        btnViewStudents = findViewById(R.id.btn_view_students);&#13;&#10;        btnEditTestQuestions = findViewById(R.id.btn_edit_test_questions); // Thêm nút mới&#13;&#10;        progressBar = findViewById(R.id.progress_bar);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa khóa học&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinners() {&#13;&#10;        // Setup Level spinner&#13;&#10;        ArrayAdapter&lt;String&gt; levelAdapter = new ArrayAdapter&lt;&gt;(this,&#13;&#10;            android.R.layout.simple_spinner_item, levels);&#13;&#10;        levelAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spinnerLevel.setAdapter(levelAdapter);&#13;&#10;&#13;&#10;        // Setup Category spinner&#13;&#10;        ArrayAdapter&lt;String&gt; categoryAdapter = new ArrayAdapter&lt;&gt;(this,&#13;&#10;            android.R.layout.simple_spinner_item, categories);&#13;&#10;        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spinnerCategory.setAdapter(categoryAdapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupBottomNavigation() {&#13;&#10;        bottomNavigation.setSelectedItemId(R.id.nav_courses);&#13;&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#13;&#10;            int itemId = item.getItemId();&#13;&#10;            if (itemId == R.id.nav_home) {&#13;&#10;                startActivity(new Intent(this, TeacherDashboardActivity.class));&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_courses) {&#13;&#10;                // Already on courses&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_students) {&#13;&#10;                startActivity(new Intent(this, EnrollmentManagementActivity.class));&#13;&#10;                return true;&#13;&#10;            } else if (itemId == R.id.nav_profile) {&#13;&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#13;&#10;                return true;&#13;&#10;            }&#13;&#10;            return false;&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnUpdateCourse.setOnClickListener(v -&gt; updateCourse());&#13;&#10;        btnDeleteCourse.setOnClickListener(v -&gt; deleteCourse());&#13;&#10;        btnManageLessons.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, LessonManagementActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#13;&#10;            intent.putExtra(&quot;courseCategory&quot;, currentCourse != null ? currentCourse.getCategory() : &quot;&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;        btnViewStudents.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, CourseStudentsActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;        btnEditTestQuestions.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, EditTestQuestionsActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, currentCourse != null ? currentCourse.getTitle() : &quot;&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadCourseData() {&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                if (documentSnapshot.exists()) {&#13;&#10;                    currentCourse = documentSnapshot.toObject(Course.class);&#13;&#10;                    if (currentCourse != null) {&#13;&#10;                        currentCourse.setId(documentSnapshot.getId());&#13;&#10;                        populateFields();&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    Toast.makeText(this, &quot;Không tìm thấy khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    finish();&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                Toast.makeText(this, &quot;Lỗi khi tải dữ liệu khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error loading course&quot;, e);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void populateFields() {&#13;&#10;        // Điền thông tin khóa học vào các trường&#13;&#10;        etCourseTitle.setText(currentCourse.getTitle());&#13;&#10;        etCourseDescription.setText(currentCourse.getDescription());&#13;&#10;        etCourseDuration.setText(String.valueOf(currentCourse.getDuration()));&#13;&#10;&#13;&#10;        // Set spinner selections&#13;&#10;        setSpinnerSelection(spinnerLevel, currentCourse.getLevel());&#13;&#10;        setSpinnerSelection(spinnerCategory, currentCourse.getCategory());&#13;&#10;&#13;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Populated fields for course: &quot; + currentCourse.getTitle());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setSpinnerSelection(Spinner spinner, String value) {&#13;&#10;        if (value != null) {&#13;&#10;            ArrayAdapter adapter = (ArrayAdapter) spinner.getAdapter();&#13;&#10;            int position = adapter.getPosition(value);&#13;&#10;            if (position &gt;= 0) {&#13;&#10;                spinner.setSelection(position);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateCourse() {&#13;&#10;        String title = etCourseTitle.getText().toString().trim();&#13;&#10;        String description = etCourseDescription.getText().toString().trim();&#13;&#10;        String durationStr = etCourseDuration.getText().toString().trim();&#13;&#10;        String level = spinnerLevel.getSelectedItem().toString();&#13;&#10;        String category = spinnerCategory.getSelectedItem().toString();&#13;&#10;&#13;&#10;        // Validation&#13;&#10;        if (title.isEmpty()) {&#13;&#10;            etCourseTitle.setError(&quot;Vui lòng nhập tên khóa học&quot;);&#13;&#10;            etCourseTitle.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (description.isEmpty()) {&#13;&#10;            etCourseDescription.setError(&quot;Vui lòng nhập mô tả khóa học&quot;);&#13;&#10;            etCourseDescription.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (durationStr.isEmpty()) {&#13;&#10;            etCourseDuration.setError(&quot;Vui lòng nhập thời lượng&quot;);&#13;&#10;            etCourseDuration.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        int duration;&#13;&#10;        try {&#13;&#10;            duration = Integer.parseInt(durationStr);&#13;&#10;            if (duration &lt;= 0) {&#13;&#10;                etCourseDuration.setError(&quot;Thời lượng phải lớn hơn 0&quot;);&#13;&#10;                etCourseDuration.requestFocus();&#13;&#10;                return;&#13;&#10;            }&#13;&#10;        } catch (NumberFormatException e) {&#13;&#10;            etCourseDuration.setError(&quot;Thời lượng phải là số&quot;);&#13;&#10;            etCourseDuration.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;        btnUpdateCourse.setEnabled(false);&#13;&#10;&#13;&#10;        // Tạo map để update&#13;&#10;        Map&lt;String, Object&gt; updates = new HashMap&lt;&gt;();&#13;&#10;        updates.put(&quot;title&quot;, title);&#13;&#10;        updates.put(&quot;description&quot;, description);&#13;&#10;        updates.put(&quot;duration&quot;, duration);&#13;&#10;        updates.put(&quot;level&quot;, level);&#13;&#10;        updates.put(&quot;category&quot;, category);&#13;&#10;        updates.put(&quot;updatedAt&quot;, new Date());&#13;&#10;&#13;&#10;        android.util.Log.d(&quot;EditCourse&quot;, &quot;Updating course with: &quot; + updates);&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .update(updates)&#13;&#10;            .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                btnUpdateCourse.setEnabled(true);&#13;&#10;                Toast.makeText(this, &quot;Cập nhật khóa học thành công!&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;&#13;&#10;                // Cập nhật currentCourse object&#13;&#10;                currentCourse.setTitle(title);&#13;&#10;                currentCourse.setDescription(description);&#13;&#10;                currentCourse.setDuration(duration);&#13;&#10;                currentCourse.setLevel(level);&#13;&#10;                currentCourse.setCategory(category);&#13;&#10;&#13;&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course updated successfully&quot;);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                btnUpdateCourse.setEnabled(true);&#13;&#10;                Toast.makeText(this, &quot;Lỗi khi cập nhật khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error updating course&quot;, e);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void deleteCourse() {&#13;&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#13;&#10;            .setTitle(&quot;Xác nhận xóa khóa học&quot;)&#13;&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa khóa học \&quot;&quot; + currentCourse.getTitle() + &quot;\&quot;?\n\nHành động này sẽ:\n- Xóa khóa học vĩnh viễn\n- Xóa tất cả bài học trong khóa\n- Không thể hoàn tác&quot;)&#13;&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteCourse())&#13;&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#13;&#10;            .setIcon(android.R.drawable.ic_dialog_alert)&#13;&#10;            .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void performDeleteCourse() {&#13;&#10;        progressBar.setVisibility(View.VISIBLE);&#13;&#10;        btnDeleteCourse.setEnabled(false);&#13;&#10;&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .delete()&#13;&#10;            .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                Toast.makeText(this, &quot;Đã xóa khóa học thành công&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.d(&quot;EditCourse&quot;, &quot;Course deleted successfully&quot;);&#13;&#10;&#13;&#10;                // Quay về CourseManagementActivity&#13;&#10;                Intent intent = new Intent(this, CourseManagementActivity.class);&#13;&#10;                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);&#13;&#10;                startActivity(intent);&#13;&#10;                finish();&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                progressBar.setVisibility(View.GONE);&#13;&#10;                btnDeleteCourse.setEnabled(true);&#13;&#10;                Toast.makeText(this, &quot;Lỗi khi xóa khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                android.util.Log.e(&quot;EditCourse&quot;, &quot;Error deleting course&quot;, e);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onResume() {&#13;&#10;        super.onResume();&#13;&#10;        // Reload course data when returning to this activity&#13;&#10;        if (courseId != null) {&#13;&#10;            loadCourseData();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditSingleTestQuestionActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditSingleTestQuestionActivity.java" />
              <option name="originalContent" value="}&#10;package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class EditSingleTestQuestionActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;EditSingleTestQuestion&quot;;&#10;&#10;    private Toolbar toolbar;&#10;    private TextInputEditText etQuestion, etOptionA, etOptionB, etOptionC, etOptionD;&#10;    private RadioGroup rgCorrectAnswer;&#10;    private RadioButton rbOptionA, rbOptionB, rbOptionC, rbOptionD;&#10;    private Button btnSaveQuestion, btnDeleteQuestion;&#10;&#10;    private FirebaseFirestore db;&#10;    private String courseId, courseName, questionId;&#10;    private SimpleTestQuestion currentQuestion;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_single_test_question);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getQuestionInfo();&#10;        setupClickListeners();&#10;        loadQuestionData();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuestion = findViewById(R.id.et_question);&#10;        etOptionA = findViewById(R.id.et_option_a);&#10;        etOptionB = findViewById(R.id.et_option_b);&#10;        etOptionC = findViewById(R.id.et_option_c);&#10;        etOptionD = findViewById(R.id.et_option_d);&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#10;        rbOptionA = findViewById(R.id.rb_option_a);&#10;        rbOptionB = findViewById(R.id.rb_option_b);&#10;        rbOptionC = findViewById(R.id.rb_option_c);&#10;        rbOptionD = findViewById(R.id.rb_option_d);&#10;        btnSaveQuestion = findViewById(R.id.btn_save_question);&#10;        btnDeleteQuestion = findViewById(R.id.btn_delete_question);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa câu hỏi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void getQuestionInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;        questionId = getIntent().getStringExtra(&quot;questionId&quot;);&#10;&#10;        if (courseName != null) {&#10;            getSupportActionBar().setSubtitle(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSaveQuestion.setOnClickListener(v -&gt; saveQuestion());&#10;        btnDeleteQuestion.setOnClickListener(v -&gt; deleteQuestion());&#10;    }&#10;&#10;    private void loadQuestionData() {&#10;        if (questionId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Loading question data for ID: &quot; + questionId);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentQuestion = documentSnapshot.toObject(SimpleTestQuestion.class);&#10;                        if (currentQuestion != null) {&#10;                            currentQuestion.setDocumentId(documentSnapshot.getId());&#10;                            populateFields();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error loading question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi tải câu hỏi: &quot; + e.getMessage(),&#10;                                 Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void populateFields() {&#10;        if (currentQuestion == null) return;&#10;&#10;        // Điền nội dung câu hỏi&#10;        etQuestion.setText(currentQuestion.getQuestion());&#10;&#10;        // Điền các lựa chọn - SỬA LẠI: options là array chứa 4 đáp án&#10;        List&lt;String&gt; options = currentQuestion.getOptions(); // SỬA: từ getCorrectAnswer() thành getOptions()&#10;        if (options != null &amp;&amp; options.size() &gt;= 4) {&#10;            etOptionA.setText(options.get(0));&#10;            etOptionB.setText(options.get(1));&#10;            etOptionC.setText(options.get(2));&#10;            etOptionD.setText(options.get(3));&#10;        }&#10;&#10;        // Chọn đáp án đúng - SỬA LẠI: correctAnswer là number (index)&#10;        int correctIndex = currentQuestion.getCorrectAnswer(); // SỬA: từ getOptions() thành getCorrectAnswer()&#10;        switch (correctIndex) {&#10;            case 0:&#10;                rbOptionA.setChecked(true);&#10;                break;&#10;            case 1:&#10;                rbOptionB.setChecked(true);&#10;                break;&#10;            case 2:&#10;                rbOptionC.setChecked(true);&#10;                break;&#10;            case 3:&#10;                rbOptionD.setChecked(true);&#10;                break;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Populated fields for question: &quot; + currentQuestion.getQuestion());&#10;    }&#10;&#10;    private void saveQuestion() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        String questionText = etQuestion.getText().toString().trim();&#10;        List&lt;String&gt; options = new ArrayList&lt;&gt;();&#10;        options.add(etOptionA.getText().toString().trim());&#10;        options.add(etOptionB.getText().toString().trim());&#10;        options.add(etOptionC.getText().toString().trim());&#10;        options.add(etOptionD.getText().toString().trim());&#10;&#10;        int correctAnswerIndex = getCorrectAnswerIndex();&#10;&#10;        // Cập nhật currentQuestion&#10;        currentQuestion.setQuestion(questionText);&#10;        currentQuestion.setCorrectAnswer(options);&#10;        currentQuestion.setOptions(correctAnswerIndex);&#10;&#10;        btnSaveQuestion.setEnabled(false);&#10;        btnSaveQuestion.setText(&quot;Đang lưu...&quot;);&#10;&#10;        Log.d(TAG, &quot;Saving question: &quot; + currentQuestion.toString());&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .set(currentQuestion)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Log.d(TAG, &quot;Question saved successfully&quot;);&#10;                    Toast.makeText(this, &quot;Đã lưu câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error saving question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu câu hỏi: &quot; + e.getMessage(),&#10;                                 Toast.LENGTH_SHORT).show();&#10;                    btnSaveQuestion.setEnabled(true);&#10;                    btnSaveQuestion.setText(&quot;Lưu thay đổi&quot;);&#10;                });&#10;    }&#10;&#10;    private void deleteQuestion() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xác nhận xóa câu hỏi&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa câu hỏi này?\n\nHành động này không thể hoàn tác.&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteQuestion())&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .setIcon(android.R.drawable.ic_dialog_alert)&#10;                .show();&#10;    }&#10;&#10;    private void performDeleteQuestion() {&#10;        btnDeleteQuestion.setEnabled(false);&#10;        btnDeleteQuestion.setText(&quot;Đang xóa...&quot;);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .delete()&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Log.d(TAG, &quot;Question deleted successfully&quot;);&#10;                    Toast.makeText(this, &quot;Đã xóa câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error deleting question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa câu hỏi: &quot; + e.getMessage(),&#10;                                 Toast.LENGTH_SHORT).show();&#10;                    btnDeleteQuestion.setEnabled(true);&#10;                    btnDeleteQuestion.setText(&quot;Xóa câu hỏi&quot;);&#10;                });&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String questionText = etQuestion.getText().toString().trim();&#10;        if (questionText.isEmpty()) {&#10;            etQuestion.setError(&quot;Vui lòng nhập nội dung câu hỏi&quot;);&#10;            etQuestion.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        String[] options = {&#10;            etOptionA.getText().toString().trim(),&#10;            etOptionB.getText().toString().trim(),&#10;            etOptionC.getText().toString().trim(),&#10;            etOptionD.getText().toString().trim()&#10;        };&#10;&#10;        for (int i = 0; i &lt; options.length; i++) {&#10;            if (options[i].isEmpty()) {&#10;                switch (i) {&#10;                    case 0:&#10;                        etOptionA.setError(&quot;Vui lòng nhập lựa chọn A&quot;);&#10;                        etOptionA.requestFocus();&#10;                        break;&#10;                    case 1:&#10;                        etOptionB.setError(&quot;Vui lòng nhập lựa chọn B&quot;);&#10;                        etOptionB.requestFocus();&#10;                        break;&#10;                    case 2:&#10;                        etOptionC.setError(&quot;Vui lòng nhập lựa chọn C&quot;);&#10;                        etOptionC.requestFocus();&#10;                        break;&#10;                    case 3:&#10;                        etOptionD.setError(&quot;Vui lòng nhập lựa chọn D&quot;);&#10;                        etOptionD.requestFocus();&#10;                        break;&#10;                }&#10;                return false;&#10;            }&#10;        }&#10;&#10;        if (rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng&quot;, Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex() {&#10;        int checkedId = rgCorrectAnswer.getCheckedRadioButtonId();&#10;&#10;        if (checkedId == rbOptionA.getId()) {&#10;            return 0;&#10;        } else if (checkedId == rbOptionB.getId()) {&#10;            return 1;&#10;        } else if (checkedId == rbOptionC.getId()) {&#10;            return 2;&#10;        } else if (checkedId == rbOptionD.getId()) {&#10;            return 3;&#10;        }&#10;&#10;        return -1;&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class EditSingleTestQuestionActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;EditSingleTestQuestion&quot;;&#10;    &#10;    private Toolbar toolbar;&#10;    private TextInputEditText etQuestion, etOptionA, etOptionB, etOptionC, etOptionD;&#10;    private RadioGroup rgCorrectAnswer;&#10;    private RadioButton rbOptionA, rbOptionB, rbOptionC, rbOptionD;&#10;    private Button btnSaveQuestion, btnDeleteQuestion;&#10;    &#10;    private FirebaseFirestore db;&#10;    private String courseId, courseName, questionId;&#10;    private SimpleTestQuestion currentQuestion;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_single_test_question);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getQuestionInfo();&#10;        setupClickListeners();&#10;        loadQuestionData();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        etQuestion = findViewById(R.id.et_question);&#10;        etOptionA = findViewById(R.id.et_option_a);&#10;        etOptionB = findViewById(R.id.et_option_b);&#10;        etOptionC = findViewById(R.id.et_option_c);&#10;        etOptionD = findViewById(R.id.et_option_d);&#10;        rgCorrectAnswer = findViewById(R.id.rg_correct_answer);&#10;        rbOptionA = findViewById(R.id.rb_option_a);&#10;        rbOptionB = findViewById(R.id.rb_option_b);&#10;        rbOptionC = findViewById(R.id.rb_option_c);&#10;        rbOptionD = findViewById(R.id.rb_option_d);&#10;        btnSaveQuestion = findViewById(R.id.btn_save_question);&#10;        btnDeleteQuestion = findViewById(R.id.btn_delete_question);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa câu hỏi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void getQuestionInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;        questionId = getIntent().getStringExtra(&quot;questionId&quot;);&#10;        &#10;        if (courseName != null) {&#10;            getSupportActionBar().setSubtitle(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSaveQuestion.setOnClickListener(v -&gt; saveQuestion());&#10;        btnDeleteQuestion.setOnClickListener(v -&gt; deleteQuestion());&#10;    }&#10;&#10;    private void loadQuestionData() {&#10;        if (questionId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Loading question data for ID: &quot; + questionId);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentQuestion = documentSnapshot.toObject(SimpleTestQuestion.class);&#10;                        if (currentQuestion != null) {&#10;                            currentQuestion.setDocumentId(documentSnapshot.getId());&#10;                            populateFields();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error loading question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi tải câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void populateFields() {&#10;        if (currentQuestion == null) return;&#10;&#10;        // Điền nội dung câu hỏi&#10;        etQuestion.setText(currentQuestion.getQuestion());&#10;&#10;        // Điền các lựa chọn - options là array chứa 4 đáp án&#10;        List&lt;String&gt; options = currentQuestion.getOptions();&#10;        if (options != null &amp;&amp; options.size() &gt;= 4) {&#10;            etOptionA.setText(options.get(0));&#10;            etOptionB.setText(options.get(1));&#10;            etOptionC.setText(options.get(2));&#10;            etOptionD.setText(options.get(3));&#10;        }&#10;&#10;        // Chọn đáp án đúng - correctAnswer là number (index)&#10;        int correctIndex = currentQuestion.getCorrectAnswer();&#10;        switch (correctIndex) {&#10;            case 0:&#10;                rbOptionA.setChecked(true);&#10;                break;&#10;            case 1:&#10;                rbOptionB.setChecked(true);&#10;                break;&#10;            case 2:&#10;                rbOptionC.setChecked(true);&#10;                break;&#10;            case 3:&#10;                rbOptionD.setChecked(true);&#10;                break;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Populated fields for question: &quot; + currentQuestion.getQuestion());&#10;    }&#10;&#10;    private void saveQuestion() {&#10;        if (!validateInput()) {&#10;            return;&#10;        }&#10;&#10;        String questionText = etQuestion.getText().toString().trim();&#10;        List&lt;String&gt; options = new ArrayList&lt;&gt;();&#10;        options.add(etOptionA.getText().toString().trim());&#10;        options.add(etOptionB.getText().toString().trim());&#10;        options.add(etOptionC.getText().toString().trim());&#10;        options.add(etOptionD.getText().toString().trim());&#10;&#10;        int correctAnswerIndex = getCorrectAnswerIndex();&#10;&#10;        // Cập nhật currentQuestion với cấu trúc đúng&#10;        currentQuestion.setQuestion(questionText);&#10;        currentQuestion.setOptions(options);                    // options là array&#10;        currentQuestion.setCorrectAnswer(correctAnswerIndex);   // correctAnswer là number&#10;&#10;        btnSaveQuestion.setEnabled(false);&#10;        btnSaveQuestion.setText(&quot;Đang lưu...&quot;);&#10;&#10;        Log.d(TAG, &quot;Saving question: &quot; + currentQuestion.toString());&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .set(currentQuestion)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Log.d(TAG, &quot;Question saved successfully&quot;);&#10;                    Toast.makeText(this, &quot;Đã lưu câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error saving question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi lưu câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                    btnSaveQuestion.setEnabled(true);&#10;                    btnSaveQuestion.setText(&quot;Lưu thay đổi&quot;);&#10;                });&#10;    }&#10;&#10;    private void deleteQuestion() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xác nhận xóa câu hỏi&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa câu hỏi này?\n\nHành động này không thể hoàn tác.&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; performDeleteQuestion())&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .setIcon(android.R.drawable.ic_dialog_alert)&#10;                .show();&#10;    }&#10;&#10;    private void performDeleteQuestion() {&#10;        btnDeleteQuestion.setEnabled(false);&#10;        btnDeleteQuestion.setText(&quot;Đang xóa...&quot;);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .document(questionId)&#10;                .delete()&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Log.d(TAG, &quot;Question deleted successfully&quot;);&#10;                    Toast.makeText(this, &quot;Đã xóa câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error deleting question&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                    btnDeleteQuestion.setEnabled(true);&#10;                    btnDeleteQuestion.setText(&quot;Xóa câu hỏi&quot;);&#10;                });&#10;    }&#10;&#10;    private boolean validateInput() {&#10;        String questionText = etQuestion.getText().toString().trim();&#10;        if (questionText.isEmpty()) {&#10;            etQuestion.setError(&quot;Vui lòng nhập nội dung câu hỏi&quot;);&#10;            etQuestion.requestFocus();&#10;            return false;&#10;        }&#10;&#10;        String[] options = {&#10;            etOptionA.getText().toString().trim(),&#10;            etOptionB.getText().toString().trim(),&#10;            etOptionC.getText().toString().trim(),&#10;            etOptionD.getText().toString().trim()&#10;        };&#10;&#10;        for (int i = 0; i &lt; options.length; i++) {&#10;            if (options[i].isEmpty()) {&#10;                switch (i) {&#10;                    case 0:&#10;                        etOptionA.setError(&quot;Vui lòng nhập lựa chọn A&quot;);&#10;                        etOptionA.requestFocus();&#10;                        break;&#10;                    case 1:&#10;                        etOptionB.setError(&quot;Vui lòng nhập lựa chọn B&quot;);&#10;                        etOptionB.requestFocus();&#10;                        break;&#10;                    case 2:&#10;                        etOptionC.setError(&quot;Vui lòng nhập lựa chọn C&quot;);&#10;                        etOptionC.requestFocus();&#10;                        break;&#10;                    case 3:&#10;                        etOptionD.setError(&quot;Vui lòng nhập lựa chọn D&quot;);&#10;                        etOptionD.requestFocus();&#10;                        break;&#10;                }&#10;                return false;&#10;            }&#10;        }&#10;&#10;        if (rgCorrectAnswer.getCheckedRadioButtonId() == -1) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn đáp án đúng&quot;, Toast.LENGTH_SHORT).show();&#10;            return false;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private int getCorrectAnswerIndex() {&#10;        int checkedId = rgCorrectAnswer.getCheckedRadioButtonId();&#10;        &#10;        if (checkedId == rbOptionA.getId()) {&#10;            return 0;&#10;        } else if (checkedId == rbOptionB.getId()) {&#10;            return 1;&#10;        } else if (checkedId == rbOptionC.getId()) {&#10;            return 2;&#10;        } else if (checkedId == rbOptionD.getId()) {&#10;            return 3;&#10;        }&#10;        &#10;        return -1;&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditTestQuestionsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EditTestQuestionsActivity.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import com.vantinh.tienganh.adapters.EditTestQuestionAdapter;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class EditTestQuestionsActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;EditTestQuestions&quot;;&#10;    &#10;    private Toolbar toolbar;&#10;    private RecyclerView recyclerView;&#10;    private ProgressBar progressBar;&#10;    private TextView tvNoQuestions;&#10;    private EditTestQuestionAdapter adapter;&#10;    &#10;    private FirebaseFirestore db;&#10;    private String courseId;&#10;    private String courseName;&#10;    private List&lt;SimpleTestQuestion&gt; testQuestions;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_test_questions);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        getCourseInfo();&#10;        setupRecyclerView();&#10;        loadTestQuestions();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        recyclerView = findViewById(R.id.rv_test_questions);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;        tvNoQuestions = findViewById(R.id.tv_no_questions);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chỉnh sửa bài kiểm tra&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void getCourseInfo() {&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;        &#10;        if (courseName != null) {&#10;            getSupportActionBar().setSubtitle(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        testQuestions = new ArrayList&lt;&gt;();&#10;        adapter = new EditTestQuestionAdapter(testQuestions, this::editQuestion, this::deleteQuestion);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void loadTestQuestions() {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        recyclerView.setVisibility(View.GONE);&#10;        tvNoQuestions.setVisibility(View.GONE);&#10;&#10;        Log.d(TAG, &quot;Loading test questions for courseId: &quot; + courseId);&#10;&#10;        db.collection(&quot;test&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    testQuestions.clear();&#10;                    &#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        SimpleTestQuestion question = document.toObject(SimpleTestQuestion.class);&#10;                        question.setDocumentId(document.getId()); // Lưu document ID để có thể edit/delete&#10;                        testQuestions.add(question);&#10;                        &#10;                        Log.d(TAG, &quot;Loaded question: &quot; + question.getQuestion());&#10;                    }&#10;&#10;                    progressBar.setVisibility(View.GONE);&#10;                    &#10;                    if (testQuestions.isEmpty()) {&#10;                        tvNoQuestions.setVisibility(View.VISIBLE);&#10;                        recyclerView.setVisibility(View.GONE);&#10;                    } else {&#10;                        tvNoQuestions.setVisibility(View.GONE);&#10;                        recyclerView.setVisibility(View.VISIBLE);&#10;                        adapter.notifyDataSetChanged();&#10;                    }&#10;&#10;                    Log.d(TAG, &quot;Total questions loaded: &quot; + testQuestions.size());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(TAG, &quot;Error loading test questions&quot;, e);&#10;                    progressBar.setVisibility(View.GONE);&#10;                    tvNoQuestions.setVisibility(View.VISIBLE);&#10;                    tvNoQuestions.setText(&quot;Lỗi khi tải danh sách câu hỏi&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi khi tải danh sách câu hỏi: &quot; + e.getMessage(), &#10;                                 Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void editQuestion(SimpleTestQuestion question) {&#10;        // Chuyển đến activity chỉnh sửa câu hỏi&#10;        Intent intent = new Intent(this, EditSingleTestQuestionActivity.class);&#10;        intent.putExtra(&quot;courseId&quot;, courseId);&#10;        intent.putExtra(&quot;courseName&quot;, courseName);&#10;        intent.putExtra(&quot;questionId&quot;, question.getDocumentId());&#10;        intent.putExtra(&quot;question&quot;, question.getQuestion());&#10;        // Truyền thêm dữ liệu khác nếu cần&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void deleteQuestion(SimpleTestQuestion question) {&#10;        // Xóa câu hỏi&#10;        if (question.getDocumentId() != null) {&#10;            db.collection(&quot;test&quot;)&#10;                    .document(question.getDocumentId())&#10;                    .delete()&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        Log.d(TAG, &quot;Question deleted successfully&quot;);&#10;                        Toast.makeText(this, &quot;Đã xóa câu hỏi&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadTestQuestions(); // Reload danh sách&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Log.e(TAG, &quot;Error deleting question&quot;, e);&#10;                        Toast.makeText(this, &quot;Lỗi khi xóa câu hỏi: &quot; + e.getMessage(), &#10;                                     Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onSupportNavigateUp() {&#10;        onBackPressed();&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload danh sách khi quay lại từ activity chỉnh sửa&#10;        loadTestQuestions();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrolledCourse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrolledCourse.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;public class EnrolledCourse {&#10;    private Course course;&#10;    private String enrollmentId;&#10;    private String enrollmentDate;&#10;    private int progress; // Phần trăm hoàn thành (0-100)&#10;    private int completedLessons;&#10;    private int totalLessons;&#10;    private String lastLessonId;&#10;    private String status; // &quot;active&quot;, &quot;completed&quot;, &quot;paused&quot;&#10;&#10;    // Constructors&#10;    public EnrolledCourse() {&#10;        this.progress = 0;&#10;        this.completedLessons = 0;&#10;        this.totalLessons = 0;&#10;        this.status = &quot;active&quot;;&#10;    }&#10;&#10;    public EnrolledCourse(Course course, String enrollmentId) {&#10;        this();&#10;        this.course = course;&#10;        this.enrollmentId = enrollmentId;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public Course getCourse() {&#10;        return course;&#10;    }&#10;&#10;    public void setCourse(Course course) {&#10;        this.course = course;&#10;    }&#10;&#10;    public String getEnrollmentId() {&#10;        return enrollmentId;&#10;    }&#10;&#10;    public void setEnrollmentId(String enrollmentId) {&#10;        this.enrollmentId = enrollmentId;&#10;    }&#10;&#10;    public String getEnrollmentDate() {&#10;        return enrollmentDate;&#10;    }&#10;&#10;    public void setEnrollmentDate(String enrollmentDate) {&#10;        this.enrollmentDate = enrollmentDate;&#10;    }&#10;&#10;    public int getProgress() {&#10;        return progress;&#10;    }&#10;&#10;    public void setProgress(int progress) {&#10;        this.progress = Math.max(0, Math.min(100, progress)); // Ensure 0-100 range&#10;    }&#10;&#10;    public int getCompletedLessons() {&#10;        return completedLessons;&#10;    }&#10;&#10;    public void setCompletedLessons(int completedLessons) {&#10;        this.completedLessons = completedLessons;&#10;        updateProgress();&#10;    }&#10;&#10;    public int getTotalLessons() {&#10;        return totalLessons;&#10;    }&#10;&#10;    public void setTotalLessons(int totalLessons) {&#10;        this.totalLessons = totalLessons;&#10;        updateProgress();&#10;    }&#10;&#10;    public String getLastLessonId() {&#10;        return lastLessonId;&#10;    }&#10;&#10;    public void setLastLessonId(String lastLessonId) {&#10;        this.lastLessonId = lastLessonId;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    // Helper methods for UI display&#10;    public String getProgressText() {&#10;        if (totalLessons &gt; 0) {&#10;            return completedLessons + &quot;/&quot; + totalLessons + &quot; bài học&quot;;&#10;        }&#10;        return &quot;0/0 bài học&quot;;&#10;    }&#10;&#10;    public String getProgressPercentageText() {&#10;        return progress + &quot;%&quot;;&#10;    }&#10;&#10;    // Auto-update progress when lessons change&#10;    private void updateProgress() {&#10;        if (totalLessons &gt; 0) {&#10;            this.progress = (int) ((float) completedLessons / totalLessons * 100);&#10;        } else {&#10;            this.progress = 0;&#10;        }&#10;    }&#10;&#10;    // Method để tính toán tiến độ thực tế từ Firebase&#10;    public void calculateActualProgress(String courseId, String studentId, FirebaseFirestore db) {&#10;        // Load tổng số lessons của course&#10;        db.collection(&quot;courses&quot;).document(courseId).collection(&quot;lessons&quot;)&#10;                .get()&#10;                .addOnSuccessListener(lessonsSnapshot -&gt; {&#10;                    int totalLessonsCount = lessonsSnapshot.size();&#10;                    setTotalLessons(totalLessonsCount);&#10;&#10;                    // Load số lessons đã hoàn thành của student&#10;                    db.collection(&quot;studentProgress&quot;)&#10;                            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                            .whereEqualTo(&quot;completed&quot;, true)&#10;                            .get()&#10;                            .addOnSuccessListener(progressSnapshot -&gt; {&#10;                                int completedLessonsCount = progressSnapshot.size();&#10;                                setCompletedLessons(completedLessonsCount);&#10;&#10;                                android.util.Log.d(&quot;EnrolledCourse&quot;, &quot;Course &quot; + courseId +&#10;                                    &quot; - Completed: &quot; + completedLessonsCount + &quot;/&quot; + totalLessonsCount);&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                android.util.Log.e(&quot;EnrolledCourse&quot;, &quot;Error loading progress&quot;, e);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;EnrolledCourse&quot;, &quot;Error loading lessons&quot;, e);&#10;                });&#10;    }&#10;&#10;    // Check if course is completed&#10;    public boolean isCompleted() {&#10;        return progress &gt;= 100 || &quot;completed&quot;.equals(status);&#10;    }&#10;&#10;    // Check if student can continue learning&#10;    public boolean canContinueLearning() {&#10;        return !isCompleted() &amp;&amp; &quot;active&quot;.equals(status);&#10;    }&#10;&#10;    // Get display status for UI&#10;    public String getDisplayStatus() {&#10;        if (isCompleted()) {&#10;            return &quot;Hoàn thành&quot;;&#10;        } else if (progress &gt; 0) {&#10;            return &quot;Đang học&quot;;&#10;        } else {&#10;            return &quot;Chưa bắt đầu&quot;;&#10;        }&#10;    }&#10;&#10;    // Helper method to calculate and update progress&#10;    public void updateProgress() {&#10;        if (totalLessons &gt; 0) {&#10;            this.progress = (completedLessons * 100) / totalLessons;&#10;        } else {&#10;            this.progress = 0;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;EnrolledCourse{&quot; +&#10;                &quot;course=&quot; + (course != null ? course.getTitle() : &quot;null&quot;) +&#10;                &quot;, progress=&quot; + progress +&#10;                &quot;, completedLessons=&quot; + completedLessons +&#10;                &quot;, totalLessons=&quot; + totalLessons +&#10;                &quot;, status='&quot; + status + '\'' +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;public class EnrolledCourse {&#10;    private Course course;&#10;    private String enrollmentId;&#10;    private String enrollmentDate;&#10;    private int progress; // Phần trăm hoàn thành (0-100)&#10;    private int completedLessons;&#10;    private int totalLessons;&#10;    private String lastLessonId;&#10;    private String status; // &quot;active&quot;, &quot;completed&quot;, &quot;paused&quot;&#10;&#10;    // Constructors&#10;    public EnrolledCourse() {&#10;        this.progress = 0;&#10;        this.completedLessons = 0;&#10;        this.totalLessons = 0;&#10;        this.status = &quot;active&quot;;&#10;    }&#10;&#10;    public EnrolledCourse(Course course, String enrollmentId) {&#10;        this();&#10;        this.course = course;&#10;        this.enrollmentId = enrollmentId;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public Course getCourse() {&#10;        return course;&#10;    }&#10;&#10;    public void setCourse(Course course) {&#10;        this.course = course;&#10;    }&#10;&#10;    public String getEnrollmentId() {&#10;        return enrollmentId;&#10;    }&#10;&#10;    public void setEnrollmentId(String enrollmentId) {&#10;        this.enrollmentId = enrollmentId;&#10;    }&#10;&#10;    public String getEnrollmentDate() {&#10;        return enrollmentDate;&#10;    }&#10;&#10;    public void setEnrollmentDate(String enrollmentDate) {&#10;        this.enrollmentDate = enrollmentDate;&#10;    }&#10;&#10;    public int getProgress() {&#10;        return progress;&#10;    }&#10;&#10;    public void setProgress(int progress) {&#10;        this.progress = Math.max(0, Math.min(100, progress)); // Ensure 0-100 range&#10;    }&#10;&#10;    public int getCompletedLessons() {&#10;        return completedLessons;&#10;    }&#10;&#10;    public void setCompletedLessons(int completedLessons) {&#10;        this.completedLessons = completedLessons;&#10;        updateProgress();&#10;    }&#10;&#10;    public int getTotalLessons() {&#10;        return totalLessons;&#10;    }&#10;&#10;    public void setTotalLessons(int totalLessons) {&#10;        this.totalLessons = totalLessons;&#10;        updateProgress();&#10;    }&#10;&#10;    public String getLastLessonId() {&#10;        return lastLessonId;&#10;    }&#10;&#10;    public void setLastLessonId(String lastLessonId) {&#10;        this.lastLessonId = lastLessonId;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    // Helper methods for UI display&#10;    public String getProgressText() {&#10;        if (totalLessons &gt; 0) {&#10;            return completedLessons + &quot;/&quot; + totalLessons + &quot; bài học&quot;;&#10;        }&#10;        return &quot;0/0 bài học&quot;;&#10;    }&#10;&#10;    public String getProgressPercentageText() {&#10;        return progress + &quot;%&quot;;&#10;    }&#10;&#10;    // Auto-update progress when lessons change&#10;    private void updateProgress() {&#10;        if (totalLessons &gt; 0) {&#10;            this.progress = (int) ((float) completedLessons / totalLessons * 100);&#10;        } else {&#10;            this.progress = 0;&#10;        }&#10;    }&#10;&#10;    // Method để tính toán tiến độ thực tế từ Firebase&#10;    public void calculateActualProgress(String courseId, String studentId, FirebaseFirestore db) {&#10;        // Load tổng số lessons của course&#10;        db.collection(&quot;courses&quot;).document(courseId).collection(&quot;lessons&quot;)&#10;                .get()&#10;                .addOnSuccessListener(lessonsSnapshot -&gt; {&#10;                    int totalLessonsCount = lessonsSnapshot.size();&#10;                    setTotalLessons(totalLessonsCount);&#10;&#10;                    // Load số lessons đã hoàn thành của student&#10;                    db.collection(&quot;studentProgress&quot;)&#10;                            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                            .whereEqualTo(&quot;completed&quot;, true)&#10;                            .get()&#10;                            .addOnSuccessListener(progressSnapshot -&gt; {&#10;                                int completedLessonsCount = progressSnapshot.size();&#10;                                setCompletedLessons(completedLessonsCount);&#10;&#10;                                android.util.Log.d(&quot;EnrolledCourse&quot;, &quot;Course &quot; + courseId +&#10;                                    &quot; - Completed: &quot; + completedLessonsCount + &quot;/&quot; + totalLessonsCount);&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                android.util.Log.e(&quot;EnrolledCourse&quot;, &quot;Error loading progress&quot;, e);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;EnrolledCourse&quot;, &quot;Error loading lessons&quot;, e);&#10;                });&#10;    }&#10;&#10;    // Check if course is completed&#10;    public boolean isCompleted() {&#10;        return progress &gt;= 100 || &quot;completed&quot;.equals(status);&#10;    }&#10;&#10;    // Check if student can continue learning&#10;    public boolean canContinueLearning() {&#10;        return !isCompleted() &amp;&amp; &quot;active&quot;.equals(status);&#10;    }&#10;&#10;    // Get display status for UI&#10;    public String getDisplayStatus() {&#10;        if (isCompleted()) {&#10;            return &quot;Hoàn thành&quot;;&#10;        } else if (progress &gt; 0) {&#10;            return &quot;Đang học&quot;;&#10;        } else {&#10;            return &quot;Chưa bắt đầu&quot;;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;EnrolledCourse{&quot; +&#10;                &quot;course=&quot; + (course != null ? course.getTitle() : &quot;null&quot;) +&#10;                &quot;, progress=&quot; + progress +&#10;                &quot;, completedLessons=&quot; + completedLessons +&#10;                &quot;, totalLessons=&quot; + totalLessons +&#10;                &quot;, status='&quot; + status + '\'' +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentListActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentListActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.animation.Animation;&#10;import android.view.animation.AnimationUtils;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Set;&#10;&#10;public class EnrollmentListActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvEnrollments;&#10;    private LinearLayout layoutEmpty;&#10;    private TextView tvTotalCount, tvEmptyMessage;&#10;    private FloatingActionButton fabRefresh;&#10;&#10;    private FirebaseFirestore db;&#10;    private List&lt;EnrollmentStudent&gt; enrollmentStudents;&#10;    private EnrollmentStudentAdapter adapter;&#10;&#10;    private String teacherId;&#10;    private String status;&#10;    private String title;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_enrollment_list);&#10;&#10;        initViews();&#10;        getIntentData();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        initFirebase();&#10;        setupFabRefresh();&#10;        loadEnrollmentData();&#10;        addEntranceAnimations();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvEnrollments = findViewById(R.id.rv_enrollments);&#10;        layoutEmpty = findViewById(R.id.layout_empty);&#10;        tvTotalCount = findViewById(R.id.tv_total_count);&#10;        tvEmptyMessage = findViewById(R.id.tv_empty_message);&#10;        fabRefresh = findViewById(R.id.fab_refresh);&#10;    }&#10;&#10;    private void getIntentData() {&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#10;        status = getIntent().getStringExtra(&quot;status&quot;);&#10;        title = getIntent().getStringExtra(&quot;title&quot;);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(title);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        enrollmentStudents = new ArrayList&lt;&gt;();&#10;        adapter = new EnrollmentStudentAdapter(enrollmentStudents);&#10;        rvEnrollments.setLayoutManager(new LinearLayoutManager(this));&#10;        rvEnrollments.setAdapter(adapter);&#10;&#10;        // Add item animation&#10;        rvEnrollments.setItemAnimator(new androidx.recyclerview.widget.DefaultItemAnimator());&#10;    }&#10;&#10;    private void initFirebase() {&#10;        db = FirebaseFirestore.getInstance();&#10;    }&#10;&#10;    private void setupFabRefresh() {&#10;        fabRefresh.setOnClickListener(v -&gt; {&#10;            // Animate FAB&#10;            fabRefresh.animate()&#10;                    .rotation(360f)&#10;                    .setDuration(500)&#10;                    .withEndAction(() -&gt; {&#10;                        fabRefresh.setRotation(0f);&#10;                        loadEnrollmentData();&#10;                    })&#10;                    .start();&#10;        });&#10;    }&#10;&#10;    private void addEntranceAnimations() {&#10;        // Fade in animations&#10;        View headerCard = findViewById(R.id.header_card);&#10;        headerCard.setAlpha(0f);&#10;        rvEnrollments.setAlpha(0f);&#10;        fabRefresh.setAlpha(0f);&#10;&#10;        headerCard.animate()&#10;                .alpha(1f)&#10;                .setDuration(600)&#10;                .setStartDelay(100)&#10;                .start();&#10;&#10;        rvEnrollments.animate()&#10;                .alpha(1f)&#10;                .setDuration(600)&#10;                .setStartDelay(200)&#10;                .start();&#10;&#10;        fabRefresh.animate()&#10;                .alpha(1f)&#10;                .setDuration(600)&#10;                .setStartDelay(300)&#10;                .start();&#10;    }&#10;&#10;    private void loadEnrollmentData() {&#10;        Log.d(&quot;EnrollmentList&quot;, &quot;Loading enrollment data for teacherId: &quot; + teacherId + &quot;, status: &quot; + status);&#10;&#10;        // Lấy danh sách khóa học của giáo viên trước&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    List&lt;String&gt; courseIds = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        courseIds.add(document.getId());&#10;                    }&#10;&#10;                    Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + courseIds.size() + &quot; courses for teacher&quot;);&#10;&#10;                    if (courseIds.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    loadStudentsByStatus(courseIds);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;EnrollmentList&quot;, &quot;Error loading courses&quot;, e);&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadStudentsByStatus(List&lt;String&gt; courseIds) {&#10;        final List&lt;EnrollmentStudent&gt; allStudents = new ArrayList&lt;&gt;();&#10;        final Set&lt;String&gt; uniqueStudents = new HashSet&lt;&gt;(); // Để tránh trùng lặp&#10;&#10;        for (String courseId : courseIds) {&#10;            db.collection(&quot;courseRequests&quot;)&#10;                    .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                    .whereEqualTo(&quot;status&quot;, status)&#10;                    .get()&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                        Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; requests for course: &quot; + courseId);&#10;&#10;                        for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                            String studentId = document.getString(&quot;studentId&quot;);&#10;                            String studentName = document.getString(&quot;studentName&quot;);&#10;                            String courseName = document.getString(&quot;courseName&quot;);&#10;&#10;                            // Tạo key unique dựa trên studentId và courseId để tránh trùng lặp&#10;                            String uniqueKey = studentId + &quot;_&quot; + courseId;&#10;&#10;                            if (!uniqueStudents.contains(uniqueKey)) {&#10;                                uniqueStudents.add(uniqueKey);&#10;                                EnrollmentStudent student = new EnrollmentStudent(&#10;                                        studentId, studentName, courseId, courseName, status&#10;                                );&#10;                                allStudents.add(student);&#10;                            }&#10;                        }&#10;&#10;                        // Cập nhật UI sau khi xử lý tất cả courses&#10;                        updateUI(allStudents);&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Log.e(&quot;EnrollmentList&quot;, &quot;Error loading requests for course: &quot; + courseId, e);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void updateUI(List&lt;EnrollmentStudent&gt; students) {&#10;        runOnUiThread(() -&gt; {&#10;            enrollmentStudents.clear();&#10;            enrollmentStudents.addAll(students);&#10;            adapter.updateData(enrollmentStudents);&#10;&#10;            // Animate count update&#10;            animateCountUpdate(students.size());&#10;&#10;            if (students.isEmpty()) {&#10;                showEmptyState();&#10;            } else {&#10;                showDataState();&#10;            }&#10;&#10;            Log.d(&quot;EnrollmentList&quot;, &quot;Updated UI with &quot; + students.size() + &quot; students&quot;);&#10;        });&#10;    }&#10;&#10;    private void animateCountUpdate(int newCount) {&#10;        // Scale animation for count&#10;        tvTotalCount.animate()&#10;                .scaleX(1.2f)&#10;                .scaleY(1.2f)&#10;                .setDuration(200)&#10;                .withEndAction(() -&gt; {&#10;                    tvTotalCount.setText(String.valueOf(newCount));&#10;                    tvTotalCount.animate()&#10;                            .scaleX(1f)&#10;                            .scaleY(1f)&#10;                            .setDuration(200)&#10;                            .start();&#10;                })&#10;                .start();&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        rvEnrollments.setVisibility(View.GONE);&#10;        layoutEmpty.setVisibility(View.VISIBLE);&#10;&#10;        String message = &quot;Không có học viên nào &quot;;&#10;        if (&quot;approved&quot;.equals(status)) {&#10;            message += &quot;đã được duyệt&quot;;&#10;        } else if (&quot;rejected&quot;.equals(status)) {&#10;            message += &quot;đã bị từ chối&quot;;&#10;        }&#10;&#10;        tvEmptyMessage.setText(message);&#10;&#10;        // Animate empty state&#10;        layoutEmpty.setAlpha(0f);&#10;        layoutEmpty.animate()&#10;                .alpha(1f)&#10;                .setDuration(500)&#10;                .start();&#10;    }&#10;&#10;    private void showDataState() {&#10;        rvEnrollments.setVisibility(View.VISIBLE);&#10;        layoutEmpty.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.util.Log;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.view.animation.Animation;&#13;&#10;import android.view.animation.AnimationUtils;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.TextView;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.HashSet;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;public class EnrollmentListActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private RecyclerView rvEnrollments;&#13;&#10;    private LinearLayout layoutEmpty;&#13;&#10;    private TextView tvTotalCount, tvEmptyMessage;&#13;&#10;    private Button fabRefresh;&#13;&#10;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private List&lt;EnrollmentStudent&gt; enrollmentStudents;&#13;&#10;    private EnrollmentStudentAdapter adapter;&#13;&#10;&#13;&#10;    private String teacherId;&#13;&#10;    private String status;&#13;&#10;    private String title;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_enrollment_list);&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        getIntentData();&#13;&#10;        setupToolbar();&#13;&#10;        setupRecyclerView();&#13;&#10;        initFirebase();&#13;&#10;        setupFabRefresh();&#13;&#10;        loadEnrollmentData();&#13;&#10;        addEntranceAnimations();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        rvEnrollments = findViewById(R.id.rv_enrollments);&#13;&#10;        layoutEmpty = findViewById(R.id.layout_empty);&#13;&#10;        tvTotalCount = findViewById(R.id.tv_total_count);&#13;&#10;        tvEmptyMessage = findViewById(R.id.tv_empty_message);&#13;&#10;        fabRefresh = findViewById(R.id.fab_refresh);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void getIntentData() {&#13;&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#13;&#10;        status = getIntent().getStringExtra(&quot;status&quot;);&#13;&#10;        title = getIntent().getStringExtra(&quot;title&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(title);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupRecyclerView() {&#13;&#10;        enrollmentStudents = new ArrayList&lt;&gt;();&#13;&#10;        adapter = new EnrollmentStudentAdapter(enrollmentStudents);&#13;&#10;        rvEnrollments.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        rvEnrollments.setAdapter(adapter);&#13;&#10;&#13;&#10;        // Add item animation&#13;&#10;        rvEnrollments.setItemAnimator(new androidx.recyclerview.widget.DefaultItemAnimator());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initFirebase() {&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupFabRefresh() {&#13;&#10;        fabRefresh.setOnClickListener(v -&gt; {&#13;&#10;            // Animate FAB&#13;&#10;            fabRefresh.animate()&#13;&#10;                    .rotation(360f)&#13;&#10;                    .setDuration(500)&#13;&#10;                    .withEndAction(() -&gt; {&#13;&#10;                        fabRefresh.setRotation(0f);&#13;&#10;                        loadEnrollmentData();&#13;&#10;                    })&#13;&#10;                    .start();&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addEntranceAnimations() {&#13;&#10;        // Fade in animations&#13;&#10;        View headerCard = findViewById(R.id.header_card);&#13;&#10;        headerCard.setAlpha(0f);&#13;&#10;        rvEnrollments.setAlpha(0f);&#13;&#10;        fabRefresh.setAlpha(0f);&#13;&#10;&#13;&#10;        headerCard.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(600)&#13;&#10;                .setStartDelay(100)&#13;&#10;                .start();&#13;&#10;&#13;&#10;        rvEnrollments.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(600)&#13;&#10;                .setStartDelay(200)&#13;&#10;                .start();&#13;&#10;&#13;&#10;        fabRefresh.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(600)&#13;&#10;                .setStartDelay(300)&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadEnrollmentData() {&#13;&#10;        Log.d(&quot;EnrollmentList&quot;, &quot;Loading enrollment data for teacherId: &quot; + teacherId + &quot;, status: &quot; + status);&#13;&#10;&#13;&#10;        // Lấy danh sách khóa học của giáo viên trước&#13;&#10;        db.collection(&quot;courses&quot;)&#13;&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                    List&lt;String&gt; courseIds = new ArrayList&lt;&gt;();&#13;&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#13;&#10;                        courseIds.add(document.getId());&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + courseIds.size() + &quot; courses for teacher&quot;);&#13;&#10;&#13;&#10;                    if (courseIds.isEmpty()) {&#13;&#10;                        showEmptyState();&#13;&#10;                        return;&#13;&#10;                    }&#13;&#10;&#13;&#10;                    loadStudentsByStatus(courseIds);&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    Log.e(&quot;EnrollmentList&quot;, &quot;Error loading courses&quot;, e);&#13;&#10;                    showEmptyState();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadStudentsByStatus(List&lt;String&gt; courseIds) {&#13;&#10;        final List&lt;EnrollmentStudent&gt; allStudents = new ArrayList&lt;&gt;();&#13;&#10;        final Set&lt;String&gt; uniqueStudents = new HashSet&lt;&gt;(); // Để tránh trùng lặp&#13;&#10;&#13;&#10;        for (String courseId : courseIds) {&#13;&#10;            db.collection(&quot;courseRequests&quot;)&#13;&#10;                    .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                    .whereEqualTo(&quot;status&quot;, status)&#13;&#10;                    .get()&#13;&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                        Log.d(&quot;EnrollmentList&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; requests for course: &quot; + courseId);&#13;&#10;&#13;&#10;                        for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#13;&#10;                            String studentId = document.getString(&quot;studentId&quot;);&#13;&#10;                            String studentName = document.getString(&quot;studentName&quot;);&#13;&#10;                            String courseName = document.getString(&quot;courseName&quot;);&#13;&#10;&#13;&#10;                            // Tạo key unique dựa trên studentId và courseId để tránh trùng lặp&#13;&#10;                            String uniqueKey = studentId + &quot;_&quot; + courseId;&#13;&#10;&#13;&#10;                            if (!uniqueStudents.contains(uniqueKey)) {&#13;&#10;                                uniqueStudents.add(uniqueKey);&#13;&#10;                                EnrollmentStudent student = new EnrollmentStudent(&#13;&#10;                                        studentId, studentName, courseId, courseName, status&#13;&#10;                                );&#13;&#10;                                allStudents.add(student);&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;&#13;&#10;                        // Cập nhật UI sau khi xử lý tất cả courses&#13;&#10;                        updateUI(allStudents);&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        Log.e(&quot;EnrollmentList&quot;, &quot;Error loading requests for course: &quot; + courseId, e);&#13;&#10;                    });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateUI(List&lt;EnrollmentStudent&gt; students) {&#13;&#10;        runOnUiThread(() -&gt; {&#13;&#10;            enrollmentStudents.clear();&#13;&#10;            enrollmentStudents.addAll(students);&#13;&#10;            adapter.updateData(enrollmentStudents);&#13;&#10;&#13;&#10;            // Animate count update&#13;&#10;            animateCountUpdate(students.size());&#13;&#10;&#13;&#10;            if (students.isEmpty()) {&#13;&#10;                showEmptyState();&#13;&#10;            } else {&#13;&#10;                showDataState();&#13;&#10;            }&#13;&#10;&#13;&#10;            Log.d(&quot;EnrollmentList&quot;, &quot;Updated UI with &quot; + students.size() + &quot; students&quot;);&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void animateCountUpdate(int newCount) {&#13;&#10;        // Scale animation for count&#13;&#10;        tvTotalCount.animate()&#13;&#10;                .scaleX(1.2f)&#13;&#10;                .scaleY(1.2f)&#13;&#10;                .setDuration(200)&#13;&#10;                .withEndAction(() -&gt; {&#13;&#10;                    tvTotalCount.setText(String.valueOf(newCount));&#13;&#10;                    tvTotalCount.animate()&#13;&#10;                            .scaleX(1f)&#13;&#10;                            .scaleY(1f)&#13;&#10;                            .setDuration(200)&#13;&#10;                            .start();&#13;&#10;                })&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showEmptyState() {&#13;&#10;        rvEnrollments.setVisibility(View.GONE);&#13;&#10;        layoutEmpty.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        String message = &quot;Không có học viên nào &quot;;&#13;&#10;        if (&quot;approved&quot;.equals(status)) {&#13;&#10;            message += &quot;đã được duyệt&quot;;&#13;&#10;        } else if (&quot;rejected&quot;.equals(status)) {&#13;&#10;            message += &quot;đã bị từ chối&quot;;&#13;&#10;        }&#13;&#10;&#13;&#10;        tvEmptyMessage.setText(message);&#13;&#10;&#13;&#10;        // Animate empty state&#13;&#10;        layoutEmpty.setAlpha(0f);&#13;&#10;        layoutEmpty.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(500)&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showDataState() {&#13;&#10;        rvEnrollments.setVisibility(View.VISIBLE);&#13;&#10;        layoutEmpty.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStatusSelectionActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStatusSelectionActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.animation.Animation;&#10;import android.view.animation.ScaleAnimation;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.cardview.widget.CardView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;&#10;public class EnrollmentStatusSelectionActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private CardView cardApproved, cardRejected;&#10;    private View layoutApproved, layoutRejected;&#10;    private String teacherId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_enrollment_status_selection);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        getTeacherId();&#10;        setupClickListeners();&#10;        addAnimations();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        cardApproved = findViewById(R.id.card_approved);&#10;        cardRejected = findViewById(R.id.card_rejected);&#10;        layoutApproved = findViewById(R.id.layout_approved);&#10;        layoutRejected = findViewById(R.id.layout_rejected);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Quản lý đăng ký&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void getTeacherId() {&#10;        // Lấy teacherId từ Intent hoặc từ FirebaseAuth&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#10;        if (teacherId == null) {&#10;            teacherId = FirebaseAuth.getInstance().getCurrentUser().getUid();&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        cardApproved.setOnClickListener(v -&gt; {&#10;            animateCardClick(cardApproved);&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#10;            intent.putExtra(&quot;status&quot;, &quot;approved&quot;);&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã duyệt&quot;);&#10;            startActivity(intent);&#10;        });&#10;&#10;        cardRejected.setOnClickListener(v -&gt; {&#10;            animateCardClick(cardRejected);&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#10;            intent.putExtra(&quot;status&quot;, &quot;rejected&quot;);&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã từ chối&quot;);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void addAnimations() {&#10;        // Fade in animation cho các cards&#10;        cardApproved.setAlpha(0f);&#10;        cardRejected.setAlpha(0f);&#10;&#10;        cardApproved.animate()&#10;                .alpha(1f)&#10;                .setDuration(800)&#10;                .setStartDelay(200)&#10;                .start();&#10;&#10;        cardRejected.animate()&#10;                .alpha(1f)&#10;                .setDuration(800)&#10;                .setStartDelay(400)&#10;                .start();&#10;    }&#10;&#10;    private void animateCardClick(View card) {&#10;        ScaleAnimation scaleAnimation = new ScaleAnimation(&#10;                1.0f, 0.95f, 1.0f, 0.95f,&#10;                Animation.RELATIVE_TO_SELF, 0.5f,&#10;                Animation.RELATIVE_TO_SELF, 0.5f&#10;        );&#10;        scaleAnimation.setDuration(100);&#10;        scaleAnimation.setRepeatCount(1);&#10;        scaleAnimation.setRepeatMode(Animation.REVERSE);&#10;        card.startAnimation(scaleAnimation);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.view.animation.Animation;&#13;&#10;import android.view.animation.ScaleAnimation;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;&#13;&#10;public class EnrollmentStatusSelectionActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private View layoutApproved, layoutRejected;&#13;&#10;    private String teacherId;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_enrollment_status_selection);&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        getTeacherId();&#13;&#10;        setupClickListeners();&#13;&#10;        addAnimations();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        layoutApproved = findViewById(R.id.layout_approved);&#13;&#10;        layoutRejected = findViewById(R.id.layout_rejected);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Quản lý đăng ký&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void getTeacherId() {&#13;&#10;        // Lấy teacherId từ Intent hoặc từ FirebaseAuth&#13;&#10;        teacherId = getIntent().getStringExtra(&quot;teacherId&quot;);&#13;&#10;        if (teacherId == null) {&#13;&#10;            teacherId = FirebaseAuth.getInstance().getCurrentUser().getUid();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        layoutApproved.setOnClickListener(v -&gt; {&#13;&#10;            animateCardClick(layoutApproved);&#13;&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#13;&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#13;&#10;            intent.putExtra(&quot;status&quot;, &quot;approved&quot;);&#13;&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã duyệt&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;&#13;&#10;        layoutRejected.setOnClickListener(v -&gt; {&#13;&#10;            animateCardClick(layoutRejected);&#13;&#10;            Intent intent = new Intent(this, EnrollmentListActivity.class);&#13;&#10;            intent.putExtra(&quot;teacherId&quot;, teacherId);&#13;&#10;            intent.putExtra(&quot;status&quot;, &quot;rejected&quot;);&#13;&#10;            intent.putExtra(&quot;title&quot;, &quot;Đã từ chối&quot;);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void addAnimations() {&#13;&#10;        // Fade in animation cho các cards&#13;&#10;        layoutApproved.setAlpha(0f);&#13;&#10;        layoutRejected.setAlpha(0f);&#13;&#10;&#13;&#10;        layoutApproved.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(800)&#13;&#10;                .setStartDelay(200)&#13;&#10;                .start();&#13;&#10;&#13;&#10;        layoutRejected.animate()&#13;&#10;                .alpha(1f)&#13;&#10;                .setDuration(800)&#13;&#10;                .setStartDelay(400)&#13;&#10;                .start();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void animateCardClick(View card) {&#13;&#10;        ScaleAnimation scaleAnimation = new ScaleAnimation(&#13;&#10;                1.0f, 0.95f, 1.0f, 0.95f,&#13;&#10;                Animation.RELATIVE_TO_SELF, 0.5f,&#13;&#10;                Animation.RELATIVE_TO_SELF, 0.5f&#13;&#10;        );&#13;&#10;        scaleAnimation.setDuration(100);&#13;&#10;        scaleAnimation.setRepeatCount(1);&#13;&#10;        scaleAnimation.setRepeatMode(Animation.REVERSE);&#13;&#10;        card.startAnimation(scaleAnimation);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudent.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudent.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;public class EnrollmentStudent {&#10;    private String studentId;&#10;    private String studentName;&#10;    private String courseId;&#10;    private String courseName;&#10;    private String status;&#10;&#10;    public EnrollmentStudent() {&#10;        // Constructor rỗng cho Firestore&#10;    }&#10;&#10;    public EnrollmentStudent(String studentId, String studentName, String courseId, String courseName, String status) {&#10;        this.studentId = studentId;&#10;        this.studentName = studentName;&#10;        this.courseId = courseId;&#10;        this.courseName = courseName;&#10;        this.status = status;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getStudentName() {&#10;        return studentName;&#10;    }&#10;&#10;    public void setStudentName(String studentName) {&#10;        this.studentName = studentName;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getCourseName() {&#10;        return courseName;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.courseName = courseName;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudentAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/EnrollmentStudentAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class EnrollmentStudentAdapter extends RecyclerView.Adapter&lt;EnrollmentStudentAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;EnrollmentStudent&gt; enrollmentStudents;&#10;&#10;    public EnrollmentStudentAdapter(List&lt;EnrollmentStudent&gt; enrollmentStudents) {&#10;        this.enrollmentStudents = enrollmentStudents;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_enrollment_student, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        EnrollmentStudent student = enrollmentStudents.get(position);&#10;        &#10;        holder.tvStudentName.setText(student.getStudentName());&#10;        holder.tvStudentId.setText(&quot;ID: &quot; + student.getStudentId());&#10;        holder.tvCourseName.setText(student.getCourseName());&#10;        holder.tvCourseId.setText(&quot;Course ID: &quot; + student.getCourseId());&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return enrollmentStudents.size();&#10;    }&#10;&#10;    public void updateData(List&lt;EnrollmentStudent&gt; newStudents) {&#10;        this.enrollmentStudents = newStudents;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvStudentName, tvStudentId, tvCourseName, tvCourseId;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvStudentName = itemView.findViewById(R.id.tv_student_name);&#10;            tvStudentId = itemView.findViewById(R.id.tv_student_id);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            tvCourseId = itemView.findViewById(R.id.tv_course_id);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/FavoriteItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/FavoriteItem.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import com.google.firebase.Timestamp;&#10;&#10;public class FavoriteItem {&#10;    private String id;&#10;    private String studentId;&#10;    private String lessonId;&#10;    private String lessonTitle;&#10;    private String courseId;&#10;    private String courseTitle;&#10;    private String lessonType;&#10;    private String estimatedTime;&#10;    private Timestamp favoriteDate;&#10;&#10;    // Constructors&#10;    public FavoriteItem() {}&#10;&#10;    public FavoriteItem(String studentId, String lessonId, String lessonTitle, &#10;                       String courseId, String courseTitle, String lessonType, String estimatedTime) {&#10;        this.studentId = studentId;&#10;        this.lessonId = lessonId;&#10;        this.lessonTitle = lessonTitle;&#10;        this.courseId = courseId;&#10;        this.courseTitle = courseTitle;&#10;        this.lessonType = lessonType;&#10;        this.estimatedTime = estimatedTime;&#10;        this.favoriteDate = Timestamp.now();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public void setId(String id) { this.id = id; }&#10;&#10;    public String getStudentId() { return studentId; }&#10;    public void setStudentId(String studentId) { this.studentId = studentId; }&#10;&#10;    public String getLessonId() { return lessonId; }&#10;    public void setLessonId(String lessonId) { this.lessonId = lessonId; }&#10;&#10;    public String getLessonTitle() { return lessonTitle; }&#10;    public void setLessonTitle(String lessonTitle) { this.lessonTitle = lessonTitle; }&#10;&#10;    public String getCourseId() { return courseId; }&#10;    public void setCourseId(String courseId) { this.courseId = courseId; }&#10;&#10;    public String getCourseTitle() { return courseTitle; }&#10;    public void setCourseTitle(String courseTitle) { this.courseTitle = courseTitle; }&#10;&#10;    public String getLessonType() { return lessonType; }&#10;    public void setLessonType(String lessonType) { this.lessonType = lessonType; }&#10;&#10;    public String getEstimatedTime() { return estimatedTime; }&#10;    public void setEstimatedTime(String estimatedTime) { this.estimatedTime = estimatedTime; }&#10;&#10;    public Timestamp getFavoriteDate() { return favoriteDate; }&#10;    public void setFavoriteDate(Timestamp favoriteDate) { this.favoriteDate = favoriteDate; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/FavoriteLessonsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/FavoriteLessonsActivity.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class FavoriteLessonsActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvFavoriteLessons;&#10;    private LinearLayout layoutNoFavorites;&#10;    private ProgressBar progressBar;&#10;    private TextView tvFavoriteCount;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;FavoriteItem&gt; favoriteList;&#10;    private FavoriteLessonsAdapter favoritesAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_favorite_lessons);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        favoriteList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        getCurrentStudentId();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvFavoriteLessons = findViewById(R.id.rv_favorite_lessons);&#10;        layoutNoFavorites = findViewById(R.id.layout_no_favorites);&#10;        progressBar = findViewById(R.id.progress_bar);&#10;        tvFavoriteCount = findViewById(R.id.tv_favorite_count);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bài học yêu thích&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        favoritesAdapter = new FavoriteLessonsAdapter(favoriteList, new FavoriteLessonsAdapter.OnFavoriteActionListener() {&#10;            @Override&#10;            public void onLessonClick(FavoriteItem favoriteItem) {&#10;                // Navigate to lesson detail&#10;                Intent intent = new Intent(FavoriteLessonsActivity.this, LessonDetailActivity.class);&#10;                intent.putExtra(&quot;lessonId&quot;, favoriteItem.getLessonId());&#10;                intent.putExtra(&quot;lessonTitle&quot;, favoriteItem.getLessonTitle());&#10;                intent.putExtra(&quot;courseId&quot;, favoriteItem.getCourseId());&#10;                intent.putExtra(&quot;courseTitle&quot;, favoriteItem.getCourseTitle());&#10;                startActivity(intent);&#10;            }&#10;&#10;            @Override&#10;            public void onRemoveFromFavorites(FavoriteItem favoriteItem) {&#10;                showRemoveConfirmDialog(favoriteItem);&#10;            }&#10;        });&#10;&#10;        rvFavoriteLessons.setLayoutManager(new LinearLayoutManager(this));&#10;        rvFavoriteLessons.setAdapter(favoritesAdapter);&#10;    }&#10;&#10;    private void getCurrentStudentId() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        db.collection(&quot;users&quot;).document(mAuth.getCurrentUser().getUid())&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        &#10;                        if (currentStudentId != null) {&#10;                            loadFavoriteLessons();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;FavoriteLessons&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    progressBar.setVisibility(View.GONE);&#10;                });&#10;    }&#10;&#10;    private void loadFavoriteLessons() {&#10;        android.util.Log.d(&quot;FavoriteLessons&quot;, &quot;Loading favorite lessons for student: &quot; + currentStudentId);&#10;&#10;        db.collection(&quot;favoriteItems&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .orderBy(&quot;favoriteDate&quot;, com.google.firebase.firestore.Query.Direction.DESCENDING)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    favoriteList.clear();&#10;&#10;                    android.util.Log.d(&quot;FavoriteLessons&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; favorite items&quot;);&#10;&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        try {&#10;                            FavoriteItem item = doc.toObject(FavoriteItem.class);&#10;                            item.setId(doc.getId());&#10;                            favoriteList.add(item);&#10;&#10;                            android.util.Log.d(&quot;FavoriteLessons&quot;, &quot;Added favorite: &quot; + item.getLessonTitle());&#10;                        } catch (Exception e) {&#10;                            android.util.Log.e(&quot;FavoriteLessons&quot;, &quot;Error parsing favorite item: &quot; + doc.getId(), e);&#10;                        }&#10;                    }&#10;&#10;                    updateUI();&#10;                    progressBar.setVisibility(View.GONE);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;FavoriteLessons&quot;, &quot;Error loading favorite lessons&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải bài học yêu thích: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    updateUI();&#10;                    progressBar.setVisibility(View.GONE);&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        int favoriteCount = favoriteList.size();&#10;        &#10;        if (favoriteCount == 0) {&#10;            tvFavoriteCount.setText(&quot;Bạn chưa có bài học yêu thích nào&quot;);&#10;            layoutNoFavorites.setVisibility(View.VISIBLE);&#10;            rvFavoriteLessons.setVisibility(View.GONE);&#10;        } else {&#10;            tvFavoriteCount.setText(&quot;Bạn đã lưu &quot; + favoriteCount + &quot; bài học yêu thích&quot;);&#10;            layoutNoFavorites.setVisibility(View.GONE);&#10;            rvFavoriteLessons.setVisibility(View.VISIBLE);&#10;            favoritesAdapter.notifyDataSetChanged();&#10;        }&#10;&#10;        android.util.Log.d(&quot;FavoriteLessons&quot;, &quot;UI updated with &quot; + favoriteCount + &quot; favorites&quot;);&#10;    }&#10;&#10;    private void showRemoveConfirmDialog(FavoriteItem favoriteItem) {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Xóa khỏi yêu thích&quot;)&#10;                .setMessage(&quot;Bạn có chắc muốn xóa \&quot;&quot; + favoriteItem.getLessonTitle() + &quot;\&quot; khỏi danh sách yêu thích?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#10;                    removeFromFavorites(favoriteItem);&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void removeFromFavorites(FavoriteItem favoriteItem) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        db.collection(&quot;favoriteItems&quot;).document(favoriteItem.getId())&#10;                .delete()&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    // Remove from local list&#10;                    int position = favoriteList.indexOf(favoriteItem);&#10;                    if (position != -1) {&#10;                        favoriteList.remove(position);&#10;                        favoritesAdapter.removeItem(position);&#10;                    }&#10;&#10;                    Toast.makeText(this, &quot;Đã xóa khỏi danh sách yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;                    updateUI();&#10;                    progressBar.setVisibility(View.GONE);&#10;&#10;                    android.util.Log.d(&quot;FavoriteLessons&quot;, &quot;Removed favorite: &quot; + favoriteItem.getLessonTitle());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;FavoriteLessons&quot;, &quot;Error removing favorite&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi khi xóa: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    progressBar.setVisibility(View.GONE);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload favorites when returning from lesson detail&#10;        if (currentStudentId != null) {&#10;            loadFavoriteLessons();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/Feedback.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/Feedback.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import java.util.Date;&#10;&#10;public class Feedback {&#10;    private String id;&#10;    private String courseId;&#10;    private String courseName;&#10;    private String message;&#10;    private String studentId;&#10;    private String studentName;&#10;    private String studentEmail;&#10;    private String status; // pending, responded&#10;    private Date feedbackRequest;&#10;    private String teacherResponse;&#10;    private Date responseDate;&#10;&#10;    public Feedback() {&#10;        // Empty constructor for Firebase&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getCourseName() {&#10;        return courseName;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.courseName = courseName;&#10;    }&#10;&#10;    public String getMessage() {&#10;        return message;&#10;    }&#10;&#10;    public void setMessage(String message) {&#10;        this.message = message;&#10;    }&#10;&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getStudentName() {&#10;        return studentName;&#10;    }&#10;&#10;    public void setStudentName(String studentName) {&#10;        this.studentName = studentName;&#10;    }&#10;&#10;    public String getStudentEmail() {&#10;        return studentEmail;&#10;    }&#10;&#10;    public void setStudentEmail(String studentEmail) {&#10;        this.studentEmail = studentEmail;&#10;    }&#10;&#10;    public String getStatus() {&#10;        return status;&#10;    }&#10;&#10;    public void setStatus(String status) {&#10;        this.status = status;&#10;    }&#10;&#10;    public Date getFeedbackRequest() {&#10;        return feedbackRequest;&#10;    }&#10;&#10;    public void setFeedbackRequest(Date feedbackRequest) {&#10;        this.feedbackRequest = feedbackRequest;&#10;    }&#10;&#10;    public String getTeacherResponse() {&#10;        return teacherResponse;&#10;    }&#10;&#10;    public void setTeacherResponse(String teacherResponse) {&#10;        this.teacherResponse = teacherResponse;&#10;    }&#10;&#10;    public Date getResponseDate() {&#10;        return responseDate;&#10;    }&#10;&#10;    public void setResponseDate(Date responseDate) {&#10;        this.responseDate = responseDate;&#10;    }&#10;&#10;    // Helper methods&#10;    public boolean hasResponse() {&#10;        return teacherResponse != null &amp;&amp; !teacherResponse.trim().isEmpty();&#10;    }&#10;&#10;    public String getFormattedDate() {&#10;        if (feedbackRequest != null) {&#10;            return android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, feedbackRequest).toString();&#10;        }&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    public String getFormattedResponseDate() {&#10;        if (responseDate != null) {&#10;            return android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, responseDate).toString();&#10;        }&#10;        return &quot;&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/FeedbackResponseDialog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/FeedbackResponseDialog.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.app.Dialog;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;&#10;public class FeedbackResponseDialog extends Dialog {&#10;&#10;    private TextView tvStudentName, tvCourseName, tvFeedbackDate, tvFeedbackMessage, tvCurrentResponse;&#10;    private EditText etResponse;&#10;    private Button btnSendResponse, btnCancel;&#10;    &#10;    private Feedback feedback;&#10;    private OnResponseListener listener;&#10;&#10;    public interface OnResponseListener {&#10;        void onResponseSent(String response);&#10;    }&#10;&#10;    public FeedbackResponseDialog(@NonNull Context context, Feedback feedback, OnResponseListener listener) {&#10;        super(context);&#10;        this.feedback = feedback;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.dialog_feedback_response);&#10;&#10;        initViews();&#10;        setupData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        tvStudentName = findViewById(R.id.tv_student_name);&#10;        tvCourseName = findViewById(R.id.tv_course_name);&#10;        tvFeedbackDate = findViewById(R.id.tv_feedback_date);&#10;        tvFeedbackMessage = findViewById(R.id.tv_feedback_message);&#10;        tvCurrentResponse = findViewById(R.id.tv_current_response);&#10;        etResponse = findViewById(R.id.et_response);&#10;        btnSendResponse = findViewById(R.id.btn_send_response);&#10;        btnCancel = findViewById(R.id.btn_cancel);&#10;    }&#10;&#10;    private void setupData() {&#10;        tvStudentName.setText(&quot;Học viên: &quot; + feedback.getStudentName());&#10;        tvCourseName.setText(&quot;Khóa học: &quot; + feedback.getCourseName());&#10;        tvFeedbackDate.setText(&quot;Ngày gửi: &quot; + feedback.getFormattedDate());&#10;        tvFeedbackMessage.setText(feedback.getMessage());&#10;&#10;        // Hiển thị phản hồi hiện tại nếu có&#10;        if (feedback.hasResponse()) {&#10;            tvCurrentResponse.setVisibility(View.VISIBLE);&#10;            tvCurrentResponse.setText(&quot;Phản hồi hiện tại (&quot; + feedback.getFormattedResponseDate() + &quot;):\n&quot; + feedback.getTeacherResponse());&#10;            etResponse.setHint(&quot;Nhập phản hồi mới để cập nhật...&quot;);&#10;            btnSendResponse.setText(&quot;Cập nhật phản hồi&quot;);&#10;        } else {&#10;            tvCurrentResponse.setVisibility(View.GONE);&#10;            etResponse.setHint(&quot;Nhập phản hồi của bạn...&quot;);&#10;            btnSendResponse.setText(&quot;Gửi phản hồi&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSendResponse.setOnClickListener(v -&gt; {&#10;            String response = etResponse.getText().toString().trim();&#10;            &#10;            if (response.isEmpty()) {&#10;                etResponse.setError(&quot;Vui lòng nhập nội dung phản hồi&quot;);&#10;                return;&#10;            }&#10;&#10;            if (response.length() &lt; 10) {&#10;                etResponse.setError(&quot;Phản hồi quá ngắn (ít nhất 10 ký tự)&quot;);&#10;                return;&#10;            }&#10;&#10;            if (listener != null) {&#10;                listener.onResponseSent(response);&#10;            }&#10;            dismiss();&#10;        });&#10;&#10;        btnCancel.setOnClickListener(v -&gt; dismiss());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/InboxMessage.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/InboxMessage.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import java.util.Date;&#10;&#10;public class InboxMessage {&#10;    private String id;&#10;    private String type; // &quot;notification&quot;, &quot;feedback_response&quot;&#10;    private String title;&#10;    private String message;&#10;    private String fromType; // &quot;system&quot;, &quot;teacher&quot;&#10;    private String fromName;&#10;    private Date createdAt;&#10;    private boolean isRead;&#10;    &#10;    // Additional data for course-related messages&#10;    private String courseId;&#10;    private String courseName;&#10;    private String originalFeedback; // For feedback responses&#10;&#10;    // Constructors&#10;    public InboxMessage() {}&#10;&#10;    public InboxMessage(String id, String type, String title, String message) {&#10;        this.id = id;&#10;        this.type = type;&#10;        this.title = title;&#10;        this.message = message;&#10;        this.isRead = false;&#10;        this.createdAt = new Date();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public void setId(String id) { this.id = id; }&#10;&#10;    public String getType() { return type; }&#10;    public void setType(String type) { this.type = type; }&#10;&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;&#10;    public String getMessage() { return message; }&#10;    public void setMessage(String message) { this.message = message; }&#10;&#10;    public String getFromType() { return fromType; }&#10;    public void setFromType(String fromType) { this.fromType = fromType; }&#10;&#10;    public String getFromName() { return fromName; }&#10;    public void setFromName(String fromName) { this.fromName = fromName; }&#10;&#10;    public Date getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }&#10;&#10;    public boolean isRead() { return isRead; }&#10;    public void setRead(boolean read) { isRead = read; }&#10;&#10;    public String getCourseId() { return courseId; }&#10;    public void setCourseId(String courseId) { this.courseId = courseId; }&#10;&#10;    public String getCourseName() { return courseName; }&#10;    public void setCourseName(String courseName) { this.courseName = courseName; }&#10;&#10;    public String getOriginalFeedback() { return originalFeedback; }&#10;    public void setOriginalFeedback(String originalFeedback) { this.originalFeedback = originalFeedback; }&#10;&#10;    // Helper methods&#10;    public String getTypeDisplayName() {&#10;        switch (type) {&#10;            case &quot;notification&quot;:&#10;                return &quot;Thông báo&quot;;&#10;            case &quot;feedback_response&quot;:&#10;                return &quot;Phản hồi&quot;;&#10;            default:&#10;                return &quot;Tin nhắn&quot;;&#10;        }&#10;    }&#10;&#10;    public String getFormattedDate() {&#10;        if (createdAt == null) return &quot;&quot;;&#10;        &#10;        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, java.util.Locale.getDefault());&#10;        return sdf.format(createdAt);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/Lesson.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/Lesson.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class Lesson {&#10;    private String id;&#10;    private String title;&#10;    private String content;&#10;    private String courseId;&#10;    private String teacherId;&#10;    private String type; // text, video, audio, quiz&#10;    private String category; // Grammar, Vocabulary, etc.&#10;    private int estimatedTime; // in minutes&#10;    private int order; // lesson order in course&#10;    private Date createdAt;&#10;    private Date updatedAt;&#10;    private boolean isPublished;&#10;&#10;    // Grammar-specific fields&#10;    private String grammarRule;&#10;    private String grammarStructure;&#10;    private List&lt;String&gt; grammarExamples;&#10;    private List&lt;String&gt; grammarUsage;&#10;    private List&lt;String&gt; grammarNotes;&#10;&#10;    // Vocabulary-specific fields (for future use)&#10;    private List&lt;String&gt; vocabularyWords;&#10;    private List&lt;String&gt; definitions;&#10;    private List&lt;String&gt; pronunciations;&#10;&#10;    // Learning progress fields&#10;    private boolean isAccessible = false; // Có thể truy cập học hay không&#10;    private boolean isLocked = true; // Bài học có bị khóa không&#10;    private boolean isCompleted = false; // Đã hoàn thành chưa&#10;&#10;    // Constructors&#10;    public Lesson() {&#10;        // Default constructor required for Firestore&#10;    }&#10;&#10;    public Lesson(String title, String content, String courseId, String teacherId) {&#10;        this.title = title;&#10;        this.content = content;&#10;        this.courseId = courseId;&#10;        this.teacherId = teacherId;&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;        this.isPublished = false;&#10;        this.type = &quot;text&quot;;&#10;        this.estimatedTime = 30;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public void setId(String id) { this.id = id; }&#10;&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;&#10;    public String getContent() { return content; }&#10;    public void setContent(String content) { this.content = content; }&#10;&#10;    public String getCourseId() { return courseId; }&#10;    public void setCourseId(String courseId) { this.courseId = courseId; }&#10;&#10;    public String getTeacherId() { return teacherId; }&#10;    public void setTeacherId(String teacherId) { this.teacherId = teacherId; }&#10;&#10;    public String getType() { return type; }&#10;    public void setType(String type) { this.type = type; }&#10;&#10;    public String getCategory() { return category; }&#10;    public void setCategory(String category) { this.category = category; }&#10;&#10;    public int getEstimatedTime() { return estimatedTime; }&#10;    public void setEstimatedTime(int estimatedTime) { this.estimatedTime = estimatedTime; }&#10;&#10;    public int getOrder() { return order; }&#10;    public void setOrder(int order) { this.order = order; }&#10;&#10;    public Date getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }&#10;&#10;    public Date getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(Date updatedAt) { this.updatedAt = updatedAt; }&#10;&#10;    public boolean isPublished() { return isPublished; }&#10;    public void setPublished(boolean published) { isPublished = published; }&#10;&#10;    // Grammar-specific getters and setters&#10;    public String getGrammarRule() { return grammarRule; }&#10;    public void setGrammarRule(String grammarRule) { this.grammarRule = grammarRule; }&#10;&#10;    public String getGrammarStructure() { return grammarStructure; }&#10;    public void setGrammarStructure(String grammarStructure) { this.grammarStructure = grammarStructure; }&#10;&#10;    public List&lt;String&gt; getGrammarExamples() { return grammarExamples; }&#10;    public void setGrammarExamples(List&lt;String&gt; grammarExamples) { this.grammarExamples = grammarExamples; }&#10;&#10;    public List&lt;String&gt; getGrammarUsage() { return grammarUsage; }&#10;    public void setGrammarUsage(List&lt;String&gt; grammarUsage) { this.grammarUsage = grammarUsage; }&#10;&#10;    public List&lt;String&gt; getGrammarNotes() { return grammarNotes; }&#10;    public void setGrammarNotes(List&lt;String&gt; grammarNotes) { this.grammarNotes = grammarNotes; }&#10;&#10;    // Vocabulary-specific getters and setters (for future use)&#10;    public List&lt;String&gt; getVocabularyWords() { return vocabularyWords; }&#10;    public void setVocabularyWords(List&lt;String&gt; vocabularyWords) { this.vocabularyWords = vocabularyWords; }&#10;&#10;    public List&lt;String&gt; getDefinitions() { return definitions; }&#10;    public void setDefinitions(List&lt;String&gt; definitions) { this.definitions = definitions; }&#10;&#10;    public List&lt;String&gt; getPronunciations() { return pronunciations; }&#10;    public void setPronunciations(List&lt;String&gt; pronunciations) { this.pronunciations = pronunciations; }&#10;&#10;    // Learning progress getters and setters&#10;    public boolean isAccessible() { return isAccessible; }&#10;    public void setAccessible(boolean accessible) { isAccessible = accessible; }&#10;&#10;    public boolean isLocked() { return isLocked; }&#10;    public void setLocked(boolean locked) { isLocked = locked; }&#10;&#10;    public boolean isCompleted() { return isCompleted; }&#10;    public void setCompleted(boolean completed) { isCompleted = completed; }&#10;&#10;    // Helper methods&#10;    public String getEstimatedTimeString() {&#10;        return estimatedTime + &quot; phút&quot;;&#10;    }&#10;&#10;    public String getTypeDisplayName() {&#10;        switch (type) {&#10;            case &quot;text&quot;: return &quot;Văn bản&quot;;&#10;            case &quot;video&quot;: return &quot;Video&quot;;&#10;            case &quot;audio&quot;: return &quot;Âm thanh&quot;;&#10;            case &quot;quiz&quot;: return &quot;Quiz&quot;;&#10;            default: return &quot;Văn bản&quot;;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class Lesson {&#13;&#10;    private String id;&#13;&#10;    private String title;&#13;&#10;    private String content;&#13;&#10;    private String courseId;&#13;&#10;    private String teacherId;&#13;&#10;    private String type; // text, video, audio, quiz&#13;&#10;    private String category; // Grammar, Vocabulary, etc.&#13;&#10;    private int estimatedTime; // in minutes&#13;&#10;    private int order; // lesson order in course&#13;&#10;    private Date createdAt;&#13;&#10;    private Date updatedAt;&#13;&#10;    private boolean isPublished;&#13;&#10;&#13;&#10;    // Grammar-specific fields&#13;&#10;    private String grammarRule;&#13;&#10;    private String grammarStructure;&#13;&#10;    private List&lt;String&gt; grammarExamples;&#13;&#10;    private List&lt;String&gt; grammarUsage;&#13;&#10;    private List&lt;String&gt; grammarNotes;&#13;&#10;&#13;&#10;    // Vocabulary-specific fields (for future use)&#13;&#10;    private List&lt;String&gt; vocabularyWords;&#13;&#10;    private List&lt;String&gt; definitions;&#13;&#10;    private List&lt;String&gt; pronunciations;&#13;&#10;&#13;&#10;    // Learning progress fields&#13;&#10;    private boolean isAccessible = false; // Có thể truy cập học hay không&#13;&#10;    private boolean isLocked = true; // Bài học có bị khóa không&#13;&#10;    private boolean isCompleted = false; // Đã hoàn thành chưa&#13;&#10;&#13;&#10;    // Constructors&#13;&#10;    public Lesson() {&#13;&#10;        // Default constructor required for Firestore&#13;&#10;    }&#13;&#10;&#13;&#10;    public Lesson(String title, String content, String courseId, String teacherId) {&#13;&#10;        this.title = title;&#13;&#10;        this.content = content;&#13;&#10;        this.courseId = courseId;&#13;&#10;        this.teacherId = teacherId;&#13;&#10;        this.createdAt = new Date();&#13;&#10;        this.updatedAt = new Date();&#13;&#10;        this.isPublished = false;&#13;&#10;        this.type = &quot;text&quot;;&#13;&#10;        this.estimatedTime = 30;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Getters and Setters&#13;&#10;    public String getId() { return id; }&#13;&#10;    public void setId(String id) { this.id = id; }&#13;&#10;&#13;&#10;    public String getTitle() { return title; }&#13;&#10;    public void setTitle(String title) { this.title = title; }&#13;&#10;&#13;&#10;    public String getContent() { return content; }&#13;&#10;    public void setContent(String content) { this.content = content; }&#13;&#10;&#13;&#10;    public String getCourseId() { return courseId; }&#13;&#10;    public void setCourseId(String courseId) { this.courseId = courseId; }&#13;&#10;&#13;&#10;    public String getTeacherId() { return teacherId; }&#13;&#10;    public void setTeacherId(String teacherId) { this.teacherId = teacherId; }&#13;&#10;&#13;&#10;    public String getType() { return type; }&#13;&#10;    public void setType(String type) { this.type = type; }&#13;&#10;&#13;&#10;    public String getCategory() { return category; }&#13;&#10;    public void setCategory(String category) { this.category = category; }&#13;&#10;&#13;&#10;    public int getEstimatedTime() { return estimatedTime; }&#13;&#10;    public void setEstimatedTime(int estimatedTime) { this.estimatedTime = estimatedTime; }&#13;&#10;&#13;&#10;    public int getOrder() { return order; }&#13;&#10;    public void setOrder(int order) { this.order = order; }&#13;&#10;&#13;&#10;    public Date getCreatedAt() { return createdAt; }&#13;&#10;    public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }&#13;&#10;&#13;&#10;    public Date getUpdatedAt() { return updatedAt; }&#13;&#10;    public void setUpdatedAt(Date updatedAt) { this.updatedAt = updatedAt; }&#13;&#10;&#13;&#10;    public boolean isPublished() { return isPublished; }&#13;&#10;    public void setPublished(boolean published) { isPublished = published; }&#13;&#10;&#13;&#10;    // Grammar-specific getters and setters&#13;&#10;    public String getGrammarRule() { return grammarRule; }&#13;&#10;    public void setGrammarRule(String grammarRule) { this.grammarRule = grammarRule; }&#13;&#10;&#13;&#10;    public String getGrammarStructure() { return grammarStructure; }&#13;&#10;    public void setGrammarStructure(String grammarStructure) { this.grammarStructure = grammarStructure; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getGrammarExamples() { return grammarExamples; }&#13;&#10;    public void setGrammarExamples(List&lt;String&gt; grammarExamples) { this.grammarExamples = grammarExamples; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getGrammarUsage() { return grammarUsage; }&#13;&#10;    public void setGrammarUsage(List&lt;String&gt; grammarUsage) { this.grammarUsage = grammarUsage; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getGrammarNotes() { return grammarNotes; }&#13;&#10;    public void setGrammarNotes(List&lt;String&gt; grammarNotes) { this.grammarNotes = grammarNotes; }&#13;&#10;&#13;&#10;    // Vocabulary-specific getters and setters&#13;&#10;    public List&lt;String&gt; getVocabularyWords() { return vocabularyWords; }&#13;&#10;    public void setVocabularyWords(List&lt;String&gt; vocabularyWords) { this.vocabularyWords = vocabularyWords; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getDefinitions() { return definitions; }&#13;&#10;    public void setDefinitions(List&lt;String&gt; definitions) { this.definitions = definitions; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getPronunciations() { return pronunciations; }&#13;&#10;    public void setPronunciations(List&lt;String&gt; pronunciations) { this.pronunciations = pronunciations; }&#13;&#10;&#13;&#10;    // Learning progress getters and setters&#13;&#10;    public boolean isAccessible() { return isAccessible; }&#13;&#10;    public void setAccessible(boolean accessible) { isAccessible = accessible; }&#13;&#10;&#13;&#10;    public boolean isLocked() { return isLocked; }&#13;&#10;    public void setLocked(boolean locked) { isLocked = locked; }&#13;&#10;&#13;&#10;    public boolean isCompleted() { return isCompleted; }&#13;&#10;    public void setCompleted(boolean completed) { isCompleted = completed; }&#13;&#10;&#13;&#10;    // Helper methods for display&#13;&#10;    public String getTypeDisplayName() {&#13;&#10;        if (type == null) return &quot; Văn bản&quot;;&#13;&#10;        &#13;&#10;        switch (type.toLowerCase()) {&#13;&#10;            case &quot;text&quot;:&#13;&#10;                return &quot; Văn bản&quot;;&#13;&#10;            case &quot;video&quot;:&#13;&#10;                return &quot; Video&quot;;&#13;&#10;            case &quot;audio&quot;:&#13;&#10;                return &quot; Âm thanh&quot;;&#13;&#10;            case &quot;quiz&quot;:&#13;&#10;                return &quot;❓ Trắc nghiệm&quot;;&#13;&#10;            case &quot;grammar&quot;:&#13;&#10;                return &quot; Ngữ pháp&quot;;&#13;&#10;            case &quot;vocabulary&quot;:&#13;&#10;                return &quot; Từ vựng&quot;;&#13;&#10;            default:&#13;&#10;                return &quot; &quot; + type;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getEstimatedTimeString() {&#13;&#10;        if (estimatedTime &lt;= 0) return &quot;⏱ Không xác định&quot;;&#13;&#10;        &#13;&#10;        if (estimatedTime &lt; 60) {&#13;&#10;            return &quot;⏱ &quot; + estimatedTime + &quot; phút&quot;;&#13;&#10;        } else {&#13;&#10;            int hours = estimatedTime / 60;&#13;&#10;            int minutes = estimatedTime % 60;&#13;&#10;            if (minutes == 0) {&#13;&#10;                return &quot;⏱ &quot; + hours + &quot; giờ&quot;;&#13;&#10;            } else {&#13;&#10;                return &quot;⏱ &quot; + hours + &quot;h &quot; + minutes + &quot;m&quot;;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;Lesson{&quot; +&#13;&#10;                &quot;id='&quot; + id + '\'' +&#13;&#10;                &quot;, title='&quot; + title + '\'' +&#13;&#10;                &quot;, type='&quot; + type + '\'' +&#13;&#10;                &quot;, category='&quot; + category + '\'' +&#13;&#10;                &quot;, estimatedTime=&quot; + estimatedTime +&#13;&#10;                &quot;, order=&quot; + order +&#13;&#10;                &quot;, isPublished=&quot; + isPublished +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/LessonProgressAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/LessonProgressAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class LessonProgressAdapter extends RecyclerView.Adapter&lt;LessonProgressAdapter.ProgressViewHolder&gt; {&#10;&#10;    private List&lt;StudentProgressDetailActivity.LessonProgressItem&gt; progressList;&#10;&#10;    public LessonProgressAdapter(List&lt;StudentProgressDetailActivity.LessonProgressItem&gt; progressList) {&#10;        this.progressList = progressList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ProgressViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(android.R.layout.simple_list_item_2, parent, false);&#10;        return new ProgressViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ProgressViewHolder holder, int position) {&#10;        StudentProgressDetailActivity.LessonProgressItem item = progressList.get(position);&#10;        holder.bind(item);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return progressList.size();&#10;    }&#10;&#10;    public static class ProgressViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView text1, text2;&#10;&#10;        public ProgressViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            text1 = itemView.findViewById(android.R.id.text1);&#10;            text2 = itemView.findViewById(android.R.id.text2);&#10;        }&#10;&#10;        public void bind(StudentProgressDetailActivity.LessonProgressItem item) {&#10;            // Thiết lập tiêu đề bài học với status&#10;            String title = &quot;Bài &quot; + item.getLessonOrder() + &quot;: &quot; + item.getLessonTitle();&#10;            text1.setText(title);&#10;            text1.setTextSize(16);&#10;&#10;            // Thiết lập trạng thái hoàn thành&#10;            String status;&#10;            if (item.isCompleted()) {&#10;                status = &quot;✅ Đã hoàn thành&quot;;&#10;                if (item.getCompletedAt() != null) {&#10;                    status += &quot; - &quot; + item.getCompletedAt();&#10;                }&#10;                text1.setTextColor(itemView.getContext().getColor(android.R.color.holo_green_dark));&#10;                text2.setTextColor(itemView.getContext().getColor(android.R.color.holo_green_dark));&#10;            } else {&#10;                status = &quot;⏳ Chưa hoàn thành&quot;;&#10;                text1.setTextColor(itemView.getContext().getColor(android.R.color.black));&#10;                text2.setTextColor(itemView.getContext().getColor(android.R.color.darker_gray));&#10;            }&#10;&#10;            text2.setText(status);&#10;            text2.setTextSize(14);&#10;&#10;            // Thêm padding cho item&#10;            itemView.setPadding(16, 12, 16, 12);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentCourseDetailActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentCourseDetailActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;public class StudentCourseDetailActivity extends AppCompatActivity {&#10;&#10;    private TextView tvCourseTitle, tvCourseDescription, tvCourseCategory, tvCourseLevel;&#10;    private TextView tvCourseDuration, tvTotalLessons, tvCompletedLessons;&#10;    private TextView tvEnrollmentDate, tvProgressPercentage, tvTestScore; // Thêm tvTestScore&#10;    private ProgressBar progressBarCompletion;&#10;    private Button btnStartLearning, btnTakeQuiz; // Xóa btnViewLessons và btnViewProgress, thêm btnTakeQuiz&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String courseId, courseTitle, courseCategory, enrollmentId;&#10;    private Course currentCourse;&#10;    private int currentProgress = 0; // Thêm biến để track progress&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_course_detail);&#10;&#10;        // Get course info from intent - sửa lại tên extra cho đúng&#10;        courseId = getIntent().getStringExtra(&quot;course_id&quot;); // Thay đổi từ &quot;courseId&quot; thành &quot;course_id&quot;&#10;        courseTitle = getIntent().getStringExtra(&quot;course_title&quot;); // Thay đổi từ &quot;courseTitle&quot; thành &quot;course_title&quot;&#10;        courseCategory = getIntent().getStringExtra(&quot;courseCategory&quot;);&#10;        enrollmentId = getIntent().getStringExtra(&quot;enrollmentId&quot;);&#10;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Intent data - courseId: &quot; + courseId + &quot;, courseTitle: &quot; + courseTitle);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupClickListeners();&#10;        loadCourseData();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        tvCourseDescription = findViewById(R.id.tv_course_description);&#10;        tvCourseCategory = findViewById(R.id.tv_course_category);&#10;        tvCourseLevel = findViewById(R.id.tv_course_level);&#10;        tvCourseDuration = findViewById(R.id.tv_course_duration);&#10;        tvTotalLessons = findViewById(R.id.tv_total_lessons);&#10;        tvCompletedLessons = findViewById(R.id.tv_completed_lessons);&#10;        tvEnrollmentDate = findViewById(R.id.tv_enrollment_date);&#10;        tvProgressPercentage = findViewById(R.id.tv_progress_percentage);&#10;        tvTestScore = findViewById(R.id.tv_test_score); // Khai báo TextView cho điểm số bài kiểm tra&#10;        progressBarCompletion = findViewById(R.id.progress_bar_completion);&#10;        btnStartLearning = findViewById(R.id.btn_start_learning);&#10;        btnTakeQuiz = findViewById(R.id.btn_take_quiz); // Thay thế btnViewLessons và btnViewProgress&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chi tiết khóa học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnStartLearning.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, StudentCourseLessonsActivity.class);&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#10;            intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#10;            intent.putExtra(&quot;courseCategory&quot;, courseCategory);&#10;            startActivity(intent);&#10;        });&#10;&#10;        btnTakeQuiz.setOnClickListener(v -&gt; {&#10;            // Kiểm tra xem học viên đã hoàn thành 100% bài học chưa&#10;            if (currentProgress &lt; 100) {&#10;                Toast.makeText(this,&#10;                    &quot;Bạn cần hoàn thành tất cả bài học (&quot; + currentProgress + &quot;% hoàn thành) trước khi làm bài kiểm tra&quot;,&#10;                    Toast.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;&#10;            // Load dữ liệu test từ Firebase và tạo form bài kiểm tra&#10;            loadTestDataAndStartQuiz();&#10;        });&#10;    }&#10;&#10;    private void loadCourseData() {&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                if (documentSnapshot.exists()) {&#10;                    currentCourse = documentSnapshot.toObject(Course.class);&#10;                    if (currentCourse != null) {&#10;                        currentCourse.setId(documentSnapshot.getId());&#10;                        displayCourseInfo();&#10;                        loadProgressData();&#10;                    }&#10;                } else {&#10;                    Toast.makeText(this, &quot;Không tìm thấy khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading course&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            });&#10;    }&#10;&#10;    private void displayCourseInfo() {&#10;        tvCourseTitle.setText(currentCourse.getTitle());&#10;        tvCourseDescription.setText(currentCourse.getDescription());&#10;        tvCourseCategory.setText(currentCourse.getCategory());&#10;        tvCourseLevel.setText(currentCourse.getLevel());&#10;        tvCourseDuration.setText(currentCourse.getDuration() + &quot; giờ&quot;);&#10;    }&#10;&#10;    private void loadProgressData() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            return;&#10;        }&#10;&#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(mAuth.getCurrentUser().getUid())&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String studentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        if (studentId != null) {&#10;                            calculateProgress(studentId);&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading student info&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void calculateProgress(String studentId) {&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;=== CALCULATING PROGRESS FOR COURSE DETAIL ===&quot;);&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;CourseId: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;StudentId: &quot; + studentId);&#10;&#10;        // Sử dụng cùng logic với StudentMyCoursesActivity để đảm bảo đồng bộ&#10;        // Thử load lessons từ subcollection trước&#10;        db.collection(&quot;courses&quot;).document(courseId).collection(&quot;lessons&quot;)&#10;            .get()&#10;            .addOnSuccessListener(lessonsSnapshot -&gt; {&#10;                int totalLessons = lessonsSnapshot.size();&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Total lessons from courses/{courseId}/lessons: &quot; + totalLessons);&#10;&#10;                if (totalLessons == 0) {&#10;                    // Thử cách khác: lessons collection với courseId filter&#10;                    db.collection(&quot;lessons&quot;)&#10;                        .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                        .get()&#10;                        .addOnSuccessListener(alternativeLessons -&gt; {&#10;                            int altTotalLessons = alternativeLessons.size();&#10;                            android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Total lessons from lessons collection: &quot; + altTotalLessons);&#10;&#10;                            if (altTotalLessons &gt; 0) {&#10;                                calculateProgressWithLessons(studentId, altTotalLessons);&#10;                            } else {&#10;                                // Fallback: không có bài học nào&#10;                                updateProgressUI(0, 0, 0);&#10;                            }&#10;                        })&#10;                        .addOnFailureListener(e -&gt; {&#10;                            android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading alternative lessons&quot;, e);&#10;                            updateProgressUI(0, 0, 0);&#10;                        });&#10;                } else {&#10;                    calculateProgressWithLessons(studentId, totalLessons);&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lessons&quot;, e);&#10;                // Fallback to old method with published filter&#10;                loadLessonsWithPublishedFilter(studentId);&#10;            });&#10;    }&#10;&#10;    private void loadLessonsWithPublishedFilter(String studentId) {&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Fallback: Loading lessons with isPublished filter&quot;);&#10;&#10;        db.collection(&quot;lessons&quot;)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .whereEqualTo(&quot;isPublished&quot;, true)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                int totalLessons = queryDocumentSnapshots.size();&#10;                calculateProgressWithLessons(studentId, totalLessons);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lessons with published filter&quot;, e);&#10;                updateProgressUI(0, 0, 0);&#10;            });&#10;    }&#10;&#10;    private void calculateProgressWithLessons(String studentId, int totalLessons) {&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Calculating progress with &quot; + totalLessons + &quot; total lessons&quot;);&#10;&#10;        // Sử dụng cùng collection name với StudentMyCoursesActivity: &quot;lessonProgress&quot;&#10;        db.collection(&quot;lessonProgress&quot;)&#10;            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .whereEqualTo(&quot;completed&quot;, true)&#10;            .get()&#10;            .addOnSuccessListener(progressSnapshots -&gt; {&#10;                int completedLessons = progressSnapshots.size();&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons from lessonProgress: &quot; + completedLessons);&#10;&#10;                updateProgressUI(totalLessons, completedLessons, totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lessonProgress&quot;, e);&#10;                // Thử collection khác nếu lessonProgress không có dữ liệu&#10;                tryAlternativeProgressCollection(studentId, totalLessons);&#10;            });&#10;    }&#10;&#10;    private void tryAlternativeProgressCollection(String studentId, int totalLessons) {&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Trying alternative progress collection: studentProgress&quot;);&#10;&#10;        db.collection(&quot;studentProgress&quot;)&#10;            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .whereEqualTo(&quot;completed&quot;, true)&#10;            .get()&#10;            .addOnSuccessListener(progressSnapshot -&gt; {&#10;                int completedLessons = progressSnapshot.size();&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons from studentProgress: &quot; + completedLessons);&#10;&#10;                updateProgressUI(totalLessons, completedLessons, totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading studentProgress&quot;, e);&#10;                // Thử collection cuối cùng&#10;                tryLastProgressCollection(studentId, totalLessons);&#10;            });&#10;    }&#10;&#10;    private void tryLastProgressCollection(String studentId, int totalLessons) {&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Trying last progress collection: lesson_progress&quot;);&#10;&#10;        db.collection(&quot;lesson_progress&quot;)&#10;            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .whereEqualTo(&quot;isCompleted&quot;, true)&#10;            .get()&#10;            .addOnSuccessListener(progressSnapshot -&gt; {&#10;                int completedLessons = progressSnapshot.size();&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons from lesson_progress: &quot; + completedLessons);&#10;&#10;                updateProgressUI(totalLessons, completedLessons, totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0);&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lesson_progress&quot;, e);&#10;                // Set default values&#10;                updateProgressUI(totalLessons, 0, 0);&#10;            });&#10;    }&#10;&#10;    private void updateProgressUI(int totalLessons, int completedLessons, int progress) {&#10;        tvTotalLessons.setText(&quot;Tổng số bài: &quot; + totalLessons);&#10;        tvCompletedLessons.setText(&quot;Đã hoàn thành: &quot; + completedLessons);&#10;        currentProgress = progress;&#10;        tvProgressPercentage.setText(currentProgress + &quot;%&quot;);&#10;        progressBarCompletion.setProgress(currentProgress);&#10;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;=== FINAL PROGRESS IN DETAIL ===&quot;);&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Total lessons: &quot; + totalLessons);&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons: &quot; + completedLessons);&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Progress percentage: &quot; + currentProgress + &quot;%&quot;);&#10;&#10;        // Update button state based on progress&#10;        updateButtonStates();&#10;&#10;        // Load test score after updating progress&#10;        loadTestScore();&#10;    }&#10;&#10;    private void updateButtonStates() {&#10;        // Cập nhật trạng thái nút dựa trên tiến độ&#10;        if (currentProgress &gt;= 100) {&#10;            btnTakeQuiz.setEnabled(true);&#10;            btnTakeQuiz.setText(&quot;Làm bài kiểm tra&quot;);&#10;            btnTakeQuiz.setBackgroundTintList(&#10;                android.content.res.ColorStateList.valueOf(getColor(android.R.color.holo_green_dark))&#10;            );&#10;        } else {&#10;            btnTakeQuiz.setEnabled(false);&#10;            btnTakeQuiz.setText(&quot;Làm bài kiểm tra (Hoàn thành hết bài học trước)&quot;);&#10;            btnTakeQuiz.setBackgroundTintList(&#10;                android.content.res.ColorStateList.valueOf(getColor(android.R.color.darker_gray))&#10;            );&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh progress data when returning from lesson to show updated progress&#10;        if (currentCourse != null) {&#10;            loadProgressData();&#10;        }&#10;    }&#10;&#10;    // Add method to manually refresh progress (can be called from other activities)&#10;    public void refreshProgressData() {&#10;        loadProgressData();&#10;    }&#10;&#10;    // Method để load dữ liệu test và bắt đầu làm bài kiểm tra&#10;    private void loadTestDataAndStartQuiz() {&#10;        // SỬA: Không cần kiểm tra trường &quot;test&quot; trong document course nữa&#10;        // Vì bây giờ dữ liệu test được lưu trong collection &quot;test&quot; riêng biệt&#10;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Starting quiz for courseId: &quot; + courseId);&#10;&#10;        // Kiểm tra xem có bài kiểm tra nào cho khóa học này không bằng cách query collection &quot;test&quot;&#10;        db.collection(&quot;test&quot;)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .limit(1) // Chỉ cần kiểm tra có ít nhất 1 câu hỏi&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                if (!queryDocumentSnapshots.isEmpty()) {&#10;                    // Có bài kiểm tra, chuyển đến activity làm bài&#10;                    Intent intent = new Intent(this, CourseTestActivity.class);&#10;                    intent.putExtra(&quot;courseId&quot;, courseId);&#10;                    intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#10;                    startActivity(intent);&#10;                } else {&#10;                    Toast.makeText(this, &quot;Khóa học này chưa có bài kiểm tra&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error checking test data&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi kiểm tra bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            });&#10;    }&#10;&#10;    // Method để load điểm số bài kiểm tra từ Firebase&#10;    private void loadTestScore() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            return;&#10;        }&#10;&#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(mAuth.getCurrentUser().getUid())&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String studentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        if (studentId != null) {&#10;                            loadTestScoreFromResults(studentId);&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading student info for test score&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void loadTestScoreFromResults(String studentId) {&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Loading test score for student: &quot; + studentId + &quot;, course: &quot; + courseId);&#10;&#10;        // Query testResults collection - bỏ orderBy để tránh lỗi index&#10;        db.collection(&quot;testResults&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        // Tìm điểm cao nhất trong code thay vì dùng orderBy&#10;                        double highestScore = -1;&#10;                        com.google.firebase.firestore.QueryDocumentSnapshot bestDoc = null;&#10;&#10;                        for (com.google.firebase.firestore.QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                            Object scoreObj = doc.get(&quot;score&quot;);&#10;                            double currentScore = 0;&#10;&#10;                            // Xử lý nhiều kiểu dữ liệu cho score&#10;                            if (scoreObj instanceof Double) {&#10;                                currentScore = (Double) scoreObj;&#10;                            } else if (scoreObj instanceof Long) {&#10;                                currentScore = ((Long) scoreObj).doubleValue();&#10;                            } else if (scoreObj instanceof String) {&#10;                                try {&#10;                                    currentScore = Double.parseDouble((String) scoreObj);&#10;                                } catch (NumberFormatException e) {&#10;                                    android.util.Log.w(&quot;StudentCourseDetail&quot;, &quot;Invalid score format: &quot; + scoreObj);&#10;                                    continue;&#10;                                }&#10;                            }&#10;&#10;                            if (currentScore &gt; highestScore) {&#10;                                highestScore = currentScore;&#10;                                bestDoc = doc;&#10;                            }&#10;                        }&#10;&#10;                        if (bestDoc != null &amp;&amp; highestScore &gt;= 0) {&#10;                            displayTestScore(bestDoc, highestScore);&#10;                        } else {&#10;                            showNoTestScore();&#10;                        }&#10;                    } else {&#10;                        // Chưa có kết quả bài kiểm tra&#10;                        showNoTestScore();&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;No test results found&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading test score&quot;, e);&#10;                    tvTestScore.setText(&quot;Lỗi tải điểm số: &quot; + e.getMessage());&#10;                    tvTestScore.setTextColor(getColor(android.R.color.holo_red_dark));&#10;                    tvTestScore.setVisibility(View.VISIBLE);&#10;                });&#10;    }&#10;&#10;    private void displayTestScore(com.google.firebase.firestore.QueryDocumentSnapshot doc, double score) {&#10;        try {&#10;            String scoreText = String.format(&quot;Điểm bài kiểm tra: %.1f/100&quot;, score);&#10;&#10;            // Safely get correctAnswers và totalQuestions&#10;            Object correctAnswersObj = doc.get(&quot;correctAnswers&quot;);&#10;            Object totalQuestionsObj = doc.get(&quot;totalQuestions&quot;);&#10;&#10;            if (correctAnswersObj != null &amp;&amp; totalQuestionsObj != null) {&#10;                int correctAnswers = 0;&#10;                int totalQuestions = 0;&#10;&#10;                if (correctAnswersObj instanceof Long) {&#10;                    correctAnswers = ((Long) correctAnswersObj).intValue();&#10;                } else if (correctAnswersObj instanceof Double) {&#10;                    correctAnswers = ((Double) correctAnswersObj).intValue();&#10;                }&#10;&#10;                if (totalQuestionsObj instanceof Long) {&#10;                    totalQuestions = ((Long) totalQuestionsObj).intValue();&#10;                } else if (totalQuestionsObj instanceof Double) {&#10;                    totalQuestions = ((Double) totalQuestionsObj).intValue();&#10;                }&#10;&#10;                if (totalQuestions &gt; 0) {&#10;                    scoreText += String.format(&quot; (%d/%d câu đúng)&quot;, correctAnswers, totalQuestions);&#10;                }&#10;            }&#10;&#10;            // Safely get completedAt&#10;            com.google.firebase.Timestamp completedAt = doc.getTimestamp(&quot;completedAt&quot;);&#10;            if (completedAt != null) {&#10;                try {&#10;                    String dateText = android.text.format.DateFormat.format(&quot;dd/MM/yyyy&quot;, completedAt.toDate()).toString();&#10;                    scoreText += &quot;\nNgày làm bài: &quot; + dateText;&#10;                } catch (Exception e) {&#10;                    android.util.Log.w(&quot;StudentCourseDetail&quot;, &quot;Error formatting date&quot;, e);&#10;                }&#10;            }&#10;&#10;            tvTestScore.setText(scoreText);&#10;            tvTestScore.setVisibility(View.VISIBLE);&#10;&#10;            // Set màu sắc dựa trên điểm số&#10;            if (score &gt;= 80) {&#10;                tvTestScore.setTextColor(getColor(android.R.color.holo_green_dark));&#10;            } else if (score &gt;= 60) {&#10;                tvTestScore.setTextColor(getColor(android.R.color.holo_orange_dark));&#10;            } else {&#10;                tvTestScore.setTextColor(getColor(android.R.color.holo_red_dark));&#10;            }&#10;&#10;            android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Test score loaded successfully: &quot; + score);&#10;&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error displaying test score&quot;, e);&#10;            showNoTestScore();&#10;        }&#10;    }&#10;&#10;    private void showNoTestScore() {&#10;        tvTestScore.setText(&quot;Chưa làm bài kiểm tra&quot;);&#10;        tvTestScore.setTextColor(getColor(android.R.color.darker_gray));&#10;        tvTestScore.setVisibility(View.VISIBLE);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;&#13;&#10;public class StudentCourseDetailActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private TextView tvCourseTitle, tvCourseDescription, tvCourseCategory, tvCourseLevel;&#13;&#10;    private TextView tvCourseDuration, tvTotalLessons, tvCompletedLessons;&#13;&#10;    private TextView tvEnrollmentDate, tvProgressPercentage, tvTestScore; // Thêm tvTestScore&#13;&#10;    private ProgressBar progressBarCompletion;&#13;&#10;    private Button btnStartLearning, btnTakeQuiz; // Xóa btnViewLessons và btnViewProgress, thêm btnTakeQuiz&#13;&#10;    private Toolbar toolbar;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private String courseId, courseTitle, courseCategory, enrollmentId;&#13;&#10;    private Course currentCourse;&#13;&#10;    private int currentProgress = 0; // Thêm biến để track progress&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_student_course_detail);&#13;&#10;&#13;&#10;        // Get course info from intent - sửa lại tên extra cho đúng&#13;&#10;        courseId = getIntent().getStringExtra(&quot;course_id&quot;); // Thay đổi từ &quot;courseId&quot; thành &quot;course_id&quot;&#13;&#10;        courseTitle = getIntent().getStringExtra(&quot;course_title&quot;); // Thay đổi từ &quot;courseTitle&quot; thành &quot;course_title&quot;&#13;&#10;        courseCategory = getIntent().getStringExtra(&quot;courseCategory&quot;);&#13;&#10;        enrollmentId = getIntent().getStringExtra(&quot;enrollmentId&quot;);&#13;&#10;&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Intent data - courseId: &quot; + courseId + &quot;, courseTitle: &quot; + courseTitle);&#13;&#10;&#13;&#10;        if (courseId == null) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            finish();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupClickListeners();&#13;&#10;        loadCourseData();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#13;&#10;        tvCourseDescription = findViewById(R.id.tv_course_description);&#13;&#10;        tvCourseCategory = findViewById(R.id.tv_course_category);&#13;&#10;        tvCourseLevel = findViewById(R.id.tv_course_level);&#13;&#10;        tvCourseDuration = findViewById(R.id.tv_course_duration);&#13;&#10;        tvTotalLessons = findViewById(R.id.tv_total_lessons);&#13;&#10;        tvCompletedLessons = findViewById(R.id.tv_completed_lessons);&#13;&#10;        tvEnrollmentDate = findViewById(R.id.tv_enrollment_date);&#13;&#10;        tvProgressPercentage = findViewById(R.id.tv_progress_percentage);&#13;&#10;        tvTestScore = findViewById(R.id.tv_test_score); // Khai báo TextView cho điểm số bài kiểm tra&#13;&#10;        progressBarCompletion = findViewById(R.id.progress_bar_completion);&#13;&#10;        btnStartLearning = findViewById(R.id.btn_start_learning);&#13;&#10;        btnTakeQuiz = findViewById(R.id.btn_take_quiz); // Thay thế btnViewLessons và btnViewProgress&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Chi tiết khóa học&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnStartLearning.setOnClickListener(v -&gt; {&#13;&#10;            Intent intent = new Intent(this, StudentCourseLessonsActivity.class);&#13;&#10;            intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;            intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#13;&#10;            intent.putExtra(&quot;courseCategory&quot;, courseCategory);&#13;&#10;            startActivity(intent);&#13;&#10;        });&#13;&#10;&#13;&#10;        btnTakeQuiz.setOnClickListener(v -&gt; {&#13;&#10;            // Kiểm tra xem học viên đã hoàn thành 100% bài học chưa&#13;&#10;            if (currentProgress &lt; 100) {&#13;&#10;                Toast.makeText(this,&#13;&#10;                    &quot;Bạn cần hoàn thành tất cả bài học (&quot; + currentProgress + &quot;% hoàn thành) trước khi làm bài kiểm tra&quot;,&#13;&#10;                    Toast.LENGTH_LONG).show();&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            // Load dữ liệu test từ Firebase và tạo form bài kiểm tra&#13;&#10;            loadTestDataAndStartQuiz();&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadCourseData() {&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                if (documentSnapshot.exists()) {&#13;&#10;                    currentCourse = documentSnapshot.toObject(Course.class);&#13;&#10;                    if (currentCourse != null) {&#13;&#10;                        currentCourse.setId(documentSnapshot.getId());&#13;&#10;                        displayCourseInfo();&#13;&#10;                        loadProgressData();&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    Toast.makeText(this, &quot;Không tìm thấy khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    finish();&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading course&quot;, e);&#13;&#10;                Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void displayCourseInfo() {&#13;&#10;        tvCourseTitle.setText(currentCourse.getTitle());&#13;&#10;        tvCourseDescription.setText(currentCourse.getDescription());&#13;&#10;        tvCourseCategory.setText(currentCourse.getCategory());&#13;&#10;        tvCourseLevel.setText(currentCourse.getLevel());&#13;&#10;        tvCourseDuration.setText(currentCourse.getDuration() + &quot; giờ&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadProgressData() {&#13;&#10;        if (mAuth.getCurrentUser() == null) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Get student info từ users collection&#13;&#10;        db.collection(&quot;users&quot;).document(mAuth.getCurrentUser().getUid())&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                    if (documentSnapshot.exists()) {&#13;&#10;                        String studentId = documentSnapshot.getString(&quot;id&quot;);&#13;&#10;                        if (studentId != null) {&#13;&#10;                            calculateProgress(studentId);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading student info&quot;, e);&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void calculateProgress(String studentId) {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;=== CALCULATING PROGRESS FOR COURSE DETAIL ===&quot;);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;CourseId: &quot; + courseId);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;StudentId: &quot; + studentId);&#13;&#10;&#13;&#10;        // Sử dụng cùng logic với StudentMyCoursesActivity để đảm bảo đồng bộ&#13;&#10;        // Thử load lessons từ subcollection trước&#13;&#10;        db.collection(&quot;courses&quot;).document(courseId).collection(&quot;lessons&quot;)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(lessonsSnapshot -&gt; {&#13;&#10;                int totalLessons = lessonsSnapshot.size();&#13;&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Total lessons from courses/{courseId}/lessons: &quot; + totalLessons);&#13;&#10;&#13;&#10;                if (totalLessons == 0) {&#13;&#10;                    // Thử cách khác: lessons collection với courseId filter&#13;&#10;                    db.collection(&quot;lessons&quot;)&#13;&#10;                        .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                        .get()&#13;&#10;                        .addOnSuccessListener(alternativeLessons -&gt; {&#13;&#10;                            int altTotalLessons = alternativeLessons.size();&#13;&#10;                            android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Total lessons from lessons collection: &quot; + altTotalLessons);&#13;&#10;&#13;&#10;                            if (altTotalLessons &gt; 0) {&#13;&#10;                                calculateProgressWithLessons(studentId, altTotalLessons);&#13;&#10;                            } else {&#13;&#10;                                // Fallback: không có bài học nào&#13;&#10;                                updateProgressUI(0, 0, 0);&#13;&#10;                            }&#13;&#10;                        })&#13;&#10;                        .addOnFailureListener(e -&gt; {&#13;&#10;                            android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading alternative lessons&quot;, e);&#13;&#10;                            updateProgressUI(0, 0, 0);&#13;&#10;                        });&#13;&#10;                } else {&#13;&#10;                    calculateProgressWithLessons(studentId, totalLessons);&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lessons&quot;, e);&#13;&#10;                // Fallback to old method with published filter&#13;&#10;                loadLessonsWithPublishedFilter(studentId);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadLessonsWithPublishedFilter(String studentId) {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Fallback: Loading lessons with isPublished filter&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;lessons&quot;)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .whereEqualTo(&quot;isPublished&quot;, true)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                int totalLessons = queryDocumentSnapshots.size();&#13;&#10;                calculateProgressWithLessons(studentId, totalLessons);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lessons with published filter&quot;, e);&#13;&#10;                updateProgressUI(0, 0, 0);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void calculateProgressWithLessons(String studentId, int totalLessons) {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Calculating progress with &quot; + totalLessons + &quot; total lessons&quot;);&#13;&#10;&#13;&#10;        // Sử dụng collection lesson_progress với field isCompleted (đồng bộ với StudentMyCoursesActivity)&#13;&#10;        db.collection(&quot;lesson_progress&quot;)&#13;&#10;            .whereEqualTo(&quot;studentId&quot;, studentId)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .whereEqualTo(&quot;isCompleted&quot;, true)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(progressSnapshots -&gt; {&#13;&#10;                int completedLessons = progressSnapshots.size();&#13;&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons from lesson_progress: &quot; + completedLessons);&#13;&#10;&#13;&#10;                updateProgressUI(totalLessons, completedLessons, totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lesson_progress&quot;, e);&#13;&#10;                // Thử collection khác nếu lesson_progress không có dữ liệu&#13;&#10;                tryAlternativeProgressCollection(studentId, totalLessons);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void tryAlternativeProgressCollection(String studentId, int totalLessons) {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Trying alternative progress collection: lessonProgress&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;lessonProgress&quot;)&#13;&#10;            .whereEqualTo(&quot;studentId&quot;, studentId)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .whereEqualTo(&quot;completed&quot;, true)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(progressSnapshot -&gt; {&#13;&#10;                int completedLessons = progressSnapshot.size();&#13;&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons from lessonProgress: &quot; + completedLessons);&#13;&#10;&#13;&#10;                updateProgressUI(totalLessons, completedLessons, totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading lessonProgress&quot;, e);&#13;&#10;                // Thử collection cuối cùng&#13;&#10;                tryLastProgressCollection(studentId, totalLessons);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void tryLastProgressCollection(String studentId, int totalLessons) {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Trying last progress collection: studentProgress&quot;);&#13;&#10;&#13;&#10;        db.collection(&quot;studentProgress&quot;)&#13;&#10;            .whereEqualTo(&quot;studentId&quot;, studentId)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .whereEqualTo(&quot;completed&quot;, true)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(progressSnapshot -&gt; {&#13;&#10;                int completedLessons = progressSnapshot.size();&#13;&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons from studentProgress: &quot; + completedLessons);&#13;&#10;&#13;&#10;                updateProgressUI(totalLessons, completedLessons, totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0);&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading studentProgress&quot;, e);&#13;&#10;                // Set default values&#13;&#10;                updateProgressUI(totalLessons, 0, 0);&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateProgressUI(int totalLessons, int completedLessons, int progress) {&#13;&#10;        tvTotalLessons.setText(&quot;Tổng số bài: &quot; + totalLessons);&#13;&#10;        tvCompletedLessons.setText(&quot;Đã hoàn thành: &quot; + completedLessons);&#13;&#10;        currentProgress = progress;&#13;&#10;        tvProgressPercentage.setText(currentProgress + &quot;%&quot;);&#13;&#10;        progressBarCompletion.setProgress(currentProgress);&#13;&#10;&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;=== FINAL PROGRESS IN DETAIL ===&quot;);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Total lessons: &quot; + totalLessons);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Completed lessons: &quot; + completedLessons);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Progress percentage: &quot; + currentProgress + &quot;%&quot;);&#13;&#10;&#13;&#10;        // Update button state based on progress&#13;&#10;        updateButtonStates();&#13;&#10;&#13;&#10;        // Load test score after updating progress&#13;&#10;        loadTestScore();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateButtonStates() {&#13;&#10;        // Cập nhật trạng thái nút dựa trên tiến độ&#13;&#10;        if (currentProgress &gt;= 100) {&#13;&#10;            btnTakeQuiz.setEnabled(true);&#13;&#10;            btnTakeQuiz.setText(&quot;Làm bài kiểm tra&quot;);&#13;&#10;            btnTakeQuiz.setBackgroundTintList(&#13;&#10;                android.content.res.ColorStateList.valueOf(getColor(android.R.color.holo_green_dark))&#13;&#10;            );&#13;&#10;        } else {&#13;&#10;            btnTakeQuiz.setEnabled(false);&#13;&#10;            btnTakeQuiz.setText(&quot;Làm bài kiểm tra (Hoàn thành hết bài học trước)&quot;);&#13;&#10;            btnTakeQuiz.setBackgroundTintList(&#13;&#10;                android.content.res.ColorStateList.valueOf(getColor(android.R.color.darker_gray))&#13;&#10;            );&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            finish();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onResume() {&#13;&#10;        super.onResume();&#13;&#10;        // Refresh progress data when returning from lesson to show updated progress&#13;&#10;        if (currentCourse != null) {&#13;&#10;            loadProgressData();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Add method to manually refresh progress (can be called from other activities)&#13;&#10;    public void refreshProgressData() {&#13;&#10;        loadProgressData();&#13;&#10;    }&#13;&#10;&#13;&#10;    // Method để load dữ liệu test và bắt đầu làm bài kiểm tra&#13;&#10;    private void loadTestDataAndStartQuiz() {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;=== STARTING QUIZ DEBUG ===&quot;);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Course ID: &quot; + courseId);&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Course Title: &quot; + courseTitle);&#13;&#10;&#13;&#10;        if (courseId == null || courseId.isEmpty()) {&#13;&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy ID khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra xem có bài kiểm tra nào cho khóa học này không bằng cách query collection &quot;test&quot;&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Querying collection 'test' with courseId: &quot; + courseId);&#13;&#10;        &#13;&#10;        db.collection(&quot;test&quot;)&#13;&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;            .get()&#13;&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Query successful! Found &quot; + queryDocumentSnapshots.size() + &quot; test documents&quot;);&#13;&#10;                &#13;&#10;                if (!queryDocumentSnapshots.isEmpty()) {&#13;&#10;                    // Debug: In ra thông tin của các documents tìm được&#13;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Test document ID: &quot; + doc.getId());&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Test document data: &quot; + doc.getData().toString());&#13;&#10;                        &#13;&#10;                        // Kiểm tra cấu trúc dữ liệu&#13;&#10;                        String question = doc.getString(&quot;question&quot;);&#13;&#10;                        Object options = doc.get(&quot;options&quot;); // Có thể là Array hoặc List&#13;&#10;                        Object correctAnswer = doc.get(&quot;correctAnswer&quot;); // Có thể là Number&#13;&#10;                        &#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Question: &quot; + question);&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Options type: &quot; + (options != null ? options.getClass().getSimpleName() : &quot;null&quot;));&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Options: &quot; + options);&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;CorrectAnswer type: &quot; + (correctAnswer != null ? correctAnswer.getClass().getSimpleName() : &quot;null&quot;));&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;CorrectAnswer: &quot; + correctAnswer);&#13;&#10;                    }&#13;&#10;                    &#13;&#10;                    // Có bài kiểm tra, chuyển đến activity làm bài&#13;&#10;                    android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Starting CourseTestActivity...&quot;);&#13;&#10;                    Intent intent = new Intent(this, CourseTestActivity.class);&#13;&#10;                    intent.putExtra(&quot;courseId&quot;, courseId);&#13;&#10;                    intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#13;&#10;                    &#13;&#10;                    try {&#13;&#10;                        startActivity(intent);&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;CourseTestActivity started successfully&quot;);&#13;&#10;                    } catch (Exception e) {&#13;&#10;                        android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error starting CourseTestActivity&quot;, e);&#13;&#10;                        Toast.makeText(this, &quot;Lỗi khởi chạy bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    android.util.Log.w(&quot;StudentCourseDetail&quot;, &quot;No test documents found for courseId: &quot; + courseId);&#13;&#10;                    Toast.makeText(this, &quot;Khóa học này chưa có bài kiểm tra&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                }&#13;&#10;            })&#13;&#10;            .addOnFailureListener(e -&gt; {&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error querying test collection&quot;, e);&#13;&#10;                android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error details: &quot; + e.getMessage());&#13;&#10;                Toast.makeText(this, &quot;Lỗi kiểm tra bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    // Method để load điểm số bài kiểm tra từ Firebase&#13;&#10;    private void loadTestScore() {&#13;&#10;        if (mAuth.getCurrentUser() == null) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Get student info từ users collection&#13;&#10;        db.collection(&quot;users&quot;).document(mAuth.getCurrentUser().getUid())&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                    if (documentSnapshot.exists()) {&#13;&#10;                        String studentId = documentSnapshot.getString(&quot;id&quot;);&#13;&#10;                        if (studentId != null) {&#13;&#10;                            loadTestScoreFromResults(studentId);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading student info for test score&quot;, e);&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadTestScoreFromResults(String studentId) {&#13;&#10;        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Loading test score for student: &quot; + studentId + &quot;, course: &quot; + courseId);&#13;&#10;&#13;&#10;        // Query testResults collection - bỏ orderBy để tránh lỗi index&#13;&#10;        db.collection(&quot;testResults&quot;)&#13;&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#13;&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#13;&#10;                        // Tìm điểm cao nhất trong code thay vì dùng orderBy&#13;&#10;                        double highestScore = -1;&#13;&#10;                        com.google.firebase.firestore.QueryDocumentSnapshot bestDoc = null;&#13;&#10;&#13;&#10;                        for (com.google.firebase.firestore.QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#13;&#10;                            Object scoreObj = doc.get(&quot;score&quot;);&#13;&#10;                            double currentScore = 0;&#13;&#10;&#13;&#10;                            // Xử lý nhiều kiểu dữ liệu cho score&#13;&#10;                            if (scoreObj instanceof Double) {&#13;&#10;                                currentScore = (Double) scoreObj;&#13;&#10;                            } else if (scoreObj instanceof Long) {&#13;&#10;                                currentScore = ((Long) scoreObj).doubleValue();&#13;&#10;                            } else if (scoreObj instanceof String) {&#13;&#10;                                try {&#13;&#10;                                    currentScore = Double.parseDouble((String) scoreObj);&#13;&#10;                                } catch (NumberFormatException e) {&#13;&#10;                                    android.util.Log.w(&quot;StudentCourseDetail&quot;, &quot;Invalid score format: &quot; + scoreObj);&#13;&#10;                                    continue;&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;&#13;&#10;                            if (currentScore &gt; highestScore) {&#13;&#10;                                highestScore = currentScore;&#13;&#10;                                bestDoc = doc;&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;&#13;&#10;                        if (bestDoc != null &amp;&amp; highestScore &gt;= 0) {&#13;&#10;                            displayTestScore(bestDoc, highestScore);&#13;&#10;                        } else {&#13;&#10;                            showNoTestScore();&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        // Chưa có kết quả bài kiểm tra&#13;&#10;                        showNoTestScore();&#13;&#10;                        android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;No test results found&quot;);&#13;&#10;                    }&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error loading test score&quot;, e);&#13;&#10;                    tvTestScore.setText(&quot;Lỗi tải điểm số: &quot; + e.getMessage());&#13;&#10;                    tvTestScore.setTextColor(getColor(android.R.color.holo_red_dark));&#13;&#10;                    tvTestScore.setVisibility(View.VISIBLE);&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void displayTestScore(com.google.firebase.firestore.QueryDocumentSnapshot doc, double score) {&#13;&#10;        try {&#13;&#10;            String scoreText = String.format(&quot;Điểm bài kiểm tra: %.1f/100&quot;, score);&#13;&#10;&#13;&#10;            // Safely get correctAnswers và totalQuestions&#13;&#10;            Object correctAnswersObj = doc.get(&quot;correctAnswers&quot;);&#13;&#10;            Object totalQuestionsObj = doc.get(&quot;totalQuestions&quot;);&#13;&#10;&#13;&#10;            if (correctAnswersObj != null &amp;&amp; totalQuestionsObj != null) {&#13;&#10;                int correctAnswers = 0;&#13;&#10;                int totalQuestions = 0;&#13;&#10;&#13;&#10;                if (correctAnswersObj instanceof Long) {&#13;&#10;                    correctAnswers = ((Long) correctAnswersObj).intValue();&#13;&#10;                } else if (correctAnswersObj instanceof Double) {&#13;&#10;                    correctAnswers = ((Double) correctAnswersObj).intValue();&#13;&#10;                }&#13;&#10;&#13;&#10;                if (totalQuestionsObj instanceof Long) {&#13;&#10;                    totalQuestions = ((Long) totalQuestionsObj).intValue();&#13;&#10;                } else if (totalQuestionsObj instanceof Double) {&#13;&#10;                    totalQuestions = ((Double) totalQuestionsObj).intValue();&#13;&#10;                }&#13;&#10;&#13;&#10;                if (totalQuestions &gt; 0) {&#13;&#10;                    scoreText += String.format(&quot; (%d/%d câu đúng)&quot;, correctAnswers, totalQuestions);&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Safely get completedAt&#13;&#10;            com.google.firebase.Timestamp completedAt = doc.getTimestamp(&quot;completedAt&quot;);&#13;&#10;            if (completedAt != null) {&#13;&#10;                try {&#13;&#10;                    String dateText = android.text.format.DateFormat.format(&quot;dd/MM/yyyy&quot;, completedAt.toDate()).toString();&#13;&#10;                    scoreText += &quot;\nNgày làm bài: &quot; + dateText;&#13;&#10;                } catch (Exception e) {&#13;&#10;                    android.util.Log.w(&quot;StudentCourseDetail&quot;, &quot;Error formatting date&quot;, e);&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            tvTestScore.setText(scoreText);&#13;&#10;            tvTestScore.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;            // Set màu sắc dựa trên điểm số&#13;&#10;            if (score &gt;= 80) {&#13;&#10;                tvTestScore.setTextColor(getColor(android.R.color.holo_green_dark));&#13;&#10;            } else if (score &gt;= 60) {&#13;&#10;                tvTestScore.setTextColor(getColor(android.R.color.holo_orange_dark));&#13;&#10;            } else {&#13;&#10;                tvTestScore.setTextColor(getColor(android.R.color.holo_red_dark));&#13;&#10;            }&#13;&#10;&#13;&#10;            android.util.Log.d(&quot;StudentCourseDetail&quot;, &quot;Test score loaded successfully: &quot; + score);&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            android.util.Log.e(&quot;StudentCourseDetail&quot;, &quot;Error displaying test score&quot;, e);&#13;&#10;            showNoTestScore();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showNoTestScore() {&#13;&#10;        tvTestScore.setText(&quot;Chưa làm bài kiểm tra&quot;);&#13;&#10;        tvTestScore.setTextColor(getColor(android.R.color.darker_gray));&#13;&#10;        tvTestScore.setVisibility(View.VISIBLE);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentCourseLessonsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentCourseLessonsActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentCourseLessonsActivity extends AppCompatActivity implements StudentLessonAdapter.OnLessonClickListener {&#10;&#10;    private RecyclerView rvLessons;&#10;    private LinearLayout layoutNoLessons;&#10;    private TextView tvCourseTitle, tvCourseInfo;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;Lesson&gt; lessonList;&#10;    private StudentLessonAdapter lessonAdapter;&#10;&#10;    private String courseId;&#10;    private String courseTitle;&#10;    private String courseCategory;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_course_lessons);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;        courseCategory = getIntent().getStringExtra(&quot;courseCategory&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        lessonList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadLessons();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvLessons = findViewById(R.id.rv_lessons);&#10;        layoutNoLessons = findViewById(R.id.layout_no_lessons);&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        tvCourseInfo = findViewById(R.id.tv_course_info);&#10;&#10;        tvCourseTitle.setText(courseTitle);&#10;        tvCourseInfo.setText(&quot;Danh mục: &quot; + courseCategory);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bài học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        lessonAdapter = new StudentLessonAdapter(lessonList, new StudentLessonAdapter.OnLessonClickListener() {&#10;            @Override&#10;            public void onLessonClick(Lesson lesson) {&#10;                // Debug logging để kiểm tra dữ liệu&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;=== DEBUG LESSON CLICK ===&quot;);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson ID: &quot; + lesson.getId());&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson Title: &quot; + lesson.getTitle());&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course ID: &quot; + courseId);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course Title: &quot; + courseTitle);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course Category: &quot; + courseCategory);&#10;&#10;                // Kiểm tra dữ liệu trước khi chuyển&#10;                if (lesson.getId() == null || lesson.getId().isEmpty()) {&#10;                    Toast.makeText(StudentCourseLessonsActivity.this, &quot;Lỗi: Bài học không có ID hợp lệ&quot;, Toast.LENGTH_LONG).show();&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Lesson ID is null or empty!&quot;);&#10;                    return;&#10;                }&#10;&#10;                if (lesson.getTitle() == null || lesson.getTitle().isEmpty()) {&#10;                    Toast.makeText(StudentCourseLessonsActivity.this, &quot;Lỗi: Bài học không có tiêu đề&quot;, Toast.LENGTH_LONG).show();&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Lesson title is null or empty!&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Chuyển đến màn hình học bài với đầy đủ thông tin&#10;                Intent intent = new Intent(StudentCourseLessonsActivity.this, StudentLessonLearningActivity.class);&#10;                intent.putExtra(&quot;lessonId&quot;, lesson.getId());&#10;                intent.putExtra(&quot;lessonTitle&quot;, lesson.getTitle());&#10;                intent.putExtra(&quot;courseId&quot;, courseId);&#10;                intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#10;                intent.putExtra(&quot;courseCategory&quot;, courseCategory);&#10;&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Starting StudentLessonLearningActivity with Intent&quot;);&#10;                startActivity(intent);&#10;            }&#10;&#10;            @Override&#10;            public void onFavoriteChanged(Lesson lesson, boolean isFavorite) {&#10;                // Log favorite status change&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;,&#10;                    &quot;Lesson &quot; + lesson.getTitle() + &quot; favorite status changed to: &quot; + isFavorite);&#10;            }&#10;&#10;            @Override&#10;            public void onLessonCompleted(Lesson lesson) {&#10;                // Xử lý khi bài học được đánh dấu hoàn thành&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson completed: &quot; + lesson.getTitle());&#10;&#10;                // Tính toán và hiển thị tiến độ khóa học cập nhật&#10;                calculateAndShowCourseProgress();&#10;&#10;                // Hiển thị thông báo khuyến khích&#10;                showCompletionEncouragement(lesson);&#10;            }&#10;        }, courseId, courseTitle);&#10;&#10;        rvLessons.setLayoutManager(new LinearLayoutManager(this));&#10;        rvLessons.setAdapter(lessonAdapter);&#10;    }&#10;&#10;    private void loadLessons() {&#10;        layoutNoLessons.setVisibility(View.VISIBLE);&#10;        rvLessons.setVisibility(View.GONE);&#10;&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;=== DEBUG: Starting loadLessons ===&quot;);&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;CourseId: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;CourseTitle: &quot; + courseTitle);&#10;&#10;        // Load lessons with proper isPublished filter (now that we fixed lesson creation)&#10;        db.collection(&quot;lessons&quot;)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .whereEqualTo(&quot;isPublished&quot;, true)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                lessonList.clear();&#10;&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;=== FIREBASE SUCCESS ===&quot;);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Total published lessons found: &quot; + queryDocumentSnapshots.size());&#10;&#10;                for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                    Lesson lesson = document.toObject(Lesson.class);&#10;                    lesson.setId(document.getId());&#10;&#10;                    // Set all lessons as accessible for now&#10;                    lesson.setAccessible(true);&#10;                    lesson.setLocked(false);&#10;                    lesson.setCompleted(false);&#10;&#10;                    lessonList.add(lesson);&#10;&#10;                    android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Added lesson: &quot; + lesson.getTitle() + &quot; (Order: &quot; + lesson.getOrder() + &quot;)&quot;);&#10;                }&#10;&#10;                // Sort lessons by order&#10;                lessonList.sort((l1, l2) -&gt; Integer.compare(l1.getOrder(), l2.getOrder()));&#10;&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Sorted lessons, total: &quot; + lessonList.size());&#10;&#10;                // Show lessons immediately&#10;                showLessonsDirectly();&#10;&#10;                // Then load progress in background&#10;                if (mAuth.getCurrentUser() != null) {&#10;                    loadLessonProgressStatus();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;=== FIREBASE ERROR ===&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải bài học: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                layoutNoLessons.setVisibility(View.VISIBLE);&#10;                rvLessons.setVisibility(View.GONE);&#10;            });&#10;    }&#10;&#10;    private void showLessonsDirectly() {&#10;        if (lessonList.isEmpty()) {&#10;            layoutNoLessons.setVisibility(View.VISIBLE);&#10;            rvLessons.setVisibility(View.GONE);&#10;        } else {&#10;            layoutNoLessons.setVisibility(View.GONE);&#10;            rvLessons.setVisibility(View.VISIBLE);&#10;            lessonAdapter.notifyDataSetChanged();&#10;        }&#10;    }&#10;&#10;    private void loadLessonProgressStatus() {&#10;        if (mAuth.getCurrentUser() == null) return;&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        // Load progress for all lessons at once&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    // Create a map of completed lessons for quick lookup&#10;                    Map&lt;String, Boolean&gt; completedLessons = new HashMap&lt;&gt;();&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        String lessonId = doc.getString(&quot;lessonId&quot;);&#10;                        Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                        if (lessonId != null &amp;&amp; isCompleted != null &amp;&amp; isCompleted) {&#10;                            completedLessons.put(lessonId, true);&#10;                        }&#10;                    }&#10;&#10;                    // Update lesson completion status&#10;                    for (Lesson lesson : lessonList) {&#10;                        lesson.setCompleted(completedLessons.containsKey(lesson.getId()));&#10;                    }&#10;&#10;                    // Refresh adapter&#10;                    lessonAdapter.notifyDataSetChanged();&#10;&#10;                    android.util.Log.d(&quot;StudentCourseLessons&quot;,&#10;                        &quot;Loaded progress for &quot; + completedLessons.size() + &quot; completed lessons&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Error loading lesson progress&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void calculateAndShowCourseProgress() {&#10;        if (lessonList.isEmpty()) return;&#10;&#10;        int totalLessons = lessonList.size();&#10;        int completedLessons = 0;&#10;&#10;        for (Lesson lesson : lessonList) {&#10;            if (lesson.isCompleted()) {&#10;                completedLessons++;&#10;            }&#10;        }&#10;&#10;        int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;        // Hiển thị thông báo tiến độ&#10;        String progressMessage = &quot; Tiến độ khóa học: &quot; + completedLessons + &quot;/&quot; + totalLessons +&#10;                               &quot; (&quot; + progressPercentage + &quot;% hoàn thành)&quot;;&#10;&#10;        Toast.makeText(this, progressMessage, Toast.LENGTH_LONG).show();&#10;&#10;        // Kiểm tra nếu hoàn thành toàn bộ khóa học&#10;        if (completedLessons == totalLessons &amp;&amp; totalLessons &gt; 0) {&#10;            showCourseCompletionDialog();&#10;        }&#10;&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course progress: &quot; + progressPercentage + &quot;%&quot;);&#10;    }&#10;&#10;    private void showCompletionEncouragement(Lesson lesson) {&#10;        // Tính số bài học còn lại&#10;        int remainingLessons = 0;&#10;        for (Lesson l : lessonList) {&#10;            if (!l.isCompleted()) {&#10;                remainingLessons++;&#10;            }&#10;        }&#10;&#10;        String encouragement;&#10;        if (remainingLessons == 0) {&#10;            encouragement = &quot; Chúc mừng! Bạn đã hoàn thành toàn bộ khóa học!&quot;;&#10;        } else if (remainingLessons == 1) {&#10;            encouragement = &quot; Tuyệt vời! Chỉ còn 1 bài học nữa để hoàn thành khóa học!&quot;;&#10;        } else {&#10;            encouragement = &quot; Tốt lắm! Còn &quot; + remainingLessons + &quot; bài học nữa để hoàn thành khóa học!&quot;;&#10;        }&#10;&#10;        Toast.makeText(this, encouragement, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    private void showCourseCompletionDialog() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot; Chúc mừng!&quot;)&#10;                .setMessage(&quot;Bạn đã hoàn thành toàn bộ khóa học '&quot; + courseTitle + &quot;'!\n\n&quot; +&#10;                           &quot;Bạn có thể tiếp tục ôn tập các bài học hoặc tham gia làm bài kiểm tra.&quot;)&#10;                .setPositiveButton(&quot;Làm bài kiểm tra&quot;, (dialog, which) -&gt; {&#10;                    // Chuyển đến màn hình làm bài kiểm tra nếu có&#10;                    Toast.makeText(this, &quot;Chức năng làm bài kiểm tra sẽ được thêm sau&quot;, Toast.LENGTH_SHORT).show();&#10;                })&#10;                .setNeutralButton(&quot;Ôn tập&quot;, (dialog, which) -&gt; {&#10;                    // Giữ nguyên màn hình để ôn tập&#10;                    dialog.dismiss();&#10;                })&#10;                .setNegativeButton(&quot;Đóng&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                .show();&#10;    }&#10;&#10;    private String currentStudentId;&#10;&#10;    private void getCurrentStudentId(Runnable onComplete) {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        onComplete.run();&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Error loading student info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadStudentProgress() {&#10;        if (currentStudentId == null) {&#10;            updateUI();&#10;            return;&#10;        }&#10;&#10;        // Load student progress from lessonProgress collection&#10;        db.collection(&quot;lessonProgress&quot;)&#10;            .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                // Mark completed lessons and determine next available lesson&#10;                java.util.Set&lt;String&gt; completedLessons = new java.util.HashSet&lt;&gt;();&#10;&#10;                for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                    String lessonId = doc.getString(&quot;lessonId&quot;);&#10;                    Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                    if (lessonId != null &amp;&amp; Boolean.TRUE.equals(isCompleted)) {&#10;                        completedLessons.add(lessonId);&#10;                    }&#10;                }&#10;&#10;                // Update lesson accessibility based on progress&#10;                updateLessonAccessibility(completedLessons);&#10;                updateUI();&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Error loading progress&quot;, e);&#10;                // If no progress data, allow access to first lesson only&#10;                updateLessonAccessibility(new java.util.HashSet&lt;&gt;());&#10;                updateUI();&#10;            });&#10;    }&#10;&#10;    private void updateLessonAccessibility(java.util.Set&lt;String&gt; completedLessons) {&#10;        for (int i = 0; i &lt; lessonList.size(); i++) {&#10;            Lesson lesson = lessonList.get(i);&#10;&#10;            if (i == 0) {&#10;                // First lesson is always accessible&#10;                lesson.setAccessible(true);&#10;                lesson.setLocked(false);&#10;            } else {&#10;                // Other lessons are only accessible if previous lesson is completed&#10;                Lesson previousLesson = lessonList.get(i - 1);&#10;                boolean previousCompleted = completedLessons.contains(previousLesson.getId());&#10;&#10;                lesson.setAccessible(previousCompleted);&#10;                lesson.setLocked(!previousCompleted);&#10;            }&#10;&#10;            // Mark if lesson is completed&#10;            lesson.setCompleted(completedLessons.contains(lesson.getId()));&#10;&#10;            android.util.Log.d(&quot;StudentCourseLessons&quot;,&#10;                &quot;Lesson &quot; + lesson.getOrder() + &quot;: &quot; + lesson.getTitle() +&#10;                &quot; - Accessible: &quot; + lesson.isAccessible() +&#10;                &quot; - Completed: &quot; + lesson.isCompleted());&#10;        }&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (lessonList.isEmpty()) {&#10;            layoutNoLessons.setVisibility(View.VISIBLE);&#10;            rvLessons.setVisibility(View.GONE);&#10;        } else {&#10;            layoutNoLessons.setVisibility(View.GONE);&#10;            rvLessons.setVisibility(View.VISIBLE);&#10;            lessonAdapter.notifyDataSetChanged();&#10;&#10;            Toast.makeText(this, &quot;Đã tải &quot; + lessonList.size() + &quot; bài học&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onLessonClick(Lesson lesson) {&#10;        // Check if lesson is accessible&#10;        if (!lesson.isAccessible()) {&#10;            if (lesson.isLocked()) {&#10;                Toast.makeText(this, &quot; Bài học này chưa mở khóa!\nHãy hoàn thành bài học trước đó.&quot;, Toast.LENGTH_LONG).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;Bài học này chưa sẵn sàng.&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Navigate to lesson learning activity&#10;        Intent intent = new Intent(this, StudentLessonLearningActivity.class);&#10;        intent.putExtra(&quot;lessonId&quot;, lesson.getId());&#10;        intent.putExtra(&quot;lessonTitle&quot;, lesson.getTitle());&#10;        intent.putExtra(&quot;courseId&quot;, courseId);&#10;        intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#10;        intent.putExtra(&quot;courseCategory&quot;, courseCategory);&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onFavoriteChanged(Lesson lesson, boolean isFavorite) {&#10;        // Handle favorite status change&#10;        String message = isFavorite ? &quot;Đã thêm vào yêu thích&quot; : &quot;Đã xóa khỏi yêu thích&quot;;&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Favorite changed: &quot; + lesson.getTitle() + &quot; - &quot; + isFavorite);&#10;        // Could show a toast or update UI if needed&#10;    }&#10;&#10;    @Override&#10;    public void onLessonCompleted(Lesson lesson) {&#10;        // Xử lý khi bài học được đánh dấu hoàn thành&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson completed: &quot; + lesson.getTitle());&#10;&#10;        // Tính toán và hiển thị tiến độ khóa học cập nhật&#10;        calculateAndShowCourseProgress();&#10;&#10;        // Hiển thị thông báo khuyến khích&#10;        showCompletionEncouragement(lesson);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh lesson progress when returning to this activity&#10;        if (lessonAdapter != null &amp;&amp; !lessonList.isEmpty()) {&#10;            loadLessonProgressStatus();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentCourseLessonsActivity extends AppCompatActivity implements StudentLessonAdapter.OnLessonClickListener {&#10;&#10;    private RecyclerView rvLessons;&#10;    private LinearLayout layoutNoLessons;&#10;    private TextView tvCourseTitle, tvCourseInfo;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;Lesson&gt; lessonList;&#10;    private StudentLessonAdapter lessonAdapter;&#10;&#10;    private String courseId;&#10;    private String courseTitle;&#10;    private String courseCategory;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_course_lessons);&#10;&#10;        // Get course info from intent&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;        courseCategory = getIntent().getStringExtra(&quot;courseCategory&quot;);&#10;&#10;        if (courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        lessonList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadLessons();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvLessons = findViewById(R.id.rv_lessons);&#10;        layoutNoLessons = findViewById(R.id.layout_no_lessons);&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        tvCourseInfo = findViewById(R.id.tv_course_info);&#10;&#10;        tvCourseTitle.setText(courseTitle);&#10;        tvCourseInfo.setText(&quot;Danh mục: &quot; + courseCategory);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bài học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        lessonAdapter = new StudentLessonAdapter(lessonList, new StudentLessonAdapter.OnLessonClickListener() {&#10;            @Override&#10;            public void onLessonClick(Lesson lesson) {&#10;                // Debug logging để kiểm tra dữ liệu&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;=== DEBUG LESSON CLICK ===&quot;);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson ID: &quot; + lesson.getId());&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson Title: &quot; + lesson.getTitle());&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course ID: &quot; + courseId);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course Title: &quot; + courseTitle);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course Category: &quot; + courseCategory);&#10;&#10;                // Kiểm tra dữ liệu trước khi chuyển&#10;                if (lesson.getId() == null || lesson.getId().isEmpty()) {&#10;                    Toast.makeText(StudentCourseLessonsActivity.this, &quot;Lỗi: Bài học không có ID hợp lệ&quot;, Toast.LENGTH_LONG).show();&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Lesson ID is null or empty!&quot;);&#10;                    return;&#10;                }&#10;&#10;                if (lesson.getTitle() == null || lesson.getTitle().isEmpty()) {&#10;                    Toast.makeText(StudentCourseLessonsActivity.this, &quot;Lỗi: Bài học không có tiêu đề&quot;, Toast.LENGTH_LONG).show();&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Lesson title is null or empty!&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Chuyển đến màn hình học bài với đầy đủ thông tin&#10;                Intent intent = new Intent(StudentCourseLessonsActivity.this, StudentLessonLearningActivity.class);&#10;                intent.putExtra(&quot;lessonId&quot;, lesson.getId());&#10;                intent.putExtra(&quot;lessonTitle&quot;, lesson.getTitle());&#10;                intent.putExtra(&quot;courseId&quot;, courseId);&#10;                intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#10;                intent.putExtra(&quot;courseCategory&quot;, courseCategory);&#10;&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Starting StudentLessonLearningActivity with Intent&quot;);&#10;                startActivity(intent);&#10;            }&#10;&#10;            @Override&#10;            public void onFavoriteChanged(Lesson lesson, boolean isFavorite) {&#10;                // Log favorite status change&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;,&#10;                    &quot;Lesson &quot; + lesson.getTitle() + &quot; favorite status changed to: &quot; + isFavorite);&#10;            }&#10;&#10;            @Override&#10;            public void onLessonCompleted(Lesson lesson) {&#10;                // Xử lý khi bài học được đánh dấu hoàn thành&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson completed: &quot; + lesson.getTitle());&#10;&#10;                // Tính toán và hiển thị tiến độ khóa học cập nhật&#10;                calculateAndShowCourseProgress();&#10;&#10;                // Hiển thị thông báo khuyến khích&#10;                showCompletionEncouragement(lesson);&#10;            }&#10;        }, courseId, courseTitle);&#10;&#10;        rvLessons.setLayoutManager(new LinearLayoutManager(this));&#10;        rvLessons.setAdapter(lessonAdapter);&#10;    }&#10;&#10;    private void loadLessons() {&#10;        layoutNoLessons.setVisibility(View.VISIBLE);&#10;        rvLessons.setVisibility(View.GONE);&#10;&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;=== DEBUG: Starting loadLessons ===&quot;);&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;CourseId: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;CourseTitle: &quot; + courseTitle);&#10;&#10;        // Load lessons with proper isPublished filter (now that we fixed lesson creation)&#10;        db.collection(&quot;lessons&quot;)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .whereEqualTo(&quot;isPublished&quot;, true)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                lessonList.clear();&#10;&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;=== FIREBASE SUCCESS ===&quot;);&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Total published lessons found: &quot; + queryDocumentSnapshots.size());&#10;&#10;                for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                    Lesson lesson = document.toObject(Lesson.class);&#10;                    lesson.setId(document.getId());&#10;&#10;                    // Set all lessons as accessible for now&#10;                    lesson.setAccessible(true);&#10;                    lesson.setLocked(false);&#10;                    lesson.setCompleted(false);&#10;&#10;                    lessonList.add(lesson);&#10;&#10;                    android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Added lesson: &quot; + lesson.getTitle() + &quot; (Order: &quot; + lesson.getOrder() + &quot;)&quot;);&#10;                }&#10;&#10;                // Sort lessons by order&#10;                lessonList.sort((l1, l2) -&gt; Integer.compare(l1.getOrder(), l2.getOrder()));&#10;&#10;                android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Sorted lessons, total: &quot; + lessonList.size());&#10;&#10;                // Show lessons immediately&#10;                showLessonsDirectly();&#10;&#10;                // Then load progress in background&#10;                if (mAuth.getCurrentUser() != null) {&#10;                    loadLessonProgressStatus();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;=== FIREBASE ERROR ===&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải bài học: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                layoutNoLessons.setVisibility(View.VISIBLE);&#10;                rvLessons.setVisibility(View.GONE);&#10;            });&#10;    }&#10;&#10;    private void showLessonsDirectly() {&#10;        if (lessonList.isEmpty()) {&#10;            layoutNoLessons.setVisibility(View.VISIBLE);&#10;            rvLessons.setVisibility(View.GONE);&#10;        } else {&#10;            layoutNoLessons.setVisibility(View.GONE);&#10;            rvLessons.setVisibility(View.VISIBLE);&#10;            lessonAdapter.notifyDataSetChanged();&#10;        }&#10;    }&#10;&#10;    private void loadLessonProgressStatus() {&#10;        if (mAuth.getCurrentUser() == null) return;&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        // Load progress for all lessons at once&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    // Create a map of completed lessons for quick lookup&#10;                    Map&lt;String, Boolean&gt; completedLessons = new HashMap&lt;&gt;();&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        String lessonId = doc.getString(&quot;lessonId&quot;);&#10;                        Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                        if (lessonId != null &amp;&amp; isCompleted != null &amp;&amp; isCompleted) {&#10;                            completedLessons.put(lessonId, true);&#10;                        }&#10;                    }&#10;&#10;                    // Update lesson completion status&#10;                    for (Lesson lesson : lessonList) {&#10;                        lesson.setCompleted(completedLessons.containsKey(lesson.getId()));&#10;                    }&#10;&#10;                    // Refresh adapter&#10;                    lessonAdapter.notifyDataSetChanged();&#10;&#10;                    android.util.Log.d(&quot;StudentCourseLessons&quot;,&#10;                        &quot;Loaded progress for &quot; + completedLessons.size() + &quot; completed lessons&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Error loading lesson progress&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void calculateAndShowCourseProgress() {&#10;        if (lessonList.isEmpty()) return;&#10;&#10;        int totalLessons = lessonList.size();&#10;        int completedLessons = 0;&#10;&#10;        for (Lesson lesson : lessonList) {&#10;            if (lesson.isCompleted()) {&#10;                completedLessons++;&#10;            }&#10;        }&#10;&#10;        int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;        // Hiển thị thông báo tiến độ&#10;        String progressMessage = &quot; Tiến độ khóa học: &quot; + completedLessons + &quot;/&quot; + totalLessons +&#10;                               &quot; (&quot; + progressPercentage + &quot;% hoàn thành)&quot;;&#10;&#10;        Toast.makeText(this, progressMessage, Toast.LENGTH_LONG).show();&#10;&#10;        // Kiểm tra nếu hoàn thành toàn bộ khóa học&#10;        if (completedLessons == totalLessons &amp;&amp; totalLessons &gt; 0) {&#10;            showCourseCompletionDialog();&#10;        }&#10;&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Course progress: &quot; + progressPercentage + &quot;%&quot;);&#10;    }&#10;&#10;    private void showCompletionEncouragement(Lesson lesson) {&#10;        // Tính số bài học còn lại&#10;        int remainingLessons = 0;&#10;        for (Lesson l : lessonList) {&#10;            if (!l.isCompleted()) {&#10;                remainingLessons++;&#10;            }&#10;        }&#10;&#10;        String encouragement;&#10;        if (remainingLessons == 0) {&#10;            encouragement = &quot; Chúc mừng! Bạn đã hoàn thành toàn bộ khóa học!&quot;;&#10;        } else if (remainingLessons == 1) {&#10;            encouragement = &quot; Tuyệt vời! Chỉ còn 1 bài học nữa để hoàn thành khóa học!&quot;;&#10;        } else {&#10;            encouragement = &quot; Tốt lắm! Còn &quot; + remainingLessons + &quot; bài học nữa để hoàn thành khóa học!&quot;;&#10;        }&#10;&#10;        Toast.makeText(this, encouragement, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    private void showCourseCompletionDialog() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot; Chúc mừng!&quot;)&#10;                .setMessage(&quot;Bạn đã hoàn thành toàn bộ khóa học '&quot; + courseTitle + &quot;'!\n\n&quot; +&#10;                           &quot;Bạn có thể tiếp tục ôn tập các bài học hoặc tham gia làm bài kiểm tra.&quot;)&#10;                .setPositiveButton(&quot;Làm bài kiểm tra&quot;, (dialog, which) -&gt; {&#10;                    // Chuyển đến màn hình làm bài kiểm tra nếu có&#10;                    Toast.makeText(this, &quot;Chức năng làm bài kiểm tra sẽ được thêm sau&quot;, Toast.LENGTH_SHORT).show();&#10;                })&#10;                .setNeutralButton(&quot;Ôn tập&quot;, (dialog, which) -&gt; {&#10;                    // Giữ nguyên màn hình để ôn tập&#10;                    dialog.dismiss();&#10;                })&#10;                .setNegativeButton(&quot;Đóng&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                .show();&#10;    }&#10;&#10;    private String currentStudentId;&#10;&#10;    private void getCurrentStudentId(Runnable onComplete) {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        onComplete.run();&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Error loading student info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadStudentProgress() {&#10;        if (currentStudentId == null) {&#10;            updateUI();&#10;            return;&#10;        }&#10;&#10;        // Load student progress from lesson_progress collection&#10;        db.collection(&quot;lesson_progress&quot;)&#10;            .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;            .get()&#10;            .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                // Mark completed lessons and determine next available lesson&#10;                java.util.Set&lt;String&gt; completedLessons = new java.util.HashSet&lt;&gt;();&#10;&#10;                for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                    String lessonId = doc.getString(&quot;lessonId&quot;);&#10;                    Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                    if (lessonId != null &amp;&amp; Boolean.TRUE.equals(isCompleted)) {&#10;                        completedLessons.add(lessonId);&#10;                    }&#10;                }&#10;&#10;                // Update lesson accessibility based on progress&#10;                updateLessonAccessibility(completedLessons);&#10;                updateUI();&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentCourseLessons&quot;, &quot;Error loading progress&quot;, e);&#10;                // If no progress data, allow access to first lesson only&#10;                updateLessonAccessibility(new java.util.HashSet&lt;&gt;());&#10;                updateUI();&#10;            });&#10;    }&#10;&#10;    private void updateLessonAccessibility(java.util.Set&lt;String&gt; completedLessons) {&#10;        for (int i = 0; i &lt; lessonList.size(); i++) {&#10;            Lesson lesson = lessonList.get(i);&#10;&#10;            if (i == 0) {&#10;                // First lesson is always accessible&#10;                lesson.setAccessible(true);&#10;                lesson.setLocked(false);&#10;            } else {&#10;                // Other lessons are only accessible if previous lesson is completed&#10;                Lesson previousLesson = lessonList.get(i - 1);&#10;                boolean previousCompleted = completedLessons.contains(previousLesson.getId());&#10;&#10;                lesson.setAccessible(previousCompleted);&#10;                lesson.setLocked(!previousCompleted);&#10;            }&#10;&#10;            // Mark if lesson is completed&#10;            lesson.setCompleted(completedLessons.contains(lesson.getId()));&#10;&#10;            android.util.Log.d(&quot;StudentCourseLessons&quot;,&#10;                &quot;Lesson &quot; + lesson.getOrder() + &quot;: &quot; + lesson.getTitle() +&#10;                &quot; - Accessible: &quot; + lesson.isAccessible() +&#10;                &quot; - Completed: &quot; + lesson.isCompleted());&#10;        }&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (lessonList.isEmpty()) {&#10;            layoutNoLessons.setVisibility(View.VISIBLE);&#10;            rvLessons.setVisibility(View.GONE);&#10;        } else {&#10;            layoutNoLessons.setVisibility(View.GONE);&#10;            rvLessons.setVisibility(View.VISIBLE);&#10;            lessonAdapter.notifyDataSetChanged();&#10;&#10;            Toast.makeText(this, &quot;Đã tải &quot; + lessonList.size() + &quot; bài học&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onLessonClick(Lesson lesson) {&#10;        // Check if lesson is accessible&#10;        if (!lesson.isAccessible()) {&#10;            if (lesson.isLocked()) {&#10;                Toast.makeText(this, &quot; Bài học này chưa mở khóa!\nHãy hoàn thành bài học trước đó.&quot;, Toast.LENGTH_LONG).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;Bài học này chưa sẵn sàng.&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Navigate to lesson learning activity&#10;        Intent intent = new Intent(this, StudentLessonLearningActivity.class);&#10;        intent.putExtra(&quot;lessonId&quot;, lesson.getId());&#10;        intent.putExtra(&quot;lessonTitle&quot;, lesson.getTitle());&#10;        intent.putExtra(&quot;courseId&quot;, courseId);&#10;        intent.putExtra(&quot;courseTitle&quot;, courseTitle);&#10;        intent.putExtra(&quot;courseCategory&quot;, courseCategory);&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onFavoriteChanged(Lesson lesson, boolean isFavorite) {&#10;        // Handle favorite status change&#10;        String message = isFavorite ? &quot;Đã thêm vào yêu thích&quot; : &quot;Đã xóa khỏi yêu thích&quot;;&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Favorite changed: &quot; + lesson.getTitle() + &quot; - &quot; + isFavorite);&#10;        // Could show a toast or update UI if needed&#10;    }&#10;&#10;    @Override&#10;    public void onLessonCompleted(Lesson lesson) {&#10;        // Xử lý khi bài học được đánh dấu hoàn thành&#10;        android.util.Log.d(&quot;StudentCourseLessons&quot;, &quot;Lesson completed: &quot; + lesson.getTitle());&#10;&#10;        // Tính toán và hiển thị tiến độ khóa học cập nhật&#10;        calculateAndShowCourseProgress();&#10;&#10;        // Hiển thị thông báo khuyến khích&#10;        showCompletionEncouragement(lesson);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh lesson progress when returning to this activity&#10;        if (lessonAdapter != null &amp;&amp; !lessonList.isEmpty()) {&#10;            loadLessonProgressStatus();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentDashboardActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentDashboardActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.Toast;&#10;import android.widget.TextView;&#10;import android.widget.Button;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.cardview.widget.CardView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.DocumentSnapshot;&#10;&#10;public class StudentDashboardActivity extends AppCompatActivity {&#10;&#10;    private TextView tvWelcome;&#10;    private BottomNavigationView bottomNavigation;&#10;    private CardView cardVocabulary, cardGrammar, cardListening, cardSpeaking;&#10;    private Button btnSearchCourses, btnMyCourses, btnFeedback, btnInbox, btnFavoriteLessons;&#10;    private Toolbar toolbar;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_dashboard);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupBottomNavigation();&#10;        setupClickListeners();&#10;        loadUserInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        try {&#10;            toolbar = findViewById(R.id.toolbar);&#10;            tvWelcome = findViewById(R.id.tv_welcome);&#10;            bottomNavigation = findViewById(R.id.bottom_navigation);&#10;&#10;            // Cards&#10;            cardVocabulary = findViewById(R.id.card_vocabulary);&#10;            cardGrammar = findViewById(R.id.card_grammar);&#10;            cardListening = findViewById(R.id.card_listening);&#10;            cardSpeaking = findViewById(R.id.card_speaking);&#10;&#10;            // Buttons - Thêm nút bài học yêu thích&#10;            btnSearchCourses = findViewById(R.id.btn_search_courses);&#10;            btnMyCourses = findViewById(R.id.btn_my_courses);&#10;            btnFavoriteLessons = findViewById(R.id.btn_favorite_lessons); // Thêm nút bài học yêu thích&#10;            btnFeedback = findViewById(R.id.btn_feedback);&#10;            btnInbox = findViewById(R.id.btn_inbox);&#10;&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Lỗi khởi tạo giao diện: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bảng điều khiển học viên&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.student_toolbar_menu, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;        if (itemId == R.id.action_logout) {&#10;            logout();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                // Already on home&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                startActivity(new Intent(this, StudentCourseSearchActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_progress) {&#10;                startActivity(new Intent(this, StudyProgressActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Quick action cards&#10;        cardVocabulary.setOnClickListener(v -&gt; {&#10;            // Navigate to vocabulary practice&#10;            Toast.makeText(this, &quot;Chức năng luyện từ vựng đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        cardGrammar.setOnClickListener(v -&gt; {&#10;            // Navigate to grammar practice&#10;            Toast.makeText(this, &quot;Chức năng luyện ngữ pháp đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        cardListening.setOnClickListener(v -&gt; {&#10;            // Navigate to listening practice&#10;            Toast.makeText(this, &quot;Chức năng luyện nghe đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        cardSpeaking.setOnClickListener(v -&gt; {&#10;            // Navigate to speaking practice&#10;            Toast.makeText(this, &quot;Chức năng luyện nói đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        // Course buttons - Chỉ giữ lại những nút cần thiết&#10;        btnSearchCourses.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, StudentCourseSearchActivity.class));&#10;        });&#10;&#10;        btnMyCourses.setOnClickListener(v -&gt; {&#10;            // Navigate to enrolled courses&#10;            startActivity(new Intent(this, StudentMyCoursesActivity.class));&#10;        });&#10;&#10;        btnFeedback.setOnClickListener(v -&gt; {&#10;            // Navigate to feedback activity&#10;            startActivity(new Intent(this, StudentFeedbackActivity.class));&#10;        });&#10;&#10;        btnInbox.setOnClickListener(v -&gt; {&#10;            // Navigate to inbox activity&#10;            startActivity(new Intent(this, StudentInboxActivity.class));&#10;        });&#10;&#10;        btnFavoriteLessons.setOnClickListener(v -&gt; {&#10;            // Navigate to favorite lessons activity&#10;            startActivity(new Intent(this, StudentFavoriteLessonsActivity.class));&#10;        });&#10;&#10;        // Đã bỏ btnStudyProgress và btnQuickQuiz click listeners&#10;    }&#10;&#10;    private void loadUserInfo() {&#10;        if (mAuth.getCurrentUser() != null) {&#10;            String userId = mAuth.getCurrentUser().getUid();&#10;            db.collection(&quot;users&quot;).document(userId)&#10;                    .get()&#10;                    .addOnSuccessListener(documentSnapshot -&gt; {&#10;                        if (documentSnapshot.exists()) {&#10;                            String name = documentSnapshot.getString(&quot;name&quot;);&#10;                            if (name != null &amp;&amp; !name.isEmpty()) {&#10;                                tvWelcome.setText(&quot;Chào mừng, &quot; + name + &quot;!&quot;);&#10;                            }&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Toast.makeText(this, &quot;Lỗi tải thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void logout() {&#10;        mAuth.signOut();&#10;        Intent intent = new Intent(this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;        Toast.makeText(this, &quot;Đã đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.Toast;&#10;import android.widget.TextView;&#10;import android.widget.Button;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.cardview.widget.CardView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.DocumentSnapshot;&#10;&#10;public class StudentDashboardActivity extends AppCompatActivity {&#10;&#10;    private TextView tvWelcome;&#10;    private BottomNavigationView bottomNavigation;&#10;    private CardView cardVocabulary, cardGrammar, cardListening, cardSpeaking;&#10;    private Button btnSearchCourses, btnMyCourses, btnFeedback, btnInbox, btnFavoriteLessons;&#10;    private Toolbar toolbar;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_dashboard);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupBottomNavigation();&#10;        setupClickListeners();&#10;        loadUserInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        try {&#10;            toolbar = findViewById(R.id.toolbar);&#10;            tvWelcome = findViewById(R.id.tv_welcome);&#10;            bottomNavigation = findViewById(R.id.bottom_navigation);&#10;&#10;            // Cards&#10;            cardVocabulary = findViewById(R.id.card_vocabulary);&#10;            cardGrammar = findViewById(R.id.card_grammar);&#10;            cardListening = findViewById(R.id.card_listening);&#10;            cardSpeaking = findViewById(R.id.card_speaking);&#10;&#10;            // Buttons - Thêm nút bài học yêu thích&#10;            btnSearchCourses = findViewById(R.id.btn_search_courses);&#10;            btnMyCourses = findViewById(R.id.btn_my_courses);&#10;            btnFavoriteLessons = findViewById(R.id.btn_favorite_lessons); // Thêm nút bài học yêu thích&#10;            btnFeedback = findViewById(R.id.btn_feedback);&#10;            btnInbox = findViewById(R.id.btn_inbox);&#10;&#10;        } catch (Exception e) {&#10;            Toast.makeText(this, &quot;Lỗi khởi tạo giao diện: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bảng điều khiển học viên&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.student_toolbar_menu, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;        if (itemId == R.id.action_logout) {&#10;            logout();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigation.setOnItemSelectedListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;            if (itemId == R.id.nav_home) {&#10;                // Already on home&#10;                return true;&#10;            } else if (itemId == R.id.nav_courses) {&#10;                startActivity(new Intent(this, StudentCourseSearchActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_progress) {&#10;                startActivity(new Intent(this, StudyProgressActivity.class));&#10;                return true;&#10;            } else if (itemId == R.id.nav_profile) {&#10;                startActivity(new Intent(this, UpdateProfileActivity.class));&#10;                return true;&#10;            }&#10;            return false;&#10;        });&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        // Quick action cards&#10;        cardVocabulary.setOnClickListener(v -&gt; {&#10;            // Navigate to vocabulary practice&#10;            Toast.makeText(this, &quot;Chức năng luyện từ vựng đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        cardGrammar.setOnClickListener(v -&gt; {&#10;            // Navigate to grammar practice&#10;            Toast.makeText(this, &quot;Chức năng luyện ngữ pháp đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        cardListening.setOnClickListener(v -&gt; {&#10;            // Navigate to listening practice&#10;            Toast.makeText(this, &quot;Chức năng luyện nghe đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        cardSpeaking.setOnClickListener(v -&gt; {&#10;            // Navigate to speaking practice&#10;            Toast.makeText(this, &quot;Chức năng luyện nói đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;&#10;        // Course buttons - Chỉ giữ lại những nút cần thiết&#10;        btnSearchCourses.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, StudentCourseSearchActivity.class));&#10;        });&#10;&#10;        btnMyCourses.setOnClickListener(v -&gt; {&#10;            // Navigate to enrolled courses&#10;            startActivity(new Intent(this, StudentMyCoursesActivity.class));&#10;        });&#10;&#10;        btnFeedback.setOnClickListener(v -&gt; {&#10;            // Navigate to feedback activity&#10;            startActivity(new Intent(this, StudentFeedbackActivity.class));&#10;        });&#10;&#10;        btnInbox.setOnClickListener(v -&gt; {&#10;            // Navigate to inbox activity&#10;            startActivity(new Intent(this, StudentInboxActivity.class));&#10;        });&#10;&#10;        btnFavoriteLessons.setOnClickListener(v -&gt; {&#10;            // Navigate to favorite lessons activity&#10;            startActivity(new Intent(this, FavoriteLessonsActivity.class));&#10;        });&#10;&#10;        // Đã bỏ btnStudyProgress và btnQuickQuiz click listeners&#10;    }&#10;&#10;    private void loadUserInfo() {&#10;        if (mAuth.getCurrentUser() != null) {&#10;            String userId = mAuth.getCurrentUser().getUid();&#10;            db.collection(&quot;users&quot;).document(userId)&#10;                    .get()&#10;                    .addOnSuccessListener(documentSnapshot -&gt; {&#10;                        if (documentSnapshot.exists()) {&#10;                            String name = documentSnapshot.getString(&quot;name&quot;);&#10;                            if (name != null &amp;&amp; !name.isEmpty()) {&#10;                                tvWelcome.setText(&quot;Chào mừng, &quot; + name + &quot;!&quot;);&#10;                            }&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Toast.makeText(this, &quot;Lỗi tải thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void logout() {&#10;        mAuth.signOut();&#10;        Intent intent = new Intent(this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;        Toast.makeText(this, &quot;Đã đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentEnrolledCourseAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentEnrolledCourseAdapter.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class StudentEnrolledCourseAdapter extends RecyclerView.Adapter&lt;StudentEnrolledCourseAdapter.EnrolledCourseViewHolder&gt; {&#10;&#10;    private List&lt;EnrolledCourse&gt; enrolledCourseList;&#10;    private OnCourseClickListener listener;&#10;&#10;    public interface OnCourseClickListener {&#10;        void onCourseClick(EnrolledCourse enrolledCourse);&#10;        void onContinueLearning(EnrolledCourse enrolledCourse);&#10;        void onTakeQuiz(EnrolledCourse enrolledCourse);&#10;    }&#10;&#10;    public StudentEnrolledCourseAdapter(List&lt;EnrolledCourse&gt; enrolledCourseList, OnCourseClickListener listener) {&#10;        this.enrolledCourseList = enrolledCourseList;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public EnrolledCourseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_enrolled_course, parent, false);&#10;        return new EnrolledCourseViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull EnrolledCourseViewHolder holder, int position) {&#10;        EnrolledCourse enrolledCourse = enrolledCourseList.get(position);&#10;        holder.bind(enrolledCourse);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return enrolledCourseList.size();&#10;    }&#10;&#10;    public void updateList(List&lt;EnrolledCourse&gt; newList) {&#10;        this.enrolledCourseList.clear();&#10;        this.enrolledCourseList.addAll(newList);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public class EnrolledCourseViewHolder extends RecyclerView.ViewHolder {&#10;        private CardView cardCourse;&#10;        private TextView tvCourseTitle;&#10;        private TextView tvCourseCategory;&#10;        private TextView tvCourseLevel;&#10;        private TextView tvProgressText;&#10;        private TextView tvProgressPercentage;&#10;        private TextView tvEnrollmentDate;&#10;        private TextView tvStatus;&#10;        private ProgressBar progressBarCompletion;&#10;        private Button btnContinueLearning;&#10;        private Button btnTakeQuiz;&#10;&#10;        public EnrolledCourseViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardCourse = itemView.findViewById(R.id.card_course);&#10;            tvCourseTitle = itemView.findViewById(R.id.tv_course_title);&#10;            tvCourseCategory = itemView.findViewById(R.id.tv_course_category);&#10;            tvCourseLevel = itemView.findViewById(R.id.tv_course_level);&#10;            tvProgressText = itemView.findViewById(R.id.tv_progress_text);&#10;            tvProgressPercentage = itemView.findViewById(R.id.tv_progress_percentage);&#10;            tvEnrollmentDate = itemView.findViewById(R.id.tv_enrollment_date);&#10;            tvStatus = itemView.findViewById(R.id.tv_status);&#10;            btnTakeQuiz = itemView.findViewById(R.id.btn_take_quiz);&#10;            progressBarCompletion = itemView.findViewById(R.id.progress_bar_completion);&#10;            btnContinueLearning = itemView.findViewById(R.id.btn_continue_learning);&#10;&#10;            // Set up click listeners&#10;            cardCourse.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onCourseClick(enrolledCourseList.get(getAdapterPosition()));&#10;                }&#10;            });&#10;&#10;            btnContinueLearning.setOnClickListener(v -&gt; {&#10;&#10;            btnTakeQuiz.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onTakeQuiz(enrolledCourseList.get(getAdapterPosition()));&#10;                }&#10;            });&#10;                if (listener != null) {&#10;                    listener.onContinueLearning(enrolledCourseList.get(getAdapterPosition()));&#10;            // Set progress info - hiển thị tiến độ phần trăm bên ngoài&#10;            });&#10;        }&#10;            progressBarCompletion.setProgress(enrolledCourse.getProgress());&#10;&#10;        public void bind(EnrolledCourse enrolledCourse) {&#10;            Course course = enrolledCourse.getCourse();&#10;&#10;            // Set course basic info&#10;            tvCourseTitle.setText(course.getTitle());&#10;            tvCourseCategory.setText(course.getCategory());&#10;            tvCourseLevel.setText(course.getLevel());&#10;&#10;            // Set progress info - hiển thị phần trăm bên cạnh tiêu đề&#10;            tvProgressText.setText(enrolledCourse.getProgressText());&#10;            tvProgressPercentage.setText(enrolledCourse.getProgressPercentageText());&#10;&#10;            // Set enrollment date&#10;            if (enrolledCourse.getEnrollmentDate() != null &amp;&amp; !enrolledCourse.getEnrollmentDate().isEmpty()) {&#10;                tvEnrollmentDate.setText(&quot;Đăng ký: &quot; + enrolledCourse.getEnrollmentDate().substring(0,&#10;                    Math.min(10, enrolledCourse.getEnrollmentDate().length())));&#10;            } else {&#10;                tvEnrollmentDate.setText(&quot;Đăng ký: N/A&quot;);&#10;            // Logic cho nút &quot;Làm bài kiểm tra&quot;&#10;            // Chỉ cho phép làm bài kiểm tra khi hoàn thành 100% bài học&#10;            if (progress == 100) {&#10;                btnTakeQuiz.setEnabled(true);&#10;                btnTakeQuiz.setText(&quot;Làm bài kiểm tra&quot;);&#10;                btnTakeQuiz.setAlpha(1.0f);&#10;            } else {&#10;                btnTakeQuiz.setEnabled(false);&#10;        private void setCategoryStyle(String category) {&#10;            int colorResId;&#10;            switch (category.toLowerCase()) {&#10;                case &quot;grammar&quot;:&#10;                    colorResId = android.R.color.holo_blue_light;&#10;                    break;&#10;                case &quot;vocabulary&quot;:&#10;                    colorResId = android.R.color.holo_green_light;&#10;                    break;&#10;                case &quot;listening&quot;:&#10;                    colorResId = android.R.color.holo_orange_light;&#10;                    break;&#10;                case &quot;speaking&quot;:&#10;                    colorResId = android.R.color.holo_red_light;&#10;                    break;&#10;                case &quot;reading&quot;:&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getColor(android.R.color.holo_orange_dark));&#10;                    break;&#10;                case &quot;writing&quot;:&#10;                    colorResId = android.R.color.holo_blue_dark;&#10;                    break;&#10;&#10;            }&#10;            // Apply color to progress bar&#10;            progressBarCompletion.setProgressTintList(&#10;                android.content.res.ColorStateList.valueOf(&#10;                    itemView.getContext().getColor(colorResId)&#10;                )&#10;            );&#10;&#10;            // Set progress bar if available&#10;            if (progressBarCompletion != null) {&#10;                progressBarCompletion.setProgress(progress);&#10;            }&#10;&#10;            // Set progress percentage color based on completion&#10;            if (progress == 100) {&#10;                tvProgressPercentage.setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        itemView.getContext().getColor(android.R.color.holo_green_light)&#10;                    )&#10;                );&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            } else if (progress &gt; 0) {&#10;                tvProgressPercentage.setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        itemView.getContext().getColor(android.R.color.holo_orange_light)&#10;                    )&#10;                );&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            } else {&#10;                tvProgressPercentage.setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        itemView.getContext().getColor(android.R.color.darker_gray)&#10;                    )&#10;                );&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            }&#10;&#10;            // Enable continue learning button&#10;            btnContinueLearning.setEnabled(true);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.TextView;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.cardview.widget.CardView;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class StudentEnrolledCourseAdapter extends RecyclerView.Adapter&lt;StudentEnrolledCourseAdapter.EnrolledCourseViewHolder&gt; {&#13;&#10;&#13;&#10;    private List&lt;EnrolledCourse&gt; enrolledCourseList;&#13;&#10;    private OnCourseClickListener listener;&#13;&#10;&#13;&#10;    public interface OnCourseClickListener {&#13;&#10;        void onCourseClick(EnrolledCourse enrolledCourse);&#13;&#10;        void onContinueLearning(EnrolledCourse enrolledCourse);&#13;&#10;    }&#13;&#10;&#13;&#10;    public StudentEnrolledCourseAdapter(List&lt;EnrolledCourse&gt; enrolledCourseList, OnCourseClickListener listener) {&#13;&#10;        this.enrolledCourseList = enrolledCourseList;&#13;&#10;        this.listener = listener;&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public EnrolledCourseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(parent.getContext())&#13;&#10;                .inflate(R.layout.item_enrolled_course, parent, false);&#13;&#10;        return new EnrolledCourseViewHolder(view);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull EnrolledCourseViewHolder holder, int position) {&#13;&#10;        EnrolledCourse enrolledCourse = enrolledCourseList.get(position);&#13;&#10;        holder.bind(enrolledCourse);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return enrolledCourseList.size();&#13;&#10;    }&#13;&#10;&#13;&#10;    public void updateList(List&lt;EnrolledCourse&gt; newList) {&#13;&#10;        this.enrolledCourseList.clear();&#13;&#10;        this.enrolledCourseList.addAll(newList);&#13;&#10;        notifyDataSetChanged();&#13;&#10;    }&#13;&#10;&#13;&#10;    public class EnrolledCourseViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        private CardView cardCourse;&#13;&#10;        private TextView tvCourseTitle;&#13;&#10;        private TextView tvCourseCategory;&#13;&#10;        private TextView tvCourseLevel;&#13;&#10;        private TextView tvProgressText;&#13;&#10;        private TextView tvProgressPercentage;&#13;&#10;        private TextView tvEnrollmentDate;&#13;&#10;        private TextView tvStatus;&#13;&#10;        private ProgressBar progressBarCompletion;&#13;&#10;        private Button btnContinueLearning;&#13;&#10;&#13;&#10;        public EnrolledCourseViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            cardCourse = itemView.findViewById(R.id.card_course);&#13;&#10;            tvCourseTitle = itemView.findViewById(R.id.tv_course_title);&#13;&#10;            tvCourseCategory = itemView.findViewById(R.id.tv_course_category);&#13;&#10;            tvCourseLevel = itemView.findViewById(R.id.tv_course_level);&#13;&#10;            tvProgressText = itemView.findViewById(R.id.tv_progress_text);&#13;&#10;            tvProgressPercentage = itemView.findViewById(R.id.tv_progress_percentage);&#13;&#10;            tvEnrollmentDate = itemView.findViewById(R.id.tv_enrollment_date);&#13;&#10;            tvStatus = itemView.findViewById(R.id.tv_status);&#13;&#10;            progressBarCompletion = itemView.findViewById(R.id.progress_bar_completion);&#13;&#10;            btnContinueLearning = itemView.findViewById(R.id.btn_continue_learning);&#13;&#10;&#13;&#10;            // Set up click listeners&#13;&#10;            cardCourse.setOnClickListener(v -&gt; {&#13;&#10;                if (listener != null) {&#13;&#10;                    listener.onCourseClick(enrolledCourseList.get(getAdapterPosition()));&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;            btnContinueLearning.setOnClickListener(v -&gt; {&#13;&#10;                if (listener != null) {&#13;&#10;                    listener.onContinueLearning(enrolledCourseList.get(getAdapterPosition()));&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;&#13;&#10;        public void bind(EnrolledCourse enrolledCourse) {&#13;&#10;            Course course = enrolledCourse.getCourse();&#13;&#10;&#13;&#10;            // Set course basic info&#13;&#10;            tvCourseTitle.setText(course.getTitle());&#13;&#10;            tvCourseCategory.setText(course.getCategory());&#13;&#10;            tvCourseLevel.setText(course.getLevel());&#13;&#10;&#13;&#10;            // Set progress info - hiển thị phần trăm bên cạnh tiêu đề&#13;&#10;            int progress = enrolledCourse.getProgress();&#13;&#10;            int completedLessons = enrolledCourse.getCompletedLessons();&#13;&#10;            int totalLessons = enrolledCourse.getTotalLessons();&#13;&#10;&#13;&#10;            // Hiển thị phần trăm ở bên ngoài&#13;&#10;            tvProgressPercentage.setText(progress + &quot;%&quot;);&#13;&#10;            &#13;&#10;            // Set màu sắc theo tiến độ&#13;&#10;            if (progress == 100) {&#13;&#10;                tvProgressPercentage.setBackgroundColor(itemView.getContext().getResources().getColor(android.R.color.holo_green_dark));&#13;&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getResources().getColor(android.R.color.white));&#13;&#10;            } else if (progress &gt;= 50) {&#13;&#10;                tvProgressPercentage.setBackgroundColor(itemView.getContext().getResources().getColor(android.R.color.holo_orange_light));&#13;&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getResources().getColor(android.R.color.black));&#13;&#10;            } else {&#13;&#10;                tvProgressPercentage.setBackgroundColor(itemView.getContext().getResources().getColor(android.R.color.holo_red_light));&#13;&#10;                tvProgressPercentage.setTextColor(itemView.getContext().getResources().getColor(android.R.color.white));&#13;&#10;            }&#13;&#10;&#13;&#10;            // Set detailed progress text&#13;&#10;            String progressText = completedLessons + &quot;/&quot; + totalLessons + &quot; bài học&quot;;&#13;&#10;            tvProgressText.setText(progressText);&#13;&#10;&#13;&#10;            // Set progress bar&#13;&#10;            progressBarCompletion.setProgress(progress);&#13;&#10;&#13;&#10;            // Set enrollment date&#13;&#10;            tvEnrollmentDate.setText(&quot;Ngày đăng ký: &quot; + enrolledCourse.getEnrollmentDate());&#13;&#10;&#13;&#10;            // Set status&#13;&#10;            tvStatus.setText(&quot;Trạng thái: &quot; + enrolledCourse.getStatus());&#13;&#10;&#13;&#10;            // Debug log&#13;&#10;            android.util.Log.d(&quot;EnrolledCourseAdapter&quot;, &quot;Course: &quot; + course.getTitle() + &#13;&#10;                &quot; - Progress: &quot; + progress + &quot;%&quot; + &#13;&#10;                &quot; - Completed: &quot; + completedLessons + &quot;/&quot; + totalLessons);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentFeedbackActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentFeedbackActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentFeedbackActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private Spinner spinnerCourses;&#10;    private EditText etFeedbackMessage;&#10;    private Button btnSubmitFeedback;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;&#10;    private List&lt;Course&gt; enrolledCourses;&#10;    private ArrayAdapter&lt;String&gt; courseAdapter;&#10;    private String currentStudentId;&#10;    private String currentStudentName;&#10;    private String currentStudentEmail;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_feedback);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        enrolledCourses = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupSpinner();&#10;        setupClickListeners();&#10;        loadCurrentStudentInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        spinnerCourses = findViewById(R.id.spinner_courses);&#10;        etFeedbackMessage = findViewById(R.id.et_feedback_message);&#10;        btnSubmitFeedback = findViewById(R.id.btn_submit_feedback);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Đánh giá khóa học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupSpinner() {&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Chọn khóa học để đánh giá...&quot;);&#10;&#10;        courseAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, courseNames);&#10;        courseAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerCourses.setAdapter(courseAdapter);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSubmitFeedback.setOnClickListener(v -&gt; submitFeedback());&#10;    }&#10;&#10;    private void loadCurrentStudentInfo() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;        currentStudentEmail = mAuth.getCurrentUser().getEmail();&#10;&#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        currentStudentName = documentSnapshot.getString(&quot;name&quot;);&#10;&#10;                        if (currentStudentId != null) {&#10;                            loadEnrolledCourses();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadEnrolledCourses() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;=== LOADING ENROLLED COURSES ===&quot;);&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Student ID: &quot; + currentStudentId);&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Student Email: &quot; + currentStudentEmail);&#10;&#10;        if (currentStudentId == null) {&#10;            Toast.makeText(this, &quot;Không tìm thấy ID học viên&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Reset spinner data&#10;        enrolledCourses.clear();&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Chọn khóa học để đánh giá...&quot;);&#10;        courseAdapter.clear();&#10;        courseAdapter.addAll(courseNames);&#10;        courseAdapter.notifyDataSetChanged();&#10;&#10;        // Thử nhiều collection name và field name có thể có&#10;        tryLoadFromEnrollments();&#10;    }&#10;&#10;    private void tryLoadFromEnrollments() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Trying collection 'enrollments' with field 'studentID'&quot;);&#10;&#10;        // Thử với &quot;enrollments&quot; collection và &quot;studentID&quot; field&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;enrollments/studentID query returned &quot; + queryDocumentSnapshots.size() + &quot; results&quot;);&#10;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        processEnrollmentResults(queryDocumentSnapshots);&#10;                    } else {&#10;                        // Thử với field name khác&#10;                        tryAlternativeFieldNames();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error with enrollments/studentID&quot;, e);&#10;                    tryAlternativeFieldNames();&#10;                });&#10;    }&#10;&#10;    private void tryAlternativeFieldNames() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Trying collection 'enrollments' with field 'studentId'&quot;);&#10;&#10;        // Thử với &quot;studentId&quot; (chữ d thường)&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;enrollments/studentId query returned &quot; + queryDocumentSnapshots.size() + &quot; results&quot;);&#10;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        processEnrollmentResults(queryDocumentSnapshots);&#10;                    } else {&#10;                        // Thử collection name khác&#10;                        tryAlternativeCollectionNames();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error with enrollments/studentId&quot;, e);&#10;                    tryAlternativeCollectionNames();&#10;                });&#10;    }&#10;&#10;    private void tryAlternativeCollectionNames() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Trying collection 'enrollment' with field 'studentID'&quot;);&#10;&#10;        // Thử với &quot;enrollment&quot; collection (số ít)&#10;        db.collection(&quot;enrollment&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;enrollment/studentID query returned &quot; + queryDocumentSnapshots.size() + &quot; results&quot;);&#10;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        processEnrollmentResults(queryDocumentSnapshots);&#10;                    } else {&#10;                        // Thử load ALL enrollments để debug&#10;                        debugLoadAllEnrollments();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error with enrollment/studentID&quot;, e);&#10;                    debugLoadAllEnrollments();&#10;                });&#10;    }&#10;&#10;    private void debugLoadAllEnrollments() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;=== DEBUG: Loading ALL enrollments to check data structure ===&quot;);&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .limit(5) // Chỉ lấy 5 record đầu để debug&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Total enrollments in database: &quot; + queryDocumentSnapshots.size());&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Enrollment doc: &quot; + doc.getId());&#10;                        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Data: &quot; + doc.getData().toString());&#10;                    }&#10;&#10;                    // Vẫn không có dữ liệu phù hợp&#10;                    showNoCoursesMessage();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error loading debug enrollments&quot;, e);&#10;                    showNoCoursesMessage();&#10;                });&#10;    }&#10;&#10;    private void processEnrollmentResults(com.google.firebase.firestore.QuerySnapshot queryDocumentSnapshots) {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Processing &quot; + queryDocumentSnapshots.size() + &quot; enrollment results&quot;);&#10;&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Chọn khóa học để đánh giá...&quot;);&#10;&#10;        final int totalEnrollments = queryDocumentSnapshots.size();&#10;        final int[] processedCount = {0};&#10;&#10;        // Load course details for each enrollment&#10;        for (com.google.firebase.firestore.QueryDocumentSnapshot enrollmentDoc : queryDocumentSnapshots) {&#10;            // Thử nhiều field name có thể có cho courseId&#10;            String courseId = enrollmentDoc.getString(&quot;courseID&quot;);&#10;            if (courseId == null) {&#10;                courseId = enrollmentDoc.getString(&quot;courseId&quot;);&#10;            }&#10;            if (courseId == null) {&#10;                courseId = enrollmentDoc.getString(&quot;course_id&quot;);&#10;            }&#10;&#10;            android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Processing enrollment: &quot; + enrollmentDoc.getId() + &quot;, courseId: &quot; + courseId);&#10;&#10;            if (courseId != null) {&#10;                loadCourseDetailsImproved(courseId, courseNames, totalEnrollments, processedCount);&#10;            } else {&#10;                android.util.Log.w(&quot;StudentFeedback&quot;, &quot;No courseId found in enrollment: &quot; + enrollmentDoc.getData());&#10;                processedCount[0]++;&#10;                checkIfAllProcessed(courseNames, totalEnrollments, processedCount[0]);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showNoCoursesMessage() {&#10;        Toast.makeText(this, &quot;Bạn chưa có khóa học nào được duyệt để đánh giá&quot;, Toast.LENGTH_LONG).show();&#10;&#10;        // Vẫn hiển thị spinner với message&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Không có khóa học nào để đánh giá&quot;);&#10;        courseAdapter.clear();&#10;        courseAdapter.addAll(courseNames);&#10;        courseAdapter.notifyDataSetChanged();&#10;    }&#10;&#10;    private void submitFeedback() {&#10;        int selectedPosition = spinnerCourses.getSelectedItemPosition();&#10;        String feedbackMessage = etFeedbackMessage.getText().toString().trim();&#10;&#10;        // Validation&#10;        if (selectedPosition &lt;= 0) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (feedbackMessage.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập nội dung đánh giá&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (feedbackMessage.length() &lt; 10) {&#10;            Toast.makeText(this, &quot;Nội dung đánh giá quá ngắn (ít nhất 10 ký tự)&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Get selected course&#10;        Course selectedCourse = enrolledCourses.get(selectedPosition - 1); // -1 vì có item đầu là &quot;Chọn khóa học...&quot;&#10;&#10;        // Create feedback data&#10;        Map&lt;String, Object&gt; feedbackData = new HashMap&lt;&gt;();&#10;        feedbackData.put(&quot;courseId&quot;, selectedCourse.getId());&#10;        feedbackData.put(&quot;courseName&quot;, selectedCourse.getTitle());&#10;        feedbackData.put(&quot;message&quot;, feedbackMessage);&#10;        feedbackData.put(&quot;feedbackRequest&quot;, com.google.firebase.Timestamp.now());&#10;        feedbackData.put(&quot;studentEmail&quot;, currentStudentEmail);&#10;        feedbackData.put(&quot;studentId&quot;, currentStudentId);&#10;        feedbackData.put(&quot;studentName&quot;, currentStudentName);&#10;        feedbackData.put(&quot;status&quot;, &quot;pending&quot;); // Trạng thái feedback: pending, reviewed&#10;&#10;        // Disable button while submitting&#10;        btnSubmitFeedback.setEnabled(false);&#10;        btnSubmitFeedback.setText(&quot;Đang gửi...&quot;);&#10;&#10;        // Save to Firebase&#10;        db.collection(&quot;feedbacks&quot;)&#10;                .add(feedbackData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Feedback submitted successfully with ID: &quot; + documentReference.getId());&#10;&#10;                    Toast.makeText(this, &quot;Gửi đánh giá thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                    // Clear form&#10;                    spinnerCourses.setSelection(0);&#10;                    etFeedbackMessage.setText(&quot;&quot;);&#10;&#10;                    // Re-enable button&#10;                    btnSubmitFeedback.setEnabled(true);&#10;                    btnSubmitFeedback.setText(&quot;Gửi đánh giá&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error submitting feedback&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi gửi đánh giá: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;&#10;                    // Re-enable button&#10;                    btnSubmitFeedback.setEnabled(true);&#10;                    btnSubmitFeedback.setText(&quot;Gửi đánh giá&quot;);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentFeedbackActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private Spinner spinnerCourses;&#10;    private EditText etFeedbackMessage;&#10;    private Button btnSubmitFeedback;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;&#10;    private List&lt;Course&gt; enrolledCourses;&#10;    private ArrayAdapter&lt;String&gt; courseAdapter;&#10;    private String currentStudentId;&#10;    private String currentStudentName;&#10;    private String currentStudentEmail;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_feedback);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        enrolledCourses = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupSpinner();&#10;        setupClickListeners();&#10;        loadCurrentStudentInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        spinnerCourses = findViewById(R.id.spinner_courses);&#10;        etFeedbackMessage = findViewById(R.id.et_feedback_message);&#10;        btnSubmitFeedback = findViewById(R.id.btn_submit_feedback);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Đánh giá khóa học&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupSpinner() {&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Chọn khóa học để đánh giá...&quot;);&#10;&#10;        courseAdapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, courseNames);&#10;        courseAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerCourses.setAdapter(courseAdapter);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSubmitFeedback.setOnClickListener(v -&gt; submitFeedback());&#10;    }&#10;&#10;    private void loadCurrentStudentInfo() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;        currentStudentEmail = mAuth.getCurrentUser().getEmail();&#10;&#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        currentStudentName = documentSnapshot.getString(&quot;name&quot;);&#10;&#10;                        if (currentStudentId != null) {&#10;                            loadEnrolledCourses();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadEnrolledCourses() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;=== LOADING ENROLLED COURSES ===&quot;);&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Student ID: &quot; + currentStudentId);&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Student Email: &quot; + currentStudentEmail);&#10;&#10;        if (currentStudentId == null) {&#10;            Toast.makeText(this, &quot;Không tìm thấy ID học viên&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Reset spinner data&#10;        enrolledCourses.clear();&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Chọn khóa học để đánh giá...&quot;);&#10;        courseAdapter.clear();&#10;        courseAdapter.addAll(courseNames);&#10;        courseAdapter.notifyDataSetChanged();&#10;&#10;        // Thử nhiều collection name và field name có thể có&#10;        tryLoadFromEnrollments();&#10;    }&#10;&#10;    private void tryLoadFromEnrollments() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Trying collection 'enrollments' with field 'studentID'&quot;);&#10;&#10;        // Thử với &quot;enrollments&quot; collection và &quot;studentID&quot; field&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;enrollments/studentID query returned &quot; + queryDocumentSnapshots.size() + &quot; results&quot;);&#10;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        processEnrollmentResults(queryDocumentSnapshots);&#10;                    } else {&#10;                        // Thử với field name khác&#10;                        tryAlternativeFieldNames();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error with enrollments/studentID&quot;, e);&#10;                    tryAlternativeFieldNames();&#10;                });&#10;    }&#10;&#10;    private void tryAlternativeFieldNames() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Trying collection 'enrollments' with field 'studentId'&quot;);&#10;&#10;        // Thử với &quot;studentId&quot; (chữ d thường)&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;enrollments/studentId query returned &quot; + queryDocumentSnapshots.size() + &quot; results&quot;);&#10;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        processEnrollmentResults(queryDocumentSnapshots);&#10;                    } else {&#10;                        // Thử collection name khác&#10;                        tryAlternativeCollectionNames();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error with enrollments/studentId&quot;, e);&#10;                    tryAlternativeCollectionNames();&#10;                });&#10;    }&#10;&#10;    private void tryAlternativeCollectionNames() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Trying collection 'enrollment' with field 'studentID'&quot;);&#10;&#10;        // Thử với &quot;enrollment&quot; collection (số ít)&#10;        db.collection(&quot;enrollment&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;enrollment/studentID query returned &quot; + queryDocumentSnapshots.size() + &quot; results&quot;);&#10;&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        processEnrollmentResults(queryDocumentSnapshots);&#10;                    } else {&#10;                        // Thử load ALL enrollments để debug&#10;                        debugLoadAllEnrollments();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error with enrollment/studentID&quot;, e);&#10;                    debugLoadAllEnrollments();&#10;                });&#10;    }&#10;&#10;    private void debugLoadAllEnrollments() {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;=== DEBUG: Loading ALL enrollments to check data structure ===&quot;);&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .limit(5) // Chỉ lấy 5 record đầu để debug&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Total enrollments in database: &quot; + queryDocumentSnapshots.size());&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Enrollment doc: &quot; + doc.getId());&#10;                        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Data: &quot; + doc.getData().toString());&#10;                    }&#10;&#10;                    // Vẫn không có dữ liệu phù hợp&#10;                    showNoCoursesMessage();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error loading debug enrollments&quot;, e);&#10;                    showNoCoursesMessage();&#10;                });&#10;    }&#10;&#10;    private void processEnrollmentResults(com.google.firebase.firestore.QuerySnapshot queryDocumentSnapshots) {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Processing &quot; + queryDocumentSnapshots.size() + &quot; enrollment results&quot;);&#10;&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Chọn khóa học để đánh giá...&quot;);&#10;&#10;        final int totalEnrollments = queryDocumentSnapshots.size();&#10;        final int[] processedCount = {0};&#10;&#10;        // Load course details for each enrollment&#10;        for (com.google.firebase.firestore.QueryDocumentSnapshot enrollmentDoc : queryDocumentSnapshots) {&#10;            // Thử nhiều field name có thể có cho courseId&#10;            String courseId = enrollmentDoc.getString(&quot;courseID&quot;);&#10;            if (courseId == null) {&#10;                courseId = enrollmentDoc.getString(&quot;courseId&quot;);&#10;            }&#10;            if (courseId == null) {&#10;                courseId = enrollmentDoc.getString(&quot;course_id&quot;);&#10;            }&#10;&#10;            android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Processing enrollment: &quot; + enrollmentDoc.getId() + &quot;, courseId: &quot; + courseId);&#10;&#10;            if (courseId != null) {&#10;                loadCourseDetailsImproved(courseId, courseNames, totalEnrollments, processedCount);&#10;            } else {&#10;                android.util.Log.w(&quot;StudentFeedback&quot;, &quot;No courseId found in enrollment: &quot; + enrollmentDoc.getData());&#10;                processedCount[0]++;&#10;                checkIfAllProcessed(courseNames, totalEnrollments, processedCount[0]);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showNoCoursesMessage() {&#10;        Toast.makeText(this, &quot;Bạn chưa có khóa học nào được duyệt để đánh giá&quot;, Toast.LENGTH_LONG).show();&#10;&#10;        // Vẫn hiển thị spinner với message&#10;        List&lt;String&gt; courseNames = new ArrayList&lt;&gt;();&#10;        courseNames.add(&quot;Không có khóa học nào để đánh giá&quot;);&#10;        courseAdapter.clear();&#10;        courseAdapter.addAll(courseNames);&#10;        courseAdapter.notifyDataSetChanged();&#10;    }&#10;&#10;    private void submitFeedback() {&#10;        int selectedPosition = spinnerCourses.getSelectedItemPosition();&#10;        String feedbackMessage = etFeedbackMessage.getText().toString().trim();&#10;&#10;        // Validation&#10;        if (selectedPosition &lt;= 0) {&#10;            Toast.makeText(this, &quot;Vui lòng chọn khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (feedbackMessage.isEmpty()) {&#10;            Toast.makeText(this, &quot;Vui lòng nhập nội dung đánh giá&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (feedbackMessage.length() &lt; 10) {&#10;            Toast.makeText(this, &quot;Nội dung đánh giá quá ngắn (ít nhất 10 ký tự)&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Get selected course&#10;        Course selectedCourse = enrolledCourses.get(selectedPosition - 1); // -1 vì có item đầu là &quot;Chọn khóa học...&quot;&#10;&#10;        // Create feedback data&#10;        Map&lt;String, Object&gt; feedbackData = new HashMap&lt;&gt;();&#10;        feedbackData.put(&quot;courseId&quot;, selectedCourse.getId());&#10;        feedbackData.put(&quot;courseName&quot;, selectedCourse.getTitle());&#10;        feedbackData.put(&quot;message&quot;, feedbackMessage);&#10;        feedbackData.put(&quot;feedbackRequest&quot;, com.google.firebase.Timestamp.now());&#10;        feedbackData.put(&quot;studentEmail&quot;, currentStudentEmail);&#10;        feedbackData.put(&quot;studentId&quot;, currentStudentId);&#10;        feedbackData.put(&quot;studentName&quot;, currentStudentName);&#10;        feedbackData.put(&quot;status&quot;, &quot;pending&quot;); // Trạng thái feedback: pending, reviewed&#10;&#10;        // Disable button while submitting&#10;        btnSubmitFeedback.setEnabled(false);&#10;        btnSubmitFeedback.setText(&quot;Đang gửi...&quot;);&#10;&#10;        // Save to Firebase&#10;        db.collection(&quot;feedbacks&quot;)&#10;                .add(feedbackData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Feedback submitted successfully with ID: &quot; + documentReference.getId());&#10;&#10;                    Toast.makeText(this, &quot;Gửi đánh giá thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                    // Clear form&#10;                    spinnerCourses.setSelection(0);&#10;                    etFeedbackMessage.setText(&quot;&quot;);&#10;&#10;                    // Re-enable button&#10;                    btnSubmitFeedback.setEnabled(true);&#10;                    btnSubmitFeedback.setText(&quot;Gửi đánh giá&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error submitting feedback&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi gửi đánh giá: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;&#10;                    // Re-enable button&#10;                    btnSubmitFeedback.setEnabled(true);&#10;                    btnSubmitFeedback.setText(&quot;Gửi đánh giá&quot;);&#10;                });&#10;    }&#10;&#10;    private void loadCourseDetailsImproved(String courseId, List&lt;String&gt; courseNames, int totalEnrollments, int[] processedCount) {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Loading course details for courseId: &quot; + courseId);&#10;&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;                .get()&#10;                .addOnSuccessListener(courseDoc -&gt; {&#10;                    processedCount[0]++;&#10;&#10;                    if (courseDoc.exists()) {&#10;                        Course course = courseDoc.toObject(Course.class);&#10;                        if (course != null) {&#10;                            course.setId(courseDoc.getId());&#10;                            enrolledCourses.add(course);&#10;                            courseNames.add(course.getTitle());&#10;&#10;                            android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Added course: &quot; + course.getTitle());&#10;                        }&#10;                    } else {&#10;                        android.util.Log.w(&quot;StudentFeedback&quot;, &quot;Course not found: &quot; + courseId);&#10;                    }&#10;&#10;                    checkIfAllProcessed(courseNames, totalEnrollments, processedCount[0]);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentFeedback&quot;, &quot;Error loading course details for: &quot; + courseId, e);&#10;                    processedCount[0]++;&#10;                    checkIfAllProcessed(courseNames, totalEnrollments, processedCount[0]);&#10;                });&#10;    }&#10;&#10;    private void checkIfAllProcessed(List&lt;String&gt; courseNames, int totalEnrollments, int processedCount) {&#10;        android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Processed &quot; + processedCount + &quot;/&quot; + totalEnrollments + &quot; enrollments&quot;);&#10;&#10;        if (processedCount &gt;= totalEnrollments) {&#10;            // Tất cả enrollment đã được xử lý&#10;            if (enrolledCourses.isEmpty()) {&#10;                showNoCoursesMessage();&#10;            } else {&#10;                // Update spinner with courses&#10;                courseAdapter.clear();&#10;                courseAdapter.addAll(courseNames);&#10;                courseAdapter.notifyDataSetChanged();&#10;&#10;                android.util.Log.d(&quot;StudentFeedback&quot;, &quot;Updated spinner with &quot; + enrolledCourses.size() + &quot; courses&quot;);&#10;                Toast.makeText(this, &quot;Đã tải &quot; + enrolledCourses.size() + &quot; khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentInboxActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentInboxActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.Query;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class StudentInboxActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvInbox;&#10;    private LinearLayout layoutNoMessages;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;InboxMessage&gt; messageList;&#10;    private StudentInboxAdapter inboxAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_inbox);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        messageList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadCurrentStudentInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvInbox = findViewById(R.id.rv_inbox);&#10;        layoutNoMessages = findViewById(R.id.layout_no_messages);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Hộp thư&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        inboxAdapter = new StudentInboxAdapter(messageList, this::onMessageClick);&#10;        rvInbox.setLayoutManager(new LinearLayoutManager(this));&#10;        rvInbox.setAdapter(inboxAdapter);&#10;    }&#10;&#10;    private void loadCurrentStudentInfo() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#10;&#10;                        if (!&quot;student&quot;.equals(role)) {&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem hộp thư&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentStudentId != null) {&#10;                            loadInboxMessages();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadInboxMessages() {&#10;        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Loading inbox messages for student: &quot; + currentStudentId);&#10;&#10;        // Load notifications và feedback responses cho học viên&#10;        loadNotifications();&#10;        loadFeedbackResponses();&#10;    }&#10;&#10;    private void loadNotifications() {&#10;        db.collection(&quot;notifications&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .orderBy(&quot;createdAt&quot;, Query.Direction.DESCENDING)&#10;                .get()&#10;                .addOnSuccessListener(notificationsSnapshot -&gt; {&#10;                    android.util.Log.d(&quot;StudentInbox&quot;, &quot;Found &quot; + notificationsSnapshot.size() + &quot; notifications&quot;);&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot notifDoc : notificationsSnapshot) {&#10;                        InboxMessage message = new InboxMessage();&#10;                        message.setId(notifDoc.getId());&#10;                        message.setType(&quot;notification&quot;);&#10;                        message.setTitle(notifDoc.getString(&quot;title&quot;));&#10;                        message.setMessage(notifDoc.getString(&quot;message&quot;));&#10;                        message.setFromType(&quot;system&quot;);&#10;                        message.setFromName(&quot;Hệ thống&quot;);&#10;&#10;                        com.google.firebase.Timestamp timestamp = notifDoc.getTimestamp(&quot;createdAt&quot;);&#10;                        if (timestamp != null) {&#10;                            message.setCreatedAt(timestamp.toDate());&#10;                        }&#10;&#10;                        Boolean isRead = notifDoc.getBoolean(&quot;isRead&quot;);&#10;                        message.setRead(isRead != null ? isRead : false);&#10;&#10;                        // Additional data&#10;                        message.setCourseId(notifDoc.getString(&quot;courseId&quot;));&#10;                        message.setCourseName(notifDoc.getString(&quot;courseName&quot;));&#10;&#10;                        messageList.add(message);&#10;                    }&#10;&#10;                    updateUI();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error loading notifications&quot;, e);&#10;                    updateUI();&#10;                });&#10;    }&#10;&#10;    private void loadFeedbackResponses() {&#10;        // Load feedback responses từ giáo viên&#10;        db.collection(&quot;feedbacks&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;responded&quot;)&#10;                .orderBy(&quot;responseDate&quot;, Query.Direction.DESCENDING)&#10;                .get()&#10;                .addOnSuccessListener(feedbacksSnapshot -&gt; {&#10;                    android.util.Log.d(&quot;StudentInbox&quot;, &quot;Found &quot; + feedbacksSnapshot.size() + &quot; feedback responses&quot;);&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot feedbackDoc : feedbacksSnapshot) {&#10;                        String teacherResponse = feedbackDoc.getString(&quot;teacherResponse&quot;);&#10;&#10;                        InboxMessage message = new InboxMessage();&#10;                        message.setId(feedbackDoc.getId());&#10;                        message.setType(&quot;feedback_response&quot;);&#10;                        message.setTitle(&quot;Phản hồi từ giáo viên&quot;);&#10;                        message.setMessage(feedbackDoc.getString(&quot;teacherResponse&quot;));&#10;                        message.setFromType(&quot;teacher&quot;);&#10;                        message.setFromName(&quot;Giáo viên&quot;);&#10;                        com.google.firebase.Timestamp timestamp = feedbackDoc.getTimestamp(&quot;responseDate&quot;);&#10;                        if (timestamp != null) {&#10;                            message.setCreatedAt(timestamp.toDate());&#10;                        }&#10;                            // Check if already read by student&#10;                            Boolean readByStudent = feedbackDoc.getBoolean(&quot;readByStudent&quot;);&#10;                            message.setRead(readByStudent != null ? readByStudent : false);&#10;&#10;                            // Additional feedback data&#10;                        // Mặc định là chưa đọc feedback response&#10;                        message.setRead(false);&#10;&#10;                            messageList.add(message);&#10;&#10;                            android.util.Log.d(&quot;StudentInbox&quot;, &quot;Added feedback response: &quot; + message.getTitle());&#10;                        // Additional feedback data&#10;                        message.setCourseId(feedbackDoc.getString(&quot;courseId&quot;));&#10;                        message.setCourseName(feedbackDoc.getString(&quot;courseName&quot;));&#10;                        message.setOriginalFeedback(feedbackDoc.getString(&quot;message&quot;));&#10;                    messageList.sort((m1, m2) -&gt; {&#10;                        if (m1.getCreatedAt() == null &amp;&amp; m2.getCreatedAt() == null) return 0;&#10;                        messageList.add(message);&#10;&#10;                    updateUI();&#10;                    // Sắp xếp lại theo thời gian&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error loading feedback responses&quot;, e);&#10;&#10;                    // Thử load với cách khác nếu query trên thất bại&#10;                    loadFeedbackResponsesAlternative();&#10;                });&#10;    }&#10;&#10;    private void loadFeedbackResponsesAlternative() {&#10;        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Trying alternative method to load feedback responses&quot;);&#10;&#10;        // Thử load tất cả feedbacks của student và filter trong code&#10;        db.collection(&quot;feedbacks&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                    // Vẫn hiển thị notifications nếu có&#10;            rvInbox.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        rvInbox.setVisibility(View.GONE);&#10;        layoutNoMessages.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    private void onMessageClick(InboxMessage message) {&#10;        // Mở dialog hiển thị chi tiết message&#10;        StudentInboxDetailDialog dialog = new StudentInboxDetailDialog(this, message, new StudentInboxDetailDialog.OnMessageActionListener() {&#10;            @Override&#10;            public void onMarkAsRead(String messageId) {&#10;                markMessageAsRead(message);&#10;            }&#10;&#10;            @Override&#10;            public void onViewCourse(String courseId) {&#10;                // Navigate to course detail&#10;                if (courseId != null) {&#10;                    android.content.Intent intent = new android.content.Intent(StudentInboxActivity.this, StudentCourseDetailActivity.class);&#10;                    intent.putExtra(&quot;courseId&quot;, courseId);&#10;                    intent.putExtra(&quot;courseTitle&quot;, message.getCourseName());&#10;                    startActivity(intent);&#10;                }&#10;            }&#10;        });&#10;        dialog.show();&#10;&#10;        // Mark as read if not read yet&#10;        if (!message.isRead()) {&#10;            markMessageAsRead(message);&#10;        }&#10;    }&#10;&#10;    private void markMessageAsRead(InboxMessage message) {&#10;        if (message.getType().equals(&quot;notification&quot;)) {&#10;            // Mark notification as read&#10;            db.collection(&quot;notifications&quot;).document(message.getId())&#10;                    .update(&quot;isRead&quot;, true)&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        message.setRead(true);&#10;                        inboxAdapter.notifyDataSetChanged();&#10;                        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Marked notification as read: &quot; + message.getId());&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error marking notification as read&quot;, e);&#10;                    });&#10;        } else if (message.getType().equals(&quot;feedback_response&quot;)) {&#10;            // For feedback responses, we could add a &quot;readByStudent&quot; field&#10;            db.collection(&quot;feedbacks&quot;).document(message.getId())&#10;                    .update(&quot;readByStudent&quot;, true)&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        message.setRead(true);&#10;                        inboxAdapter.notifyDataSetChanged();&#10;                        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Marked feedback response as read: &quot; + message.getId());&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error marking feedback response as read&quot;, e);&#10;                    });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        if (currentStudentId != null) {&#10;            // Refresh messages when returning&#10;            messageList.clear();&#10;            loadInboxMessages();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import com.google.firebase.firestore.Query;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class StudentInboxActivity extends AppCompatActivity {&#13;&#10;&#13;&#10;    private Toolbar toolbar;&#13;&#10;    private RecyclerView rvInbox;&#13;&#10;    private LinearLayout layoutNoMessages;&#13;&#10;&#13;&#10;    private FirebaseAuth mAuth;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private List&lt;InboxMessage&gt; messageList;&#13;&#10;    private StudentInboxAdapter inboxAdapter;&#13;&#10;    private String currentStudentId;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_student_inbox);&#13;&#10;&#13;&#10;        mAuth = FirebaseAuth.getInstance();&#13;&#10;        db = FirebaseFirestore.getInstance();&#13;&#10;        messageList = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        initViews();&#13;&#10;        setupToolbar();&#13;&#10;        setupRecyclerView();&#13;&#10;        loadCurrentStudentInfo();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews() {&#13;&#10;        toolbar = findViewById(R.id.toolbar);&#13;&#10;        rvInbox = findViewById(R.id.rv_inbox);&#13;&#10;        layoutNoMessages = findViewById(R.id.layout_no_messages);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupToolbar() {&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setTitle(&quot;Hộp thư&quot;);&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupRecyclerView() {&#13;&#10;        inboxAdapter = new StudentInboxAdapter(messageList, this::onMessageClick);&#13;&#10;        rvInbox.setLayoutManager(new LinearLayoutManager(this));&#13;&#10;        rvInbox.setAdapter(inboxAdapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadCurrentStudentInfo() {&#13;&#10;        if (mAuth.getCurrentUser() == null) {&#13;&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            finish();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#13;&#10;&#13;&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#13;&#10;                    if (documentSnapshot.exists()) {&#13;&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#13;&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#13;&#10;&#13;&#10;                        if (!&quot;student&quot;.equals(role)) {&#13;&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem hộp thư&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                            finish();&#13;&#10;                            return;&#13;&#10;                        }&#13;&#10;&#13;&#10;                        if (currentStudentId != null) {&#13;&#10;                            loadInboxMessages();&#13;&#10;                        } else {&#13;&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                            finish();&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                        finish();&#13;&#10;                    }&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error loading user info&quot;, e);&#13;&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                    finish();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadInboxMessages() {&#13;&#10;        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Loading inbox messages for student: &quot; + currentStudentId);&#13;&#10;&#13;&#10;        // Load notifications và feedback responses cho học viên&#13;&#10;        loadNotifications();&#13;&#10;        loadFeedbackResponses();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadNotifications() {&#13;&#10;        db.collection(&quot;notifications&quot;)&#13;&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#13;&#10;                .orderBy(&quot;createdAt&quot;, Query.Direction.DESCENDING)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(notificationsSnapshot -&gt; {&#13;&#10;                    android.util.Log.d(&quot;StudentInbox&quot;, &quot;Found &quot; + notificationsSnapshot.size() + &quot; notifications&quot;);&#13;&#10;&#13;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot notifDoc : notificationsSnapshot) {&#13;&#10;                        InboxMessage message = new InboxMessage();&#13;&#10;                        message.setId(notifDoc.getId());&#13;&#10;                        message.setType(&quot;notification&quot;);&#13;&#10;                        message.setTitle(notifDoc.getString(&quot;title&quot;));&#13;&#10;                        message.setMessage(notifDoc.getString(&quot;message&quot;));&#13;&#10;                        message.setFromType(&quot;system&quot;);&#13;&#10;                        message.setFromName(&quot;Hệ thống&quot;);&#13;&#10;&#13;&#10;                        com.google.firebase.Timestamp timestamp = notifDoc.getTimestamp(&quot;createdAt&quot;);&#13;&#10;                        if (timestamp != null) {&#13;&#10;                            message.setCreatedAt(timestamp.toDate());&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Boolean isRead = notifDoc.getBoolean(&quot;isRead&quot;);&#13;&#10;                        message.setRead(isRead != null ? isRead : false);&#13;&#10;&#13;&#10;                        // Additional data&#13;&#10;                        message.setCourseId(notifDoc.getString(&quot;courseId&quot;));&#13;&#10;                        message.setCourseName(notifDoc.getString(&quot;courseName&quot;));&#13;&#10;&#13;&#10;                        messageList.add(message);&#13;&#10;                    }&#13;&#10;&#13;&#10;                    updateUI();&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error loading notifications&quot;, e);&#13;&#10;                    updateUI();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadFeedbackResponses() {&#13;&#10;        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Loading feedback responses for student: &quot; + currentStudentId);&#13;&#10;&#13;&#10;        // Load feedback responses từ giáo viên - bỏ orderBy để tránh composite index&#13;&#10;        db.collection(&quot;feedbacks&quot;)&#13;&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#13;&#10;                .whereEqualTo(&quot;status&quot;, &quot;responded&quot;)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(feedbacksSnapshot -&gt; {&#13;&#10;                    android.util.Log.d(&quot;StudentInbox&quot;, &quot;Found &quot; + feedbacksSnapshot.size() + &quot; feedback responses&quot;);&#13;&#10;&#13;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot feedbackDoc : feedbacksSnapshot) {&#13;&#10;                        String teacherResponse = feedbackDoc.getString(&quot;teacherResponse&quot;);&#13;&#10;&#13;&#10;                        // Chỉ thêm nếu có teacherResponse&#13;&#10;                        if (teacherResponse != null &amp;&amp; !teacherResponse.trim().isEmpty()) {&#13;&#10;                            InboxMessage message = new InboxMessage();&#13;&#10;                            message.setId(feedbackDoc.getId());&#13;&#10;                            message.setType(&quot;feedback_response&quot;);&#13;&#10;                            message.setTitle(&quot;Phản hồi từ giáo viên về khóa học: &quot; + feedbackDoc.getString(&quot;courseName&quot;));&#13;&#10;                            message.setMessage(teacherResponse);&#13;&#10;                            message.setFromType(&quot;teacher&quot;);&#13;&#10;                            message.setFromName(&quot;Giáo viên&quot;);&#13;&#10;&#13;&#10;                            com.google.firebase.Timestamp timestamp = feedbackDoc.getTimestamp(&quot;responseDate&quot;);&#13;&#10;                            if (timestamp != null) {&#13;&#10;                                message.setCreatedAt(timestamp.toDate());&#13;&#10;                            } else {&#13;&#10;                                // Fallback to current time if no responseDate&#13;&#10;                                message.setCreatedAt(new java.util.Date());&#13;&#10;                            }&#13;&#10;&#13;&#10;                            // Check if already read by student&#13;&#10;                            Boolean readByStudent = feedbackDoc.getBoolean(&quot;readByStudent&quot;);&#13;&#10;                            message.setRead(readByStudent != null ? readByStudent : false);&#13;&#10;&#13;&#10;                            // Additional feedback data&#13;&#10;                            message.setCourseId(feedbackDoc.getString(&quot;courseId&quot;));&#13;&#10;                            message.setCourseName(feedbackDoc.getString(&quot;courseName&quot;));&#13;&#10;                            message.setOriginalFeedback(feedbackDoc.getString(&quot;message&quot;));&#13;&#10;&#13;&#10;                            messageList.add(message);&#13;&#10;&#13;&#10;                            android.util.Log.d(&quot;StudentInbox&quot;, &quot;Added feedback response: &quot; + message.getTitle());&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Sắp xếp lại theo thời gian trong code&#13;&#10;                    messageList.sort((m1, m2) -&gt; {&#13;&#10;                        if (m1.getCreatedAt() == null &amp;&amp; m2.getCreatedAt() == null) return 0;&#13;&#10;                        if (m1.getCreatedAt() == null) return 1;&#13;&#10;                        if (m2.getCreatedAt() == null) return -1;&#13;&#10;                        return m2.getCreatedAt().compareTo(m1.getCreatedAt()); // Mới nhất trước&#13;&#10;                    });&#13;&#10;&#13;&#10;                    updateUI();&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error loading feedback responses&quot;, e);&#13;&#10;&#13;&#10;                    // Thử load với cách khác nếu query trên thất bại&#13;&#10;                    loadFeedbackResponsesAlternative();&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadFeedbackResponsesAlternative() {&#13;&#10;        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Trying alternative method to load feedback responses&quot;);&#13;&#10;&#13;&#10;        // Thử load tất cả feedbacks của student và filter trong code&#13;&#10;        db.collection(&quot;feedbacks&quot;)&#13;&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#13;&#10;                .get()&#13;&#10;                .addOnSuccessListener(feedbacksSnapshot -&gt; {&#13;&#10;                    android.util.Log.d(&quot;StudentInbox&quot;, &quot;Alternative method found &quot; + feedbacksSnapshot.size() + &quot; feedbacks&quot;);&#13;&#10;&#13;&#10;                    int responseCount = 0;&#13;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot feedbackDoc : feedbacksSnapshot) {&#13;&#10;                        String status = feedbackDoc.getString(&quot;status&quot;);&#13;&#10;                        String teacherResponse = feedbackDoc.getString(&quot;teacherResponse&quot;);&#13;&#10;&#13;&#10;                        // Filter trong code: có teacherResponse và status = &quot;responded&quot;&#13;&#10;                        if (&quot;responded&quot;.equals(status) &amp;&amp; teacherResponse != null &amp;&amp; !teacherResponse.trim().isEmpty()) {&#13;&#10;                            InboxMessage message = new InboxMessage();&#13;&#10;                            message.setId(feedbackDoc.getId());&#13;&#10;                            message.setType(&quot;feedback_response&quot;);&#13;&#10;                            message.setTitle(&quot;Phản hồi từ giáo viên về khóa học: &quot; + feedbackDoc.getString(&quot;courseName&quot;));&#13;&#10;                            message.setMessage(teacherResponse);&#13;&#10;                            message.setFromType(&quot;teacher&quot;);&#13;&#10;                            message.setFromName(&quot;Giáo viên&quot;);&#13;&#10;&#13;&#10;                            com.google.firebase.Timestamp timestamp = feedbackDoc.getTimestamp(&quot;responseDate&quot;);&#13;&#10;                            if (timestamp != null) {&#13;&#10;                                message.setCreatedAt(timestamp.toDate());&#13;&#10;                            } else {&#13;&#10;                                message.setCreatedAt(new java.util.Date());&#13;&#10;                            }&#13;&#10;&#13;&#10;                            Boolean readByStudent = feedbackDoc.getBoolean(&quot;readByStudent&quot;);&#13;&#10;                            message.setRead(readByStudent != null ? readByStudent : false);&#13;&#10;&#13;&#10;                            message.setCourseId(feedbackDoc.getString(&quot;courseId&quot;));&#13;&#10;                            message.setCourseName(feedbackDoc.getString(&quot;courseName&quot;));&#13;&#10;                            message.setOriginalFeedback(feedbackDoc.getString(&quot;message&quot;));&#13;&#10;&#13;&#10;                            messageList.add(message);&#13;&#10;                            responseCount++;&#13;&#10;&#13;&#10;                            android.util.Log.d(&quot;StudentInbox&quot;, &quot;Added feedback response (alt): &quot; + message.getTitle());&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    android.util.Log.d(&quot;StudentInbox&quot;, &quot;Total responses added: &quot; + responseCount);&#13;&#10;&#13;&#10;                    // Sắp xếp lại theo thời gian&#13;&#10;                    messageList.sort((m1, m2) -&gt; {&#13;&#10;                        if (m1.getCreatedAt() == null &amp;&amp; m2.getCreatedAt() == null) return 0;&#13;&#10;                        if (m1.getCreatedAt() == null) return 1;&#13;&#10;                        if (m2.getCreatedAt() == null) return -1;&#13;&#10;                        return m2.getCreatedAt().compareTo(m1.getCreatedAt());&#13;&#10;                    });&#13;&#10;&#13;&#10;                    updateUI();&#13;&#10;                })&#13;&#10;                .addOnFailureListener(e -&gt; {&#13;&#10;                    android.util.Log.e(&quot;StudentInbox&quot;, &quot;Alternative method also failed&quot;, e);&#13;&#10;                    updateUI(); // Vẫn hiển thị notifications nếu có&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateUI() {&#13;&#10;        if (messageList.isEmpty()) {&#13;&#10;            showEmptyState();&#13;&#10;        } else {&#13;&#10;            rvInbox.setVisibility(View.VISIBLE);&#13;&#10;            layoutNoMessages.setVisibility(View.GONE);&#13;&#10;            inboxAdapter.notifyDataSetChanged();&#13;&#10;&#13;&#10;            android.util.Log.d(&quot;StudentInbox&quot;, &quot;Displaying &quot; + messageList.size() + &quot; messages&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showEmptyState() {&#13;&#10;        rvInbox.setVisibility(View.GONE);&#13;&#10;        layoutNoMessages.setVisibility(View.VISIBLE);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void onMessageClick(InboxMessage message) {&#13;&#10;        // Hiển thị dialog chi tiết tin nhắn&#13;&#10;        StudentInboxDetailDialog dialog = new StudentInboxDetailDialog(this, message, new StudentInboxDetailDialog.OnMessageActionListener() {&#13;&#10;            @Override&#13;&#10;            public void onMarkAsRead(String messageId) {&#13;&#10;                markMessageAsRead(messageId, message.getType());&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onViewCourse(String courseId) {&#13;&#10;                android.util.Log.d(&quot;StudentInbox&quot;, &quot;onViewCourse called with courseId: &quot; + courseId);&#13;&#10;                &#13;&#10;                if (courseId == null || courseId.trim().isEmpty()) {&#13;&#10;                    Toast.makeText(StudentInboxActivity.this, &quot;Không có thông tin khóa học&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    return;&#13;&#10;                }&#13;&#10;&#13;&#10;                // Chuyển đến StudentCourseDetailActivity với đúng tên extra parameters&#13;&#10;                android.content.Intent intent = new android.content.Intent(StudentInboxActivity.this, StudentCourseDetailActivity.class);&#13;&#10;                intent.putExtra(&quot;course_id&quot;, courseId);&#13;&#10;                intent.putExtra(&quot;course_title&quot;, message.getCourseName() != null ? message.getCourseName() : &quot;Chi tiết khóa học&quot;);&#13;&#10;                &#13;&#10;                android.util.Log.d(&quot;StudentInbox&quot;, &quot;Starting StudentCourseDetailActivity with courseId: &quot; + courseId + &quot;, courseName: &quot; + message.getCourseName());&#13;&#10;                &#13;&#10;                startActivity(intent);&#13;&#10;            }&#13;&#10;        });&#13;&#10;        &#13;&#10;        dialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void markMessageAsRead(String messageId, String messageType) {&#13;&#10;        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Marking message as read: &quot; + messageId + &quot; (type: &quot; + messageType + &quot;)&quot;);&#13;&#10;&#13;&#10;        if (&quot;notification&quot;.equals(messageType)) {&#13;&#10;            // Mark notification as read&#13;&#10;            db.collection(&quot;notifications&quot;).document(messageId)&#13;&#10;                    .update(&quot;isRead&quot;, true)&#13;&#10;                    .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Notification marked as read&quot;);&#13;&#10;                        // Update local data&#13;&#10;                        for (InboxMessage msg : messageList) {&#13;&#10;                            if (msg.getId().equals(messageId)) {&#13;&#10;                                msg.setRead(true);&#13;&#10;                                break;&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                        inboxAdapter.notifyDataSetChanged();&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error marking notification as read&quot;, e);&#13;&#10;                        Toast.makeText(this, &quot;Lỗi đánh dấu đã đọc&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    });&#13;&#10;        } else if (&quot;feedback_response&quot;.equals(messageType)) {&#13;&#10;            // Mark feedback response as read by student&#13;&#10;            db.collection(&quot;feedbacks&quot;).document(messageId)&#13;&#10;                    .update(&quot;readByStudent&quot;, true)&#13;&#10;                    .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                        android.util.Log.d(&quot;StudentInbox&quot;, &quot;Feedback response marked as read&quot;);&#13;&#10;                        // Update local data&#13;&#10;                        for (InboxMessage msg : messageList) {&#13;&#10;                            if (msg.getId().equals(messageId)) {&#13;&#10;                                msg.setRead(true);&#13;&#10;                                break;&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                        inboxAdapter.notifyDataSetChanged();&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        android.util.Log.e(&quot;StudentInbox&quot;, &quot;Error marking feedback response as read&quot;, e);&#13;&#10;                        Toast.makeText(this, &quot;Lỗi đánh dấu đã đọc&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                    });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            onBackPressed();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onResume() {&#13;&#10;        super.onResume();&#13;&#10;        // Reload messages when returning to this activity&#13;&#10;        if (currentStudentId != null) {&#13;&#10;            messageList.clear();&#13;&#10;            loadInboxMessages();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentInboxAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentInboxAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class StudentInboxAdapter extends RecyclerView.Adapter&lt;StudentInboxAdapter.InboxViewHolder&gt; {&#10;&#10;    private List&lt;InboxMessage&gt; messageList;&#10;    private OnMessageClickListener listener;&#10;&#10;    public interface OnMessageClickListener {&#10;        void onMessageClick(InboxMessage message);&#10;    }&#10;&#10;    public StudentInboxAdapter(List&lt;InboxMessage&gt; messageList, OnMessageClickListener listener) {&#10;        this.messageList = messageList;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public InboxViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_inbox_message, parent, false);&#10;        return new InboxViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull InboxViewHolder holder, int position) {&#10;        InboxMessage message = messageList.get(position);&#10;        holder.bind(message);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return messageList.size();&#10;    }&#10;&#10;    public class InboxViewHolder extends RecyclerView.ViewHolder {&#10;        private CardView cardMessage;&#10;        private TextView tvMessageType;&#10;        private TextView tvTitle;&#10;        private TextView tvPreview;&#10;        private TextView tvFromName;&#10;        private TextView tvDate;&#10;        private TextView tvCourseName;&#10;        private View viewUnreadIndicator;&#10;&#10;        public InboxViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardMessage = itemView.findViewById(R.id.card_message);&#10;            tvMessageType = itemView.findViewById(R.id.tv_message_type);&#10;            tvTitle = itemView.findViewById(R.id.tv_title);&#10;            tvPreview = itemView.findViewById(R.id.tv_preview);&#10;            tvFromName = itemView.findViewById(R.id.tv_from_name);&#10;            tvDate = itemView.findViewById(R.id.tv_date);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            viewUnreadIndicator = itemView.findViewById(R.id.view_unread_indicator);&#10;&#10;            cardMessage.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onMessageClick(messageList.get(getAdapterPosition()));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(InboxMessage message) {&#10;            // Set message type&#10;            tvMessageType.setText(message.getTypeDisplayName());&#10;            &#10;            // Set type color&#10;            switch (message.getType()) {&#10;                case &quot;notification&quot;:&#10;                    tvMessageType.setBackgroundColor(itemView.getContext().getResources().getColor(android.R.color.holo_blue_light));&#10;                    break;&#10;                case &quot;feedback_response&quot;:&#10;                    tvMessageType.setBackgroundColor(itemView.getContext().getResources().getColor(android.R.color.holo_green_light));&#10;                    break;&#10;                default:&#10;                    tvMessageType.setBackgroundColor(itemView.getContext().getResources().getColor(android.R.color.darker_gray));&#10;                    break;&#10;            }&#10;&#10;            // Set title&#10;            tvTitle.setText(message.getTitle());&#10;&#10;            // Set preview (first 100 characters of message)&#10;            String preview = message.getMessage();&#10;            if (preview != null &amp;&amp; preview.length() &gt; 100) {&#10;                preview = preview.substring(0, 100) + &quot;...&quot;;&#10;            }&#10;            tvPreview.setText(preview);&#10;&#10;            // Set from name&#10;            tvFromName.setText(&quot;Từ: &quot; + message.getFromName());&#10;&#10;            // Set date&#10;            tvDate.setText(message.getFormattedDate());&#10;&#10;            // Set course name if available&#10;            if (message.getCourseName() != null &amp;&amp; !message.getCourseName().isEmpty()) {&#10;                tvCourseName.setVisibility(View.VISIBLE);&#10;                tvCourseName.setText(&quot;Khóa học: &quot; + message.getCourseName());&#10;            } else {&#10;                tvCourseName.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Set read/unread indicator&#10;            if (message.isRead()) {&#10;                viewUnreadIndicator.setVisibility(View.GONE);&#10;                cardMessage.setAlpha(0.8f);&#10;                tvTitle.setTextColor(itemView.getContext().getResources().getColor(android.R.color.darker_gray));&#10;            } else {&#10;                viewUnreadIndicator.setVisibility(View.VISIBLE);&#10;                cardMessage.setAlpha(1.0f);&#10;                tvTitle.setTextColor(itemView.getContext().getResources().getColor(android.R.color.black));&#10;                tvTitle.setTypeface(null, android.graphics.Typeface.BOLD);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentInboxDetailDialog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentInboxDetailDialog.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.app.Dialog;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;&#10;public class StudentInboxDetailDialog extends Dialog {&#10;&#10;    private InboxMessage message;&#10;    private OnMessageActionListener listener;&#10;&#10;    public interface OnMessageActionListener {&#10;        void onMarkAsRead(String messageId);&#10;        void onViewCourse(String courseId);&#10;    }&#10;&#10;    public StudentInboxDetailDialog(@NonNull Context context, InboxMessage message, OnMessageActionListener listener) {&#10;        super(context);&#10;        this.message = message;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.dialog_inbox_message_detail);&#10;&#10;        initViews();&#10;        setupData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        // Views are initialized in setupData()&#10;    }&#10;&#10;    private void setupData() {&#10;        TextView tvMessageType = findViewById(R.id.tv_message_type);&#10;        TextView tvTitle = findViewById(R.id.tv_title);&#10;        TextView tvFullMessage = findViewById(R.id.tv_full_message);&#10;        TextView tvFromName = findViewById(R.id.tv_from_name);&#10;        TextView tvDate = findViewById(R.id.tv_date);&#10;        TextView tvCourseName = findViewById(R.id.tv_course_name);&#10;        TextView tvOriginalFeedback = findViewById(R.id.tv_original_feedback);&#10;        View layoutOriginalFeedback = findViewById(R.id.layout_original_feedback);&#10;&#10;        // Set message type&#10;        tvMessageType.setText(message.getTypeDisplayName());&#10;        &#10;        // Set type color&#10;        switch (message.getType()) {&#10;            case &quot;notification&quot;:&#10;                tvMessageType.setBackgroundColor(getContext().getResources().getColor(android.R.color.holo_blue_light));&#10;                break;&#10;            case &quot;feedback_response&quot;:&#10;                tvMessageType.setBackgroundColor(getContext().getResources().getColor(android.R.color.holo_green_light));&#10;                break;&#10;        }&#10;&#10;        // Set title&#10;        tvTitle.setText(message.getTitle());&#10;&#10;        // Set full message&#10;        tvFullMessage.setText(message.getMessage());&#10;&#10;        // Set from name&#10;        tvFromName.setText(&quot;Từ: &quot; + message.getFromName());&#10;&#10;        // Set date&#10;        tvDate.setText(message.getFormattedDate());&#10;&#10;        // Set course name if available&#10;        if (message.getCourseName() != null &amp;&amp; !message.getCourseName().isEmpty()) {&#10;            tvCourseName.setVisibility(View.VISIBLE);&#10;            tvCourseName.setText(&quot;Khóa học: &quot; + message.getCourseName());&#10;        } else {&#10;            tvCourseName.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Show original feedback if this is a feedback response&#10;        if (&quot;feedback_response&quot;.equals(message.getType()) &amp;&amp; &#10;            message.getOriginalFeedback() != null &amp;&amp; !message.getOriginalFeedback().isEmpty()) {&#10;            layoutOriginalFeedback.setVisibility(View.VISIBLE);&#10;            tvOriginalFeedback.setText(message.getOriginalFeedback());&#10;        } else {&#10;            layoutOriginalFeedback.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        Button btnClose = findViewById(R.id.btn_close);&#10;        Button btnViewCourse = findViewById(R.id.btn_view_course);&#10;        Button btnMarkAsRead = findViewById(R.id.btn_mark_as_read);&#10;&#10;        btnClose.setOnClickListener(v -&gt; dismiss());&#10;&#10;        btnViewCourse.setOnClickListener(v -&gt; {&#10;            if (listener != null &amp;&amp; message.getCourseId() != null) {&#10;                listener.onViewCourse(message.getCourseId());&#10;            }&#10;            dismiss();&#10;        });&#10;&#10;        btnMarkAsRead.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onMarkAsRead(message.getId());&#10;            }&#10;            dismiss();&#10;        });&#10;&#10;        // Show/hide buttons based on message type and state&#10;        if (message.getCourseId() != null &amp;&amp; !message.getCourseId().isEmpty()) {&#10;            btnViewCourse.setVisibility(View.VISIBLE);&#10;        } else {&#10;            btnViewCourse.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (message.isRead()) {&#10;            btnMarkAsRead.setVisibility(View.GONE);&#10;        } else {&#10;            btnMarkAsRead.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentLessonAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentLessonAdapter.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentLessonAdapter extends RecyclerView.Adapter&lt;StudentLessonAdapter.StudentLessonViewHolder&gt; {&#10;&#10;    private List&lt;Lesson&gt; lessonList;&#10;    private OnLessonClickListener listener;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth auth;&#10;    private String courseId;&#10;    private String courseTitle;&#10;&#10;    public interface OnLessonClickListener {&#10;        void onLessonClick(Lesson lesson);&#10;        void onFavoriteChanged(Lesson lesson, boolean isFavorite);&#10;    }&#10;&#10;    public StudentLessonAdapter(List&lt;Lesson&gt; lessonList, OnLessonClickListener listener, String courseId, String courseTitle) {&#10;        this.lessonList = lessonList;&#10;        this.listener = listener;&#10;        this.courseId = courseId;&#10;        this.courseTitle = courseTitle;&#10;        this.db = FirebaseFirestore.getInstance();&#10;        this.auth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public StudentLessonViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_student_lesson, parent, false);&#10;        return new StudentLessonViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull StudentLessonViewHolder holder, int position) {&#10;        Lesson lesson = lessonList.get(position);&#10;        holder.bind(lesson);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return lessonList.size();&#10;    }&#10;&#10;    public class StudentLessonViewHolder extends RecyclerView.ViewHolder {&#10;        private CardView cardLesson;&#10;        private TextView tvLessonOrder;&#10;        private TextView tvLessonTitle;&#10;        private TextView tvLessonType;&#10;        private TextView tvEstimatedTime;&#10;        private TextView tvGrammarPreview;&#10;        private ImageView ivPlayIcon;&#10;        private ImageButton btnFavorite;&#10;        private TextView tvFavoriteStatus;&#10;&#10;        public StudentLessonViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardLesson = itemView.findViewById(R.id.card_lesson);&#10;            tvLessonOrder = itemView.findViewById(R.id.tv_lesson_order);&#10;            tvLessonTitle = itemView.findViewById(R.id.tv_lesson_title);&#10;            tvLessonType = itemView.findViewById(R.id.tv_lesson_type);&#10;            tvEstimatedTime = itemView.findViewById(R.id.tv_estimated_time);&#10;            tvGrammarPreview = itemView.findViewById(R.id.tv_grammar_preview);&#10;            ivPlayIcon = itemView.findViewById(R.id.iv_play_icon);&#10;            btnFavorite = itemView.findViewById(R.id.btn_favorite);&#10;            tvFavoriteStatus = itemView.findViewById(R.id.tv_favorite_status);&#10;        }&#10;&#10;        public void bind(Lesson lesson) {&#10;            // Set basic lesson info&#10;            tvLessonOrder.setText(&quot;Bài &quot; + lesson.getOrder());&#10;            tvLessonTitle.setText(lesson.getTitle());&#10;            tvLessonType.setText(lesson.getType());&#10;            tvEstimatedTime.setText(&quot;⏱ &quot; + lesson.getEstimatedTime());&#10;&#10;            // Show grammar preview if lesson type is grammar&#10;            if (&quot;Grammar&quot;.equals(lesson.getType()) &amp;&amp; lesson.getGrammarStructure() != null) {&#10;                tvGrammarPreview.setText(&quot; &quot; + lesson.getGrammarStructure());&#10;                tvGrammarPreview.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvGrammarPreview.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Show play icon for video/audio lessons&#10;            if (&quot;Video&quot;.equals(lesson.getType()) || &quot;Audio&quot;.equals(lesson.getType())) {&#10;                ivPlayIcon.setVisibility(View.VISIBLE);&#10;            } else {&#10;                ivPlayIcon.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Load favorite status&#10;            loadFavoriteStatus(lesson);&#10;&#10;            // Set click listeners&#10;            cardLesson.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onLessonClick(lesson);&#10;                }&#10;            });&#10;&#10;            btnFavorite.setOnClickListener(v -&gt; {&#10;                toggleFavorite(lesson);&#10;            });&#10;        }&#10;&#10;        private void loadFavoriteStatus(Lesson lesson) {&#10;            if (auth.getCurrentUser() == null) return;&#10;&#10;            // Get student ID&#10;            db.collection(&quot;users&quot;).document(auth.getCurrentUser().getUid())&#10;                    .get()&#10;                    .addOnSuccessListener(documentSnapshot -&gt; {&#10;                        if (documentSnapshot.exists()) {&#10;                            String studentId = documentSnapshot.getString(&quot;id&quot;);&#10;                            if (studentId != null) {&#10;                                checkIfFavorite(lesson, studentId);&#10;                            }&#10;                        }&#10;                    });&#10;        }&#10;&#10;        private void checkIfFavorite(Lesson lesson, String studentId) {&#10;            db.collection(&quot;favoriteItems&quot;)&#10;                    .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                    .whereEqualTo(&quot;lessonId&quot;, lesson.getId())&#10;                    .get()&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                        boolean isFavorite = !queryDocumentSnapshots.isEmpty();&#10;                        updateFavoriteUI(isFavorite);&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error checking favorite status&quot;, e);&#10;                    });&#10;        }&#10;&#10;        private void updateFavoriteUI(boolean isFavorite) {&#10;            if (isFavorite) {&#10;                btnFavorite.setImageResource(android.R.drawable.btn_star_big_on);&#10;                tvFavoriteStatus.setText(&quot;Đã thích&quot;);&#10;                tvFavoriteStatus.setTextColor(itemView.getContext().getColor(android.R.color.holo_orange_dark));&#10;            } else {&#10;                btnFavorite.setImageResource(android.R.drawable.btn_star_big_off);&#10;                tvFavoriteStatus.setText(&quot;Yêu thích&quot;);&#10;                tvFavoriteStatus.setTextColor(itemView.getContext().getColor(android.R.color.darker_gray));&#10;            }&#10;        }&#10;&#10;        private void toggleFavorite(Lesson lesson) {&#10;            if (auth.getCurrentUser() == null) {&#10;                Toast.makeText(itemView.getContext(), &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;                return;&#10;            }&#10;&#10;            // Get student ID first&#10;            db.collection(&quot;users&quot;).document(auth.getCurrentUser().getUid())&#10;                    .get()&#10;                    .addOnSuccessListener(documentSnapshot -&gt; {&#10;                        if (documentSnapshot.exists()) {&#10;                            String studentId = documentSnapshot.getString(&quot;id&quot;);&#10;                            if (studentId != null) {&#10;                                handleFavoriteToggle(lesson, studentId);&#10;                            }&#10;                        }&#10;                    });&#10;        }&#10;&#10;        private void handleFavoriteToggle(Lesson lesson, String studentId) {&#10;            // Check current status&#10;            db.collection(&quot;favoriteItems&quot;)&#10;                    .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                    .whereEqualTo(&quot;lessonId&quot;, lesson.getId())&#10;                    .get()&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                        if (queryDocumentSnapshots.isEmpty()) {&#10;                            // Not favorite yet, add to favorites&#10;                            addToFavorites(lesson, studentId);&#10;                        } else {&#10;                            // Already favorite, remove from favorites&#10;                            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                                removeFromFavorites(doc.getId(), lesson);&#10;                            }&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error toggling favorite&quot;, e);&#10;                        Toast.makeText(itemView.getContext(), &quot;Lỗi khi thay đổi trạng thái yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;&#10;        private void addToFavorites(Lesson lesson, String studentId) {&#10;            Map&lt;String, Object&gt; favoriteData = new HashMap&lt;&gt;();&#10;            favoriteData.put(&quot;studentId&quot;, studentId);&#10;            favoriteData.put(&quot;lessonId&quot;, lesson.getId());&#10;            favoriteData.put(&quot;lessonTitle&quot;, lesson.getTitle());&#10;            favoriteData.put(&quot;courseId&quot;, courseId);&#10;            favoriteData.put(&quot;courseTitle&quot;, courseTitle);&#10;            favoriteData.put(&quot;lessonType&quot;, lesson.getType());&#10;            favoriteData.put(&quot;estimatedTime&quot;, lesson.getEstimatedTime());&#10;            favoriteData.put(&quot;favoriteDate&quot;, com.google.firebase.Timestamp.now());&#10;&#10;            db.collection(&quot;favoriteItems&quot;)&#10;                    .add(favoriteData)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        updateFavoriteUI(true);&#10;                        Toast.makeText(itemView.getContext(), &quot;Đã thêm vào yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                        if (listener != null) {&#10;                            listener.onFavoriteChanged(lesson, true);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;StudentLessonAdapter&quot;, &quot;Lesson added to favorites: &quot; + lesson.getTitle());&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error adding to favorites&quot;, e);&#10;                        Toast.makeText(itemView.getContext(), &quot;Lỗi khi thêm vào yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;&#10;        private void removeFromFavorites(String favoriteId, Lesson lesson) {&#10;            db.collection(&quot;favoriteItems&quot;).document(favoriteId)&#10;                    .delete()&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        updateFavoriteUI(false);&#10;                        Toast.makeText(itemView.getContext(), &quot;Đã xóa khỏi yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                        if (listener != null) {&#10;                            listener.onFavoriteChanged(lesson, false);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;StudentLessonAdapter&quot;, &quot;Lesson removed from favorites: &quot; + lesson.getTitle());&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error removing from favorites&quot;, e);&#10;                        Toast.makeText(itemView.getContext(), &quot;Lỗi khi xóa khỏi yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;                    });&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#13;&#10;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.ImageButton;&#13;&#10;import android.widget.ImageView;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.cardview.widget.CardView;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#13;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class StudentLessonAdapter extends RecyclerView.Adapter&lt;StudentLessonAdapter.StudentLessonViewHolder&gt; {&#13;&#10;&#13;&#10;    private List&lt;Lesson&gt; lessonList;&#13;&#10;    private OnLessonClickListener listener;&#13;&#10;    private FirebaseFirestore db;&#13;&#10;    private FirebaseAuth auth;&#13;&#10;    private String courseId;&#13;&#10;    private String courseTitle;&#13;&#10;&#13;&#10;    public interface OnLessonClickListener {&#13;&#10;        void onLessonClick(Lesson lesson);&#13;&#10;        void onFavoriteChanged(Lesson lesson, boolean isFavorite);&#13;&#10;        void onLessonCompleted(Lesson lesson); // Thêm callback cho việc hoàn thành bài học&#13;&#10;    }&#13;&#10;&#13;&#10;    public StudentLessonAdapter(List&lt;Lesson&gt; lessonList, OnLessonClickListener listener, String courseId, String courseTitle) {&#13;&#10;        this.lessonList = lessonList;&#13;&#10;        this.listener = listener;&#13;&#10;        this.courseId = courseId;&#13;&#10;        this.courseTitle = courseTitle;&#13;&#10;        this.db = FirebaseFirestore.getInstance();&#13;&#10;        this.auth = FirebaseAuth.getInstance();&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public StudentLessonViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(parent.getContext())&#13;&#10;                .inflate(R.layout.item_student_lesson, parent, false);&#13;&#10;        return new StudentLessonViewHolder(view);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull StudentLessonViewHolder holder, int position) {&#13;&#10;        Lesson lesson = lessonList.get(position);&#13;&#10;        holder.bind(lesson);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return lessonList.size();&#13;&#10;    }&#13;&#10;&#13;&#10;    public class StudentLessonViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        private CardView cardLesson;&#13;&#10;        private TextView tvLessonOrder;&#13;&#10;        private TextView tvLessonTitle;&#13;&#10;        private TextView tvLessonType;&#13;&#10;        private TextView tvEstimatedTime;&#13;&#10;        private TextView tvGrammarPreview;&#13;&#10;        private TextView tvCompletionStatus;&#13;&#10;        private ImageView ivPlayIcon;&#13;&#10;        private ImageView ivCompletionStatus;&#13;&#10;        private ImageButton btnFavorite;&#13;&#10;        private com.google.android.material.button.MaterialButton btnMarkComplete;&#13;&#10;&#13;&#10;        public StudentLessonViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            cardLesson = itemView.findViewById(R.id.card_lesson);&#13;&#10;            tvLessonOrder = itemView.findViewById(R.id.tv_lesson_order);&#13;&#10;            tvLessonTitle = itemView.findViewById(R.id.tv_lesson_title);&#13;&#10;            tvLessonType = itemView.findViewById(R.id.tv_lesson_type);&#13;&#10;            tvEstimatedTime = itemView.findViewById(R.id.tv_estimated_time);&#13;&#10;            tvGrammarPreview = itemView.findViewById(R.id.tv_grammar_preview);&#13;&#10;            tvCompletionStatus = itemView.findViewById(R.id.tv_completion_status);&#13;&#10;            ivPlayIcon = itemView.findViewById(R.id.iv_play_icon);&#13;&#10;            ivCompletionStatus = itemView.findViewById(R.id.iv_completion_status);&#13;&#10;            btnFavorite = itemView.findViewById(R.id.btn_favorite);&#13;&#10;            btnMarkComplete = itemView.findViewById(R.id.btn_mark_complete);&#13;&#10;&#13;&#10;            // Set up click listeners&#13;&#10;            cardLesson.setOnClickListener(v -&gt; {&#13;&#10;                if (listener != null) {&#13;&#10;                    listener.onLessonClick(lessonList.get(getAdapterPosition()));&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;            btnMarkComplete.setOnClickListener(v -&gt; {&#13;&#10;                Lesson lesson = lessonList.get(getAdapterPosition());&#13;&#10;                markLessonAsCompleted(lesson);&#13;&#10;            });&#13;&#10;&#13;&#10;            btnFavorite.setOnClickListener(v -&gt; {&#13;&#10;                // Handle favorite functionality if needed&#13;&#10;                Lesson lesson = lessonList.get(getAdapterPosition());&#13;&#10;                if (listener != null) {&#13;&#10;                    listener.onFavoriteChanged(lesson, true);&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;&#13;&#10;        public void bind(Lesson lesson) {&#13;&#10;            // Set basic lesson info&#13;&#10;            tvLessonOrder.setText(&quot;Bài &quot; + lesson.getOrder());&#13;&#10;            tvLessonTitle.setText(lesson.getTitle());&#13;&#10;            tvLessonType.setText(lesson.getTypeDisplayName());&#13;&#10;            tvEstimatedTime.setText(lesson.getEstimatedTimeString());&#13;&#10;&#13;&#10;            // Show grammar preview if lesson type is grammar&#13;&#10;            if (&quot;Grammar&quot;.equalsIgnoreCase(lesson.getCategory()) &amp;&amp; lesson.getGrammarStructure() != null) {&#13;&#10;                tvGrammarPreview.setText(&quot; &quot; + lesson.getGrammarStructure());&#13;&#10;                tvGrammarPreview.setVisibility(View.VISIBLE);&#13;&#10;            } else {&#13;&#10;                tvGrammarPreview.setVisibility(View.GONE);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Set completion status&#13;&#10;            updateCompletionStatus(lesson);&#13;&#10;&#13;&#10;            // Show play icon for video/audio lessons&#13;&#10;            if (&quot;video&quot;.equalsIgnoreCase(lesson.getType()) || &quot;audio&quot;.equalsIgnoreCase(lesson.getType())) {&#13;&#10;                ivPlayIcon.setVisibility(View.VISIBLE);&#13;&#10;            } else {&#13;&#10;                ivPlayIcon.setVisibility(View.GONE);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Load completion status from Firebase&#13;&#10;            loadLessonProgress(lesson);&#13;&#10;        }&#13;&#10;&#13;&#10;        private void updateCompletionStatus(Lesson lesson) {&#13;&#10;            if (lesson.isCompleted()) {&#13;&#10;                // Lesson is completed&#13;&#10;                tvCompletionStatus.setText(&quot;✅ Đã hoàn thành&quot;);&#13;&#10;                tvCompletionStatus.setTextColor(itemView.getContext().getResources().getColor(android.R.color.holo_green_dark));&#13;&#10;                ivCompletionStatus.setImageResource(android.R.drawable.ic_menu_my_calendar);&#13;&#10;                btnMarkComplete.setText(&quot;Đã hoàn thành&quot;);&#13;&#10;                btnMarkComplete.setEnabled(false);&#13;&#10;                btnMarkComplete.setTextColor(itemView.getContext().getResources().getColor(android.R.color.darker_gray));&#13;&#10;            } else {&#13;&#10;                // Lesson is not completed&#13;&#10;                tvCompletionStatus.setText(&quot;Chưa hoàn thành&quot;);&#13;&#10;                tvCompletionStatus.setTextColor(itemView.getContext().getResources().getColor(android.R.color.holo_orange_dark));&#13;&#10;                ivCompletionStatus.setImageResource(android.R.drawable.ic_menu_agenda);&#13;&#10;                btnMarkComplete.setText(&quot;Hoàn thành&quot;);&#13;&#10;                btnMarkComplete.setEnabled(true);&#13;&#10;                btnMarkComplete.setTextColor(itemView.getContext().getResources().getColor(android.R.color.holo_blue_bright));&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        private void loadLessonProgress(Lesson lesson) {&#13;&#10;            if (auth.getCurrentUser() == null) return;&#13;&#10;&#13;&#10;            String studentId = auth.getCurrentUser().getUid();&#13;&#10;&#13;&#10;            db.collection(&quot;lesson_progress&quot;)&#13;&#10;                    .whereEqualTo(&quot;studentId&quot;, studentId)&#13;&#10;                    .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                    .whereEqualTo(&quot;lessonId&quot;, lesson.getId())&#13;&#10;                    .get()&#13;&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                        if (!queryDocumentSnapshots.isEmpty()) {&#13;&#10;                            // Progress record exists, check if completed&#13;&#10;                            for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#13;&#10;                                Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#13;&#10;                                if (isCompleted != null &amp;&amp; isCompleted) {&#13;&#10;                                    lesson.setCompleted(true);&#13;&#10;                                    updateCompletionStatus(lesson);&#13;&#10;                                    break;&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error loading lesson progress&quot;, e);&#13;&#10;                    });&#13;&#10;        }&#13;&#10;&#13;&#10;        private void markLessonAsCompleted(Lesson lesson) {&#13;&#10;            if (auth.getCurrentUser() == null) {&#13;&#10;                Toast.makeText(itemView.getContext(), &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            if (lesson.isCompleted()) {&#13;&#10;                Toast.makeText(itemView.getContext(), &quot;Bài học đã được hoàn thành&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            String studentId = auth.getCurrentUser().getUid();&#13;&#10;&#13;&#10;            // Disable button while processing&#13;&#10;            btnMarkComplete.setEnabled(false);&#13;&#10;            btnMarkComplete.setText(&quot;Đang lưu...&quot;);&#13;&#10;&#13;&#10;            // Check if progress record already exists&#13;&#10;            db.collection(&quot;lesson_progress&quot;)&#13;&#10;                    .whereEqualTo(&quot;studentId&quot;, studentId)&#13;&#10;                    .whereEqualTo(&quot;courseId&quot;, courseId)&#13;&#10;                    .whereEqualTo(&quot;lessonId&quot;, lesson.getId())&#13;&#10;                    .get()&#13;&#10;                    .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#13;&#10;                        if (queryDocumentSnapshots.isEmpty()) {&#13;&#10;                            // Create new progress record&#13;&#10;                            createLessonProgress(lesson, studentId);&#13;&#10;                        } else {&#13;&#10;                            // Update existing progress record&#13;&#10;                            String progressId = queryDocumentSnapshots.getDocuments().get(0).getId();&#13;&#10;                            updateLessonProgress(lesson, progressId);&#13;&#10;                        }&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error checking lesson progress&quot;, e);&#13;&#10;                        btnMarkComplete.setEnabled(true);&#13;&#10;                        btnMarkComplete.setText(&quot;Hoàn thành&quot;);&#13;&#10;                        Toast.makeText(itemView.getContext(), &quot;Lỗi kiểm tra tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                    });&#13;&#10;        }&#13;&#10;&#13;&#10;        private void createLessonProgress(Lesson lesson, String studentId) {&#13;&#10;            Map&lt;String, Object&gt; progressData = new HashMap&lt;&gt;();&#13;&#10;            progressData.put(&quot;studentId&quot;, studentId);&#13;&#10;            progressData.put(&quot;courseId&quot;, courseId);&#13;&#10;            progressData.put(&quot;lessonId&quot;, lesson.getId());&#13;&#10;            progressData.put(&quot;isCompleted&quot;, true);&#13;&#10;            progressData.put(&quot;completedAt&quot;, new Date());&#13;&#10;            progressData.put(&quot;createdAt&quot;, new Date());&#13;&#10;            progressData.put(&quot;updatedAt&quot;, new Date());&#13;&#10;&#13;&#10;            db.collection(&quot;lesson_progress&quot;)&#13;&#10;                    .add(progressData)&#13;&#10;                    .addOnSuccessListener(documentReference -&gt; {&#13;&#10;                        lesson.setCompleted(true);&#13;&#10;                        updateCompletionStatus(lesson);&#13;&#10;                        &#13;&#10;                        Toast.makeText(itemView.getContext(), &quot;Đã đánh dấu hoàn thành bài học: &quot; + lesson.getTitle(), Toast.LENGTH_SHORT).show();&#13;&#10;                        android.util.Log.d(&quot;StudentLessonAdapter&quot;, &quot;Lesson progress created successfully&quot;);&#13;&#10;&#13;&#10;                        // Notify listener if available&#13;&#10;                        if (listener != null) {&#13;&#10;                            listener.onLessonCompleted(lesson);&#13;&#10;                        }&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error creating lesson progress&quot;, e);&#13;&#10;                        btnMarkComplete.setEnabled(true);&#13;&#10;                        btnMarkComplete.setText(&quot;Hoàn thành&quot;);&#13;&#10;                        Toast.makeText(itemView.getContext(), &quot;Lỗi lưu tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                    });&#13;&#10;        }&#13;&#10;&#13;&#10;        private void updateLessonProgress(Lesson lesson, String progressId) {&#13;&#10;            Map&lt;String, Object&gt; updateData = new HashMap&lt;&gt;();&#13;&#10;            updateData.put(&quot;isCompleted&quot;, true);&#13;&#10;            updateData.put(&quot;completedAt&quot;, new Date());&#13;&#10;            updateData.put(&quot;updatedAt&quot;, new Date());&#13;&#10;&#13;&#10;            db.collection(&quot;lesson_progress&quot;).document(progressId)&#13;&#10;                    .update(updateData)&#13;&#10;                    .addOnSuccessListener(aVoid -&gt; {&#13;&#10;                        lesson.setCompleted(true);&#13;&#10;                        updateCompletionStatus(lesson);&#13;&#10;                        &#13;&#10;                        Toast.makeText(itemView.getContext(), &quot;Đã đánh dấu hoàn thành bài học: &quot; + lesson.getTitle(), Toast.LENGTH_SHORT).show();&#13;&#10;                        android.util.Log.d(&quot;StudentLessonAdapter&quot;, &quot;Lesson progress updated successfully&quot;);&#13;&#10;&#13;&#10;                        // Notify listener if available&#13;&#10;                        if (listener != null) {&#13;&#10;                            listener.onLessonCompleted(lesson);&#13;&#10;                        }&#13;&#10;                    })&#13;&#10;                    .addOnFailureListener(e -&gt; {&#13;&#10;                        android.util.Log.e(&quot;StudentLessonAdapter&quot;, &quot;Error updating lesson progress&quot;, e);&#13;&#10;                        btnMarkComplete.setEnabled(true);&#13;&#10;                        btnMarkComplete.setText(&quot;Hoàn thành&quot;);&#13;&#10;                        Toast.makeText(itemView.getContext(), &quot;Lỗi cập nhật tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#13;&#10;                    });&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentLessonLearningActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentLessonLearningActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.ScrollView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.LessonProgress;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Date;&#10;&#10;public class StudentLessonLearningActivity extends AppCompatActivity {&#10;&#10;    private TextView tvLessonTitle, tvLessonType, tvEstimatedTime, tvLessonOrder;&#10;    private TextView tvLessonContent;&#10;    private LinearLayout layoutGrammarContent;&#10;    private TextView tvGrammarRule, tvGrammarExplanation, tvGrammarExamples;&#10;    private androidx.cardview.widget.CardView cardVocabularyContent;&#10;    private TextView tvVocabularyWord, tvVocabularyPronunciation, tvVocabularyMeaning, tvVocabularyExample;&#10;    private Button btnMarkComplete, btnNextLesson, btnPreviousLesson;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String lessonId, lessonTitle, courseId, courseTitle, courseCategory;&#10;    private Lesson currentLesson;&#10;    private boolean isLessonCompleted = false;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_lesson_learning);&#10;&#10;        // Get lesson info from intent&#10;        lessonId = getIntent().getStringExtra(&quot;lessonId&quot;);&#10;        lessonTitle = getIntent().getStringExtra(&quot;lessonTitle&quot;);&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;        courseCategory = getIntent().getStringExtra(&quot;courseCategory&quot;);&#10;&#10;        if (lessonId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin bài học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupClickListeners();&#10;        loadLessonData();&#10;        checkLessonProgress();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvLessonTitle = findViewById(R.id.tv_lesson_title);&#10;        tvLessonType = findViewById(R.id.tv_lesson_type);&#10;        tvEstimatedTime = findViewById(R.id.tv_estimated_time);&#10;        tvLessonContent = findViewById(R.id.tv_lesson_content);&#10;&#10;        // Grammar-specific views&#10;        layoutGrammarContent = findViewById(R.id.card_grammar_content);&#10;        tvGrammarRule = findViewById(R.id.tv_grammar_rule);&#10;        tvGrammarExplanation = findViewById(R.id.tv_grammar_explanation);&#10;        tvGrammarExamples = findViewById(R.id.tv_grammar_examples);&#10;&#10;        // Vocabulary-specific views&#10;        cardVocabularyContent = findViewById(R.id.card_vocabulary_content);&#10;        tvVocabularyWord = findViewById(R.id.tv_vocabulary_word);&#10;        tvVocabularyPronunciation = findViewById(R.id.tv_vocabulary_pronunciation);&#10;        tvVocabularyMeaning = findViewById(R.id.tv_vocabulary_meaning);&#10;        tvVocabularyExample = findViewById(R.id.tv_vocabulary_example);&#10;&#10;        // Action buttons&#10;        btnMarkComplete = findViewById(R.id.btn_mark_complete);&#10;        btnNextLesson = findViewById(R.id.btn_next_lesson);&#10;        btnPreviousLesson = findViewById(R.id.btn_previous_lesson);&#10;        tvLessonOrder = findViewById(R.id.tv_lesson_order);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Học bài&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnMarkComplete.setOnClickListener(v -&gt; markLessonAsCompleted());&#10;        btnNextLesson.setOnClickListener(v -&gt; navigateToNextLesson());&#10;        btnPreviousLesson.setOnClickListener(v -&gt; navigateToPreviousLesson());&#10;    }&#10;&#10;    private void loadLessonData() {&#10;        db.collection(&quot;lessons&quot;).document(lessonId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                if (documentSnapshot.exists()) {&#10;                    currentLesson = documentSnapshot.toObject(Lesson.class);&#10;                    if (currentLesson != null) {&#10;                        currentLesson.setId(documentSnapshot.getId());&#10;                        displayLessonContent();&#10;                    }&#10;                } else {&#10;                    Toast.makeText(this, &quot;Không tìm thấy bài học&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error loading lesson&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            });&#10;    }&#10;&#10;    private void displayLessonContent() {&#10;        // Display basic lesson info&#10;        tvLessonTitle.setText(currentLesson.getTitle());&#10;        tvLessonType.setText(currentLesson.getTypeDisplayName());&#10;        tvEstimatedTime.setText(currentLesson.getEstimatedTimeString());&#10;        tvLessonContent.setText(currentLesson.getContent());&#10;&#10;        // Display Grammar-specific content if applicable&#10;        if (&quot;Grammar&quot;.equalsIgnoreCase(currentLesson.getCategory())) {&#10;            layoutGrammarContent.setVisibility(View.VISIBLE);&#10;            displayGrammarContent();&#10;        } else {&#10;            layoutGrammarContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Set up lesson navigation&#10;        setupLessonNavigation();&#10;    }&#10;&#10;    private void displayGrammarContent() {&#10;        // Display grammar rule&#10;        if (currentLesson.getGrammarRule() != null &amp;&amp; !currentLesson.getGrammarRule().isEmpty()) {&#10;            tvGrammarRule.setText(currentLesson.getGrammarRule());&#10;            tvGrammarRule.setVisibility(View.VISIBLE);&#10;        } else {&#10;            tvGrammarRule.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Display grammar structure (using grammarStructure instead of grammarExplanation)&#10;        if (currentLesson.getGrammarStructure() != null &amp;&amp; !currentLesson.getGrammarStructure().isEmpty()) {&#10;            tvGrammarExplanation.setText(currentLesson.getGrammarStructure());&#10;            tvGrammarExplanation.setVisibility(View.VISIBLE);&#10;        } else {&#10;            tvGrammarExplanation.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Display grammar examples&#10;        if (currentLesson.getGrammarExamples() != null &amp;&amp; !currentLesson.getGrammarExamples().isEmpty()) {&#10;            tvGrammarExamples.setText(android.text.TextUtils.join(&quot;\n&quot;, currentLesson.getGrammarExamples()));&#10;            tvGrammarExamples.setVisibility(View.VISIBLE);&#10;        } else {&#10;            tvGrammarExamples.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    private void setupLessonNavigation() {&#10;        // TODO: Implement lesson navigation logic&#10;        // For now, disable navigation buttons&#10;        btnNextLesson.setEnabled(false);&#10;        btnPreviousLesson.setEnabled(false);&#10;    }&#10;&#10;    private void checkLessonProgress() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            return;&#10;        }&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;lessonId&quot;, lessonId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        LessonProgress progress = queryDocumentSnapshots.getDocuments().get(0).toObject(LessonProgress.class);&#10;                        if (progress != null &amp;&amp; progress.isCompleted()) {&#10;                            isLessonCompleted = true;&#10;                            btnMarkComplete.setText(&quot;✅ Đã hoàn thành&quot;);&#10;                            btnMarkComplete.setEnabled(false);&#10;                            btnMarkComplete.setBackgroundColor(getColor(android.R.color.holo_green_light));&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error checking lesson progress&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void markLessonAsCompleted() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (isLessonCompleted) {&#10;            Toast.makeText(this, &quot;Bài học đã được đánh dấu hoàn thành trước đó&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        // Disable button while processing&#10;        btnMarkComplete.setEnabled(false);&#10;        btnMarkComplete.setText(&quot;Đang lưu...&quot;);&#10;&#10;        // Check if progress record already exists&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;lessonId&quot;, lessonId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        // Create new progress record&#10;                        createLessonProgress(studentId);&#10;                    } else {&#10;                        // Update existing progress record&#10;                        String progressId = queryDocumentSnapshots.getDocuments().get(0).getId();&#10;                        updateLessonProgress(progressId);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error checking lesson progress&quot;, e);&#10;                    btnMarkComplete.setEnabled(true);&#10;                    btnMarkComplete.setText(&quot;Đánh dấu hoàn thành&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi kiểm tra tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void createLessonProgress(String studentId) {&#10;        Map&lt;String, Object&gt; progressData = new HashMap&lt;&gt;();&#10;        progressData.put(&quot;studentId&quot;, studentId);&#10;        progressData.put(&quot;courseId&quot;, courseId);&#10;        progressData.put(&quot;lessonId&quot;, lessonId);&#10;        progressData.put(&quot;isCompleted&quot;, true);&#10;        progressData.put(&quot;completedAt&quot;, new Date());&#10;        progressData.put(&quot;createdAt&quot;, new Date());&#10;        progressData.put(&quot;updatedAt&quot;, new Date());&#10;&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .add(progressData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    isLessonCompleted = true;&#10;                    btnMarkComplete.setText(&quot;✅ Đã hoàn thành&quot;);&#10;                    btnMarkComplete.setEnabled(false);&#10;                    btnMarkComplete.setBackgroundColor(getColor(android.R.color.holo_green_light));&#10;&#10;                    Toast.makeText(this, &quot;Đã đánh dấu hoàn thành bài học!&quot;, Toast.LENGTH_SHORT).show();&#10;                    android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Lesson progress created successfully&quot;);&#10;&#10;                    // Calculate and show updated course progress&#10;                    calculateAndShowCourseProgress();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error creating lesson progress&quot;, e);&#10;                    btnMarkComplete.setEnabled(true);&#10;                    btnMarkComplete.setText(&quot;Đánh dấu hoàn thành&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi lưu tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateLessonProgress(String progressId) {&#10;        Map&lt;String, Object&gt; updateData = new HashMap&lt;&gt;();&#10;        updateData.put(&quot;isCompleted&quot;, true);&#10;        updateData.put(&quot;completedAt&quot;, new Date());&#10;        updateData.put(&quot;updatedAt&quot;, new Date());&#10;&#10;        db.collection(&quot;lesson_progress&quot;).document(progressId)&#10;                .update(updateData)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    isLessonCompleted = true;&#10;                    btnMarkComplete.setText(&quot;✅ Đã hoàn thành&quot;);&#10;                    btnMarkComplete.setEnabled(false);&#10;                    btnMarkComplete.setBackgroundColor(getColor(android.R.color.holo_green_light));&#10;&#10;                    Toast.makeText(this, &quot;Đã đánh dấu hoàn thành bài học!&quot;, Toast.LENGTH_SHORT).show();&#10;                    android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Lesson progress updated successfully&quot;);&#10;&#10;                    // Calculate and show updated course progress&#10;                    calculateAndShowCourseProgress();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error updating lesson progress&quot;, e);&#10;                    btnMarkComplete.setEnabled(true);&#10;                    btnMarkComplete.setText(&quot;Đánh dấu hoàn thành&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi cập nhật tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    // New method to calculate and display course progress after completing a lesson&#10;    private void calculateAndShowCourseProgress() {&#10;        if (mAuth.getCurrentUser() == null) return;&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        // Get total lessons count&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;isPublished&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int totalLessons = queryDocumentSnapshots.size();&#10;&#10;                    // Get completed lessons count&#10;                    db.collection(&quot;lesson_progress&quot;)&#10;                            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                            .whereEqualTo(&quot;isCompleted&quot;, true)&#10;                            .get()&#10;                            .addOnSuccessListener(progressSnapshots -&gt; {&#10;                                int completedLessons = progressSnapshots.size();&#10;                                int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;                                // Show progress update&#10;                                String progressMessage = &quot; Tiến độ khóa học: &quot; + completedLessons + &quot;/&quot; + totalLessons +&#10;                                                       &quot; (&quot; + progressPercentage + &quot;% hoàn thành)&quot;;&#10;&#10;                                Toast.makeText(this, progressMessage, Toast.LENGTH_LONG).show();&#10;&#10;                                // Check if course is completed&#10;                                if (completedLessons == totalLessons &amp;&amp; totalLessons &gt; 0) {&#10;                                    Toast.makeText(this, &quot; Chúc mừng! Bạn đã hoàn thành toàn bộ khóa học: &quot; + courseTitle + &quot;!&quot;, Toast.LENGTH_LONG).show();&#10;                                }&#10;&#10;                                android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Course progress: &quot; + completedLessons + &quot;/&quot; + totalLessons + &quot; = &quot; + progressPercentage + &quot;%&quot;);&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error calculating course progress&quot;, e);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error getting total lessons&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void navigateToNextLesson() {&#10;        Toast.makeText(this, &quot;Chuyển đến bài học tiếp theo&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void navigateToPreviousLesson() {&#10;        Toast.makeText(this, &quot;Quay lại bài học trước&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.LinearLayout;&#10;import android.widget.ScrollView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.models.LessonProgress;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Date;&#10;&#10;public class StudentLessonLearningActivity extends AppCompatActivity {&#10;&#10;    private TextView tvLessonTitle, tvLessonType, tvEstimatedTime, tvLessonOrder;&#10;    private TextView tvLessonContent;&#10;    private LinearLayout layoutGrammarContent;&#10;    private TextView tvGrammarRule, tvGrammarExplanation, tvGrammarExamples;&#10;    private androidx.cardview.widget.CardView cardVocabularyContent;&#10;    private TextView tvVocabularyWord, tvVocabularyPronunciation, tvVocabularyMeaning, tvVocabularyExample;&#10;    private Button btnMarkComplete, btnNextLesson, btnPreviousLesson;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String lessonId, lessonTitle, courseId, courseTitle, courseCategory;&#10;    private Lesson currentLesson;&#10;    private boolean isLessonCompleted = false;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_lesson_learning);&#10;&#10;        // Get lesson info from intent&#10;        lessonId = getIntent().getStringExtra(&quot;lessonId&quot;);&#10;        lessonTitle = getIntent().getStringExtra(&quot;lessonTitle&quot;);&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseTitle = getIntent().getStringExtra(&quot;courseTitle&quot;);&#10;        courseCategory = getIntent().getStringExtra(&quot;courseCategory&quot;);&#10;&#10;        // Debug logging để kiểm tra dữ liệu nhận được&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;=== DEBUG RECEIVED DATA ===&quot;);&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Received lessonId: &quot; + lessonId);&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Received lessonTitle: &quot; + lessonTitle);&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Received courseId: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Received courseTitle: &quot; + courseTitle);&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Received courseCategory: &quot; + courseCategory);&#10;&#10;        if (lessonId == null) {&#10;            android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;ERROR: lessonId is null! Finishing activity.&quot;);&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin bài học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        if (lessonId.isEmpty()) {&#10;            android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;ERROR: lessonId is empty! Finishing activity.&quot;);&#10;            Toast.makeText(this, &quot;Lỗi: ID bài học trống&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;✅ All data validation passed. Continuing with initialization.&quot;);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupClickListeners();&#10;        loadLessonData();&#10;        checkLessonProgress();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvLessonTitle = findViewById(R.id.tv_lesson_title);&#10;        tvLessonType = findViewById(R.id.tv_lesson_type);&#10;        tvEstimatedTime = findViewById(R.id.tv_estimated_time);&#10;        tvLessonContent = findViewById(R.id.tv_lesson_content);&#10;&#10;        // Grammar-specific views&#10;        layoutGrammarContent = findViewById(R.id.card_grammar_content);&#10;        tvGrammarRule = findViewById(R.id.tv_grammar_rule);&#10;        tvGrammarExplanation = findViewById(R.id.tv_grammar_explanation);&#10;        tvGrammarExamples = findViewById(R.id.tv_grammar_examples);&#10;&#10;        // Vocabulary-specific views&#10;        cardVocabularyContent = findViewById(R.id.card_vocabulary_content);&#10;        tvVocabularyWord = findViewById(R.id.tv_vocabulary_word);&#10;        tvVocabularyPronunciation = findViewById(R.id.tv_vocabulary_pronunciation);&#10;        tvVocabularyMeaning = findViewById(R.id.tv_vocabulary_meaning);&#10;        tvVocabularyExample = findViewById(R.id.tv_vocabulary_example);&#10;&#10;        // Action buttons&#10;        btnMarkComplete = findViewById(R.id.btn_mark_complete);&#10;        btnNextLesson = findViewById(R.id.btn_next_lesson);&#10;        btnPreviousLesson = findViewById(R.id.btn_previous_lesson);&#10;        tvLessonOrder = findViewById(R.id.tv_lesson_order);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Học bài&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnMarkComplete.setOnClickListener(v -&gt; markLessonAsCompleted());&#10;        btnNextLesson.setOnClickListener(v -&gt; navigateToNextLesson());&#10;        btnPreviousLesson.setOnClickListener(v -&gt; navigateToPreviousLesson());&#10;    }&#10;&#10;    private void loadLessonData() {&#10;        db.collection(&quot;lessons&quot;).document(lessonId)&#10;            .get()&#10;            .addOnSuccessListener(documentSnapshot -&gt; {&#10;                if (documentSnapshot.exists()) {&#10;                    currentLesson = documentSnapshot.toObject(Lesson.class);&#10;                    if (currentLesson != null) {&#10;                        currentLesson.setId(documentSnapshot.getId());&#10;                        displayLessonContent();&#10;                    }&#10;                } else {&#10;                    Toast.makeText(this, &quot;Không tìm thấy bài học&quot;, Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error loading lesson&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi tải bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            });&#10;    }&#10;&#10;    private void displayLessonContent() {&#10;        // Display basic lesson info&#10;        tvLessonTitle.setText(currentLesson.getTitle());&#10;        tvLessonType.setText(currentLesson.getTypeDisplayName());&#10;        tvEstimatedTime.setText(currentLesson.getEstimatedTimeString());&#10;        tvLessonContent.setText(currentLesson.getContent());&#10;&#10;        // Display Grammar-specific content if applicable&#10;        if (&quot;Grammar&quot;.equalsIgnoreCase(currentLesson.getCategory())) {&#10;            layoutGrammarContent.setVisibility(View.VISIBLE);&#10;            displayGrammarContent();&#10;        } else {&#10;            layoutGrammarContent.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Set up lesson navigation&#10;        setupLessonNavigation();&#10;    }&#10;&#10;    private void displayGrammarContent() {&#10;        // Display grammar rule&#10;        if (currentLesson.getGrammarRule() != null &amp;&amp; !currentLesson.getGrammarRule().isEmpty()) {&#10;            tvGrammarRule.setText(currentLesson.getGrammarRule());&#10;            tvGrammarRule.setVisibility(View.VISIBLE);&#10;        } else {&#10;            tvGrammarRule.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Display grammar structure (using grammarStructure instead of grammarExplanation)&#10;        if (currentLesson.getGrammarStructure() != null &amp;&amp; !currentLesson.getGrammarStructure().isEmpty()) {&#10;            tvGrammarExplanation.setText(currentLesson.getGrammarStructure());&#10;            tvGrammarExplanation.setVisibility(View.VISIBLE);&#10;        } else {&#10;            tvGrammarExplanation.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Display grammar examples&#10;        if (currentLesson.getGrammarExamples() != null &amp;&amp; !currentLesson.getGrammarExamples().isEmpty()) {&#10;            tvGrammarExamples.setText(android.text.TextUtils.join(&quot;\n&quot;, currentLesson.getGrammarExamples()));&#10;            tvGrammarExamples.setVisibility(View.VISIBLE);&#10;        } else {&#10;            tvGrammarExamples.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    private void setupLessonNavigation() {&#10;        // TODO: Implement lesson navigation logic&#10;        // For now, disable navigation buttons&#10;        btnNextLesson.setEnabled(false);&#10;        btnPreviousLesson.setEnabled(false);&#10;    }&#10;&#10;    private void checkLessonProgress() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            return;&#10;        }&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;lessonId&quot;, lessonId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        LessonProgress progress = queryDocumentSnapshots.getDocuments().get(0).toObject(LessonProgress.class);&#10;                        if (progress != null &amp;&amp; progress.isCompleted()) {&#10;                            isLessonCompleted = true;&#10;                            btnMarkComplete.setText(&quot;✅ Đã hoàn thành&quot;);&#10;                            btnMarkComplete.setEnabled(false);&#10;                            btnMarkComplete.setBackgroundColor(getColor(android.R.color.holo_green_light));&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error checking lesson progress&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void markLessonAsCompleted() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (isLessonCompleted) {&#10;            Toast.makeText(this, &quot;Bài học đã được đánh dấu hoàn thành trước đó&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        // Disable button while processing&#10;        btnMarkComplete.setEnabled(false);&#10;        btnMarkComplete.setText(&quot;Đang lưu...&quot;);&#10;&#10;        // Check if progress record already exists&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;lessonId&quot;, lessonId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        // Create new progress record&#10;                        createLessonProgress(studentId);&#10;                    } else {&#10;                        // Update existing progress record&#10;                        String progressId = queryDocumentSnapshots.getDocuments().get(0).getId();&#10;                        updateLessonProgress(progressId);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error checking lesson progress&quot;, e);&#10;                    btnMarkComplete.setEnabled(true);&#10;                    btnMarkComplete.setText(&quot;Đánh dấu hoàn thành&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi kiểm tra tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void createLessonProgress(String studentId) {&#10;        Map&lt;String, Object&gt; progressData = new HashMap&lt;&gt;();&#10;        progressData.put(&quot;studentId&quot;, studentId);&#10;        progressData.put(&quot;courseId&quot;, courseId);&#10;        progressData.put(&quot;lessonId&quot;, lessonId);&#10;        progressData.put(&quot;isCompleted&quot;, true);&#10;        progressData.put(&quot;completedAt&quot;, new Date());&#10;        progressData.put(&quot;createdAt&quot;, new Date());&#10;        progressData.put(&quot;updatedAt&quot;, new Date());&#10;&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .add(progressData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    isLessonCompleted = true;&#10;                    btnMarkComplete.setText(&quot;✅ Đã hoàn thành&quot;);&#10;                    btnMarkComplete.setEnabled(false);&#10;                    btnMarkComplete.setBackgroundColor(getColor(android.R.color.holo_green_light));&#10;&#10;                    Toast.makeText(this, &quot;Đã đánh dấu hoàn thành bài học!&quot;, Toast.LENGTH_SHORT).show();&#10;                    android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Lesson progress created successfully&quot;);&#10;&#10;                    // Calculate and show updated course progress&#10;                    calculateAndShowCourseProgress();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error creating lesson progress&quot;, e);&#10;                    btnMarkComplete.setEnabled(true);&#10;                    btnMarkComplete.setText(&quot;Đánh dấu hoàn thành&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi lưu tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateLessonProgress(String progressId) {&#10;        Map&lt;String, Object&gt; updateData = new HashMap&lt;&gt;();&#10;        updateData.put(&quot;isCompleted&quot;, true);&#10;        updateData.put(&quot;completedAt&quot;, new Date());&#10;        updateData.put(&quot;updatedAt&quot;, new Date());&#10;&#10;        db.collection(&quot;lesson_progress&quot;).document(progressId)&#10;                .update(updateData)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    isLessonCompleted = true;&#10;                    btnMarkComplete.setText(&quot;✅ Đã hoàn thành&quot;);&#10;                    btnMarkComplete.setEnabled(false);&#10;                    btnMarkComplete.setBackgroundColor(getColor(android.R.color.holo_green_light));&#10;&#10;                    Toast.makeText(this, &quot;Đã đánh dấu hoàn thành bài học!&quot;, Toast.LENGTH_SHORT).show();&#10;                    android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Lesson progress updated successfully&quot;);&#10;&#10;                    // Calculate and show updated course progress&#10;                    calculateAndShowCourseProgress();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error updating lesson progress&quot;, e);&#10;                    btnMarkComplete.setEnabled(true);&#10;                    btnMarkComplete.setText(&quot;Đánh dấu hoàn thành&quot;);&#10;                    Toast.makeText(this, &quot;Lỗi cập nhật tiến độ: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    // New method to calculate and display course progress after completing a lesson&#10;    private void calculateAndShowCourseProgress() {&#10;        if (mAuth.getCurrentUser() == null) return;&#10;&#10;        String studentId = mAuth.getCurrentUser().getUid();&#10;&#10;        // Get total lessons count&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(&quot;isPublished&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int totalLessons = queryDocumentSnapshots.size();&#10;&#10;                    // Get completed lessons count&#10;                    db.collection(&quot;lesson_progress&quot;)&#10;                            .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                            .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                            .whereEqualTo(&quot;isCompleted&quot;, true)&#10;                            .get()&#10;                            .addOnSuccessListener(progressSnapshots -&gt; {&#10;                                int completedLessons = progressSnapshots.size();&#10;                                int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;                                // Show progress update&#10;                                String progressMessage = &quot; Tiến độ khóa học: &quot; + completedLessons + &quot;/&quot; + totalLessons +&#10;                                                       &quot; (&quot; + progressPercentage + &quot;% hoàn thành)&quot;;&#10;&#10;                                Toast.makeText(this, progressMessage, Toast.LENGTH_LONG).show();&#10;&#10;                                // Check if course is completed&#10;                                if (completedLessons == totalLessons &amp;&amp; totalLessons &gt; 0) {&#10;                                    Toast.makeText(this, &quot; Chúc mừng! Bạn đã hoàn thành toàn bộ khóa học: &quot; + courseTitle + &quot;!&quot;, Toast.LENGTH_LONG).show();&#10;                                }&#10;&#10;                                android.util.Log.d(&quot;StudentLessonLearning&quot;, &quot;Course progress: &quot; + completedLessons + &quot;/&quot; + totalLessons + &quot; = &quot; + progressPercentage + &quot;%&quot;);&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error calculating course progress&quot;, e);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentLessonLearning&quot;, &quot;Error getting total lessons&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void navigateToNextLesson() {&#10;        Toast.makeText(this, &quot;Chuyển đến bài học tiếp theo&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void navigateToPreviousLesson() {&#10;        Toast.makeText(this, &quot;Quay lại bài học trước&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentMyCoursesActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentMyCoursesActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class StudentMyCoursesActivity extends AppCompatActivity implements StudentEnrolledCourseAdapter.OnCourseClickListener {&#10;&#10;    private RecyclerView rvMyCourses;&#10;    private LinearLayout layoutNoCourses;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;EnrolledCourse&gt; enrolledCourseList;&#10;    private StudentEnrolledCourseAdapter courseAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_my_courses);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        enrolledCourseList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        getCurrentStudentId();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvMyCourses = findViewById(R.id.rv_my_courses);&#10;        layoutNoCourses = findViewById(R.id.layout_no_courses);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Khóa học của tôi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        courseAdapter = new StudentEnrolledCourseAdapter(enrolledCourseList, this);&#10;        rvMyCourses.setLayoutManager(new LinearLayoutManager(this));&#10;        rvMyCourses.setAdapter(courseAdapter);&#10;    }&#10;&#10;    private void getCurrentStudentId() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;        &#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String userRole = documentSnapshot.getString(&quot;role&quot;);&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;&#10;                        if (!&quot;student&quot;.equals(userRole)) {&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem khóa học của mình&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentStudentId != null) {&#10;                            // Thêm debug để kiểm tra dữ liệu Firebase&#10;                            debugFirebaseData(currentStudentId);&#10;                            loadEnrolledCourses();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadEnrolledCourses() {&#10;        layoutNoCourses.setVisibility(View.VISIBLE);&#10;        rvMyCourses.setVisibility(View.GONE);&#10;&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loading enrolled courses for student: &quot; + currentStudentId);&#10;&#10;        // Load ONLY approved enrollments từ collection &quot;enrollments&quot; (đã có trường status)&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)  // Thêm lại filter theo status approved&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    enrolledCourseList.clear();&#10;&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; approved enrollments&quot;);&#10;&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    final int totalEnrollments = queryDocumentSnapshots.size();&#10;                    final int[] loadedCount = {0}; // Counter để track số lượng course đã load xong&#10;&#10;                    // Với mỗi approved enrollment, load thông tin course tương ứng&#10;                    for (QueryDocumentSnapshot enrollmentDoc : queryDocumentSnapshots) {&#10;                        String courseId = enrollmentDoc.getString(&quot;courseID&quot;);&#10;                        String courseName = enrollmentDoc.getString(&quot;courseName&quot;);&#10;                        String enrollmentDate = enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;) != null ?&#10;                            enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;).toDate().toString() : &quot;&quot;;&#10;&#10;                        if (courseId != null) {&#10;                            loadCourseDetails(courseId, courseName, enrollmentDate, enrollmentDoc.getId(),&#10;                                totalEnrollments, loadedCount);&#10;                        } else {&#10;                            loadedCount[0]++;&#10;                            if (loadedCount[0] == totalEnrollments) {&#10;                                updateUI();&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading approved enrollments&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadCourseDetails(String courseId, String courseName, String enrollmentDate,&#10;                                 String enrollmentId, int totalEnrollments, int[] loadedCount) {&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;                .get()&#10;                .addOnSuccessListener(courseDoc -&gt; {&#10;                    if (courseDoc.exists()) {&#10;                        Course course = courseDoc.toObject(Course.class);&#10;                        if (course != null) {&#10;                            course.setId(courseDoc.getId());&#10;&#10;                            // Tạo EnrolledCourse object&#10;                            EnrolledCourse enrolledCourse = new EnrolledCourse();&#10;                            enrolledCourse.setCourse(course);&#10;                            enrolledCourse.setEnrollmentId(enrollmentId);&#10;                            enrolledCourse.setEnrollmentDate(enrollmentDate);&#10;                            enrolledCourse.setStatus(&quot;active&quot;);&#10;&#10;                            // Set dữ liệu mặc định&#10;                            enrolledCourse.setTotalLessons(0);&#10;                            enrolledCourse.setCompletedLessons(0);&#10;                            enrolledCourse.setProgress(0);&#10;&#10;                            enrolledCourseList.add(enrolledCourse);&#10;&#10;                            // Tính toán tiến độ thực tế từ Firebase&#10;                            calculateRealProgress(enrolledCourse, courseId, currentStudentId);&#10;&#10;                            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Added course: &quot; + course.getTitle());&#10;                        }&#10;                    } else {&#10;                        android.util.Log.w(&quot;StudentMyCourses&quot;, &quot;Course not found: &quot; + courseId);&#10;                    }&#10;&#10;                    // Increment counter và check if all courses loaded&#10;                    loadedCount[0]++;&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loaded &quot; + loadedCount[0] + &quot;/&quot; + totalEnrollments + &quot; courses&quot;);&#10;&#10;                    if (loadedCount[0] == totalEnrollments) {&#10;                        updateUI();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading course details for: &quot; + courseId, e);&#10;&#10;                    // Vẫn increment counter ngay cả khi có lỗi&#10;                    loadedCount[0]++;&#10;                    if (loadedCount[0] == totalEnrollments) {&#10;                        updateUI();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void calculateRealProgress(EnrolledCourse enrolledCourse, String courseId, String studentId) {&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;=== CALCULATING REAL PROGRESS ===&quot;);&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;CourseId: &quot; + courseId + &quot;, StudentId: &quot; + studentId);&#10;&#10;        // Đầu tiên load tổng số lessons&#10;        loadTotalLessons(courseId, enrolledCourse, studentId);&#10;    }&#10;&#10;    private void loadTotalLessons(String courseId, EnrolledCourse enrolledCourse, String studentId) {&#10;        // Thử cách 1: lessons subcollection trong course&#10;        db.collection(&quot;courses&quot;).document(courseId).collection(&quot;lessons&quot;)&#10;                .get()&#10;                .addOnSuccessListener(lessonsSnapshot -&gt; {&#10;                    int totalLessons = lessonsSnapshot.size();&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Method 1 - Total lessons: &quot; + totalLessons);&#10;&#10;                    if (totalLessons &gt; 0) {&#10;                        loadCompletedLessons(courseId, enrolledCourse, studentId, totalLessons);&#10;                    } else {&#10;                        // Thử cách 2: lessons collection với filter courseId&#10;                        db.collection(&quot;lessons&quot;)&#10;                                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                                .get()&#10;                                .addOnSuccessListener(altLessons -&gt; {&#10;                                    int altTotal = altLessons.size();&#10;                                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Method 2 - Total lessons: &quot; + altTotal);&#10;&#10;                                    if (altTotal &gt; 0) {&#10;                                        loadCompletedLessons(courseId, enrolledCourse, studentId, altTotal);&#10;                                    } else {&#10;                                        // Không tìm thấy lessons, set default và update UI&#10;                                        setDefaultProgress(enrolledCourse);&#10;                                        updateUIForCourse(enrolledCourse);&#10;                                    }&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error in method 2&quot;, e);&#10;                                    setDefaultProgress(enrolledCourse);&#10;                                    updateUIForCourse(enrolledCourse);&#10;                                });&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error in method 1&quot;, e);&#10;                    setDefaultProgress(enrolledCourse);&#10;                    updateUIForCourse(enrolledCourse);&#10;                });&#10;    }&#10;&#10;    private void loadCompletedLessons(String courseId, EnrolledCourse enrolledCourse, String studentId, int totalLessons) {&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loading completed lessons for course: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Student ID: &quot; + studentId);&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Total lessons: &quot; + totalLessons);&#10;&#10;        // Thử collection chính: lesson_progress với field isCompleted&#10;        tryProgressCollection(courseId, enrolledCourse, studentId, totalLessons, &quot;lesson_progress&quot;, &quot;isCompleted&quot;);&#10;    }&#10;&#10;    private void tryProgressCollection(String courseId, EnrolledCourse enrolledCourse, String studentId,&#10;                                     int totalLessons, String collectionName, String completedField) {&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Trying collection: &quot; + collectionName + &quot; with field: &quot; + completedField);&#10;&#10;        db.collection(collectionName)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .whereEqualTo(completedField, true)&#10;                .get()&#10;                .addOnSuccessListener(progressSnapshot -&gt; {&#10;                    int completedLessons = progressSnapshot.size();&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Found &quot; + completedLessons + &quot; completed lessons in &quot; + collectionName);&#10;&#10;                    if (completedLessons &gt; 0 || collectionName.equals(&quot;lesson_progress&quot;)) {&#10;                        // Có dữ liệu hoặc đây là collection chính&#10;                        int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;                        android.util.Log.d(&quot;StudentMyCourses&quot;,&#10;                            &quot;Final Progress: &quot; + completedLessons + &quot;/&quot; + totalLessons + &quot; = &quot; + progressPercentage + &quot;%&quot;);&#10;&#10;                        // Cập nhật thông tin&#10;                        enrolledCourse.setTotalLessons(totalLessons);&#10;                        enrolledCourse.setCompletedLessons(completedLessons);&#10;                        enrolledCourse.setProgress(progressPercentage);&#10;&#10;                        // Cập nhật UI ngay lập tức&#10;                        updateUIForCourse(enrolledCourse);&#10;                    } else {&#10;                        // Thử collection khác nếu lesson_progress không có dữ liệu&#10;                        if (collectionName.equals(&quot;lesson_progress&quot;)) {&#10;                            tryProgressCollection(courseId, enrolledCourse, studentId, totalLessons, &quot;lessonProgress&quot;, &quot;completed&quot;);&#10;                        } else if (collectionName.equals(&quot;lessonProgress&quot;)) {&#10;                            tryProgressCollection(courseId, enrolledCourse, studentId, totalLessons, &quot;studentProgress&quot;, &quot;completed&quot;);&#10;                        } else {&#10;                            // Đã thử hết, set default&#10;                            android.util.Log.w(&quot;StudentMyCourses&quot;, &quot;No progress data found, setting default&quot;);&#10;                            enrolledCourse.setTotalLessons(totalLessons);&#10;                            enrolledCourse.setCompletedLessons(0);&#10;                            enrolledCourse.setProgress(0);&#10;                            updateUIForCourse(enrolledCourse);&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading &quot; + collectionName, e);&#10;&#10;                    // Thử collection tiếp theo&#10;                    if (collectionName.equals(&quot;lesson_progress&quot;)) {&#10;                        tryProgressCollection(courseId, enrolledCourse, studentId, totalLessons, &quot;lessonProgress&quot;, &quot;completed&quot;);&#10;                    } else if (collectionName.equals(&quot;lessonProgress&quot;)) {&#10;                        tryProgressCollection(courseId, enrolledCourse, studentId, totalLessons, &quot;studentProgress&quot;, &quot;completed&quot;);&#10;                    } else {&#10;                        // Set default nếu tất cả fail&#10;                        enrolledCourse.setTotalLessons(totalLessons);&#10;                        enrolledCourse.setCompletedLessons(0);&#10;                        enrolledCourse.setProgress(0);&#10;                        updateUIForCourse(enrolledCourse);&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void setDefaultProgress(EnrolledCourse enrolledCourse) {&#10;        android.util.Log.w(&quot;StudentMyCourses&quot;, &quot;Setting default progress for: &quot; +&#10;            enrolledCourse.getCourse().getTitle());&#10;&#10;        enrolledCourse.setTotalLessons(0);&#10;        enrolledCourse.setCompletedLessons(0);&#10;        enrolledCourse.setProgress(0);&#10;    }&#10;&#10;    private void updateUIForCourse(EnrolledCourse enrolledCourse) {&#10;        runOnUiThread(() -&gt; {&#10;            if (courseAdapter != null) {&#10;                courseAdapter.notifyDataSetChanged();&#10;                android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;UI updated - &quot; +&#10;                    enrolledCourse.getCourse().getTitle() + &quot;: &quot; + enrolledCourse.getProgress() + &quot;%&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateUI() {&#10;        runOnUiThread(() -&gt; {&#10;            if (enrolledCourseList.isEmpty()) {&#10;                showEmptyState();&#10;            } else {&#10;                layoutNoCourses.setVisibility(View.GONE);&#10;                rvMyCourses.setVisibility(View.VISIBLE);&#10;                courseAdapter.notifyDataSetChanged();&#10;                android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Updated UI with &quot; + enrolledCourseList.size() + &quot; courses&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        runOnUiThread(() -&gt; {&#10;            layoutNoCourses.setVisibility(View.VISIBLE);&#10;            rvMyCourses.setVisibility(View.GONE);&#10;            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Showing empty state&quot;);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onCourseClick(EnrolledCourse enrolledCourse) {&#10;        Intent intent = new Intent(this, StudentCourseDetailActivity.class);&#10;        intent.putExtra(&quot;course_id&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;course_title&quot;, enrolledCourse.getCourse().getTitle());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onContinueLearning(EnrolledCourse enrolledCourse) {&#10;        // Chuyển đến màn hình học bài đầu tiên chưa hoàn thành&#10;        Intent intent = new Intent(this, StudentCourseDetailActivity.class);&#10;        intent.putExtra(&quot;course_id&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;course_title&quot;, enrolledCourse.getCourse().getTitle());&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void debugFirebaseData(String studentId) {&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;=== DEBUG FIREBASE DATA ===&quot;);&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Student ID: &quot; + studentId);&#10;&#10;        // Debug enrollments&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, studentId)&#10;                .get()&#10;                .addOnSuccessListener(querySnapshot -&gt; {&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Total enrollments: &quot; + querySnapshot.size());&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : querySnapshot) {&#10;                        String status = doc.getString(&quot;status&quot;);&#10;                        String courseId = doc.getString(&quot;courseID&quot;);&#10;                        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Enrollment - CourseID: &quot; + courseId + &quot;, Status: &quot; + status);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error debugging enrollments&quot;, e));&#10;&#10;        // Debug lesson_progress&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .get()&#10;                .addOnSuccessListener(querySnapshot -&gt; {&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Total lesson_progress records: &quot; + querySnapshot.size());&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : querySnapshot) {&#10;                        String courseId = doc.getString(&quot;courseId&quot;);&#10;                        Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Progress - CourseID: &quot; + courseId + &quot;, Completed: &quot; + isCompleted);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error debugging lesson_progress&quot;, e));&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload dữ liệu khi quay lại activity để cập nhật tiến độ mới nhất&#10;        if (currentStudentId != null) {&#10;            loadEnrolledCourses();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class StudentMyCoursesActivity extends AppCompatActivity implements StudentEnrolledCourseAdapter.OnCourseClickListener {&#10;&#10;    private RecyclerView rvMyCourses;&#10;    private LinearLayout layoutNoCourses;&#10;    private Toolbar toolbar;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;EnrolledCourse&gt; enrolledCourseList;&#10;    private StudentEnrolledCourseAdapter courseAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_my_courses);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        enrolledCourseList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        getCurrentStudentId();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvMyCourses = findViewById(R.id.rv_my_courses);&#10;        layoutNoCourses = findViewById(R.id.layout_no_courses);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Khóa học của tôi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        courseAdapter = new StudentEnrolledCourseAdapter(enrolledCourseList, this);&#10;        rvMyCourses.setLayoutManager(new LinearLayoutManager(this));&#10;        rvMyCourses.setAdapter(courseAdapter);&#10;    }&#10;&#10;    private void getCurrentStudentId() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;        &#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String userRole = documentSnapshot.getString(&quot;role&quot;);&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;&#10;                        if (!&quot;student&quot;.equals(userRole)) {&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem khóa học của mình&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentStudentId != null) {&#10;                            // Thêm debug để kiểm tra dữ liệu Firebase&#10;                            debugFirebaseData(currentStudentId);&#10;                            loadEnrolledCourses();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading user info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadEnrolledCourses() {&#10;        layoutNoCourses.setVisibility(View.VISIBLE);&#10;        rvMyCourses.setVisibility(View.GONE);&#10;&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loading enrolled courses for student: &quot; + currentStudentId);&#10;&#10;        // Load ONLY approved enrollments từ collection &quot;enrollments&quot; (đã có trường status)&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, currentStudentId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)  // Thêm lại filter theo status approved&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    enrolledCourseList.clear();&#10;&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; approved enrollments&quot;);&#10;&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    final int totalEnrollments = queryDocumentSnapshots.size();&#10;                    final int[] loadedCount = {0}; // Counter để track số lượng course đã load xong&#10;&#10;                    // Với mỗi approved enrollment, load thông tin course tương ứng&#10;                    for (QueryDocumentSnapshot enrollmentDoc : queryDocumentSnapshots) {&#10;                        String courseId = enrollmentDoc.getString(&quot;courseID&quot;);&#10;                        String courseName = enrollmentDoc.getString(&quot;courseName&quot;);&#10;                        String enrollmentDate = enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;) != null ?&#10;                            enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;).toDate().toString() : &quot;&quot;;&#10;&#10;                        if (courseId != null) {&#10;                            loadCourseDetails(courseId, courseName, enrollmentDate, enrollmentDoc.getId(),&#10;                                totalEnrollments, loadedCount);&#10;                        } else {&#10;                            loadedCount[0]++;&#10;                            if (loadedCount[0] == totalEnrollments) {&#10;                                updateUI();&#10;                            }&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading approved enrollments&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadCourseDetails(String courseId, String courseName, String enrollmentDate,&#10;                                 String enrollmentId, int totalEnrollments, int[] loadedCount) {&#10;        db.collection(&quot;courses&quot;).document(courseId)&#10;                .get()&#10;                .addOnSuccessListener(courseDoc -&gt; {&#10;                    if (courseDoc.exists()) {&#10;                        Course course = courseDoc.toObject(Course.class);&#10;                        if (course != null) {&#10;                            course.setId(courseDoc.getId());&#10;&#10;                            // Tạo EnrolledCourse object&#10;                            EnrolledCourse enrolledCourse = new EnrolledCourse();&#10;                            enrolledCourse.setCourse(course);&#10;                            enrolledCourse.setEnrollmentId(enrollmentId);&#10;                            enrolledCourse.setEnrollmentDate(enrollmentDate);&#10;                            enrolledCourse.setStatus(&quot;active&quot;);&#10;&#10;                            // Set dữ liệu mặc định&#10;                            enrolledCourse.setTotalLessons(0);&#10;                            enrolledCourse.setCompletedLessons(0);&#10;                            enrolledCourse.setProgress(0);&#10;&#10;                            enrolledCourseList.add(enrolledCourse);&#10;&#10;                            // Tính toán tiến độ thực tế từ Firebase&#10;                            calculateRealProgress(enrolledCourse, courseId, currentStudentId);&#10;&#10;                            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Added course: &quot; + course.getTitle());&#10;                        }&#10;                    } else {&#10;                        android.util.Log.w(&quot;StudentMyCourses&quot;, &quot;Course not found: &quot; + courseId);&#10;                    }&#10;&#10;                    // Increment counter và check if all courses loaded&#10;                    loadedCount[0]++;&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Loaded &quot; + loadedCount[0] + &quot;/&quot; + totalEnrollments + &quot; courses&quot;);&#10;&#10;                    if (loadedCount[0] == totalEnrollments) {&#10;                        updateUI();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading course details for: &quot; + courseId, e);&#10;&#10;                    // Vẫn increment counter ngay cả khi có lỗi&#10;                    loadedCount[0]++;&#10;                    if (loadedCount[0] == totalEnrollments) {&#10;                        updateUI();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void calculateRealProgress(EnrolledCourse enrolledCourse, String courseId, String studentId) {&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;=== CALCULATING REAL PROGRESS ===&quot;);&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;CourseId: &quot; + courseId + &quot;, StudentId: &quot; + studentId);&#10;&#10;        // Đầu tiên load tổng số lessons - sử dụng cách đơn giản hơn&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(lessonsSnapshot -&gt; {&#10;                    int totalLessons = lessonsSnapshot.size();&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Total lessons found: &quot; + totalLessons);&#10;&#10;                    if (totalLessons &gt; 0) {&#10;                        // Load completed lessons từ lesson_progress&#10;                        db.collection(&quot;lesson_progress&quot;)&#10;                                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                                .whereEqualTo(&quot;isCompleted&quot;, true)&#10;                                .get()&#10;                                .addOnSuccessListener(progressSnapshot -&gt; {&#10;                                    int completedLessons = progressSnapshot.size();&#10;                                    int progressPercentage = (completedLessons * 100) / totalLessons;&#10;&#10;                                    android.util.Log.d(&quot;StudentMyCourses&quot;,&#10;                                        &quot;Progress calculated: &quot; + completedLessons + &quot;/&quot; + totalLessons + &quot; = &quot; + progressPercentage + &quot;%&quot;);&#10;&#10;                                    // Cập nhật thông tin EnrolledCourse&#10;                                    enrolledCourse.setTotalLessons(totalLessons);&#10;                                    enrolledCourse.setCompletedLessons(completedLessons);&#10;                                    enrolledCourse.setProgress(progressPercentage);&#10;&#10;                                    // Cập nhật UI ngay lập tức&#10;                                    runOnUiThread(() -&gt; {&#10;                                        if (courseAdapter != null) {&#10;                                            courseAdapter.notifyDataSetChanged();&#10;                                            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;UI updated for course: &quot; +&#10;                                                enrolledCourse.getCourse().getTitle() + &quot; - &quot; + progressPercentage + &quot;%&quot;);&#10;                                        }&#10;                                    });&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading progress&quot;, e);&#10;                                    // Set default progress nếu có lỗi&#10;                                    enrolledCourse.setTotalLessons(totalLessons);&#10;                                    enrolledCourse.setCompletedLessons(0);&#10;                                    enrolledCourse.setProgress(0);&#10;                                    runOnUiThread(() -&gt; {&#10;                                        if (courseAdapter != null) {&#10;                                            courseAdapter.notifyDataSetChanged();&#10;                                        }&#10;                                    });&#10;                                });&#10;                    } else {&#10;                        android.util.Log.w(&quot;StudentMyCourses&quot;, &quot;No lessons found for course: &quot; + courseId);&#10;                        // Không có lessons, set default&#10;                        enrolledCourse.setTotalLessons(0);&#10;                        enrolledCourse.setCompletedLessons(0);&#10;                        enrolledCourse.setProgress(0);&#10;                        runOnUiThread(() -&gt; {&#10;                            if (courseAdapter != null) {&#10;                                courseAdapter.notifyDataSetChanged();&#10;                            }&#10;                        });&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error loading lessons&quot;, e);&#10;                    // Set default nếu có lỗi&#10;                    enrolledCourse.setTotalLessons(0);&#10;                    enrolledCourse.setCompletedLessons(0);&#10;                    enrolledCourse.setProgress(0);&#10;                    runOnUiThread(() -&gt; {&#10;                        if (courseAdapter != null) {&#10;                            courseAdapter.notifyDataSetChanged();&#10;                        }&#10;                    });&#10;                });&#10;    }&#10;&#10;    private void updateUIForCourse(EnrolledCourse enrolledCourse) {&#10;        runOnUiThread(() -&gt; {&#10;            if (courseAdapter != null) {&#10;                courseAdapter.notifyDataSetChanged();&#10;                android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;UI updated - &quot; +&#10;                    enrolledCourse.getCourse().getTitle() + &quot;: &quot; + enrolledCourse.getProgress() + &quot;%&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateUI() {&#10;        runOnUiThread(() -&gt; {&#10;            if (enrolledCourseList.isEmpty()) {&#10;                showEmptyState();&#10;            } else {&#10;                layoutNoCourses.setVisibility(View.GONE);&#10;                rvMyCourses.setVisibility(View.VISIBLE);&#10;                courseAdapter.notifyDataSetChanged();&#10;                android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Updated UI with &quot; + enrolledCourseList.size() + &quot; courses&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        runOnUiThread(() -&gt; {&#10;            layoutNoCourses.setVisibility(View.VISIBLE);&#10;            rvMyCourses.setVisibility(View.GONE);&#10;            android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Showing empty state&quot;);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onCourseClick(EnrolledCourse enrolledCourse) {&#10;        Intent intent = new Intent(this, StudentCourseDetailActivity.class);&#10;        intent.putExtra(&quot;course_id&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;course_title&quot;, enrolledCourse.getCourse().getTitle());&#10;        startActivity(intent);&#10;    }&#10;&#10;    @Override&#10;    public void onContinueLearning(EnrolledCourse enrolledCourse) {&#10;        // Chuyển đến màn hình học bài đầu tiên chưa hoàn thành&#10;        Intent intent = new Intent(this, StudentCourseDetailActivity.class);&#10;        intent.putExtra(&quot;course_id&quot;, enrolledCourse.getCourse().getId());&#10;        intent.putExtra(&quot;course_title&quot;, enrolledCourse.getCourse().getTitle());&#10;        startActivity(intent);&#10;    }&#10;&#10;    private void debugFirebaseData(String studentId) {&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;=== DEBUG FIREBASE DATA ===&quot;);&#10;        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Student ID: &quot; + studentId);&#10;&#10;        // Debug enrollments&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, studentId)&#10;                .get()&#10;                .addOnSuccessListener(querySnapshot -&gt; {&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Total enrollments: &quot; + querySnapshot.size());&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : querySnapshot) {&#10;                        String status = doc.getString(&quot;status&quot;);&#10;                        String courseId = doc.getString(&quot;courseID&quot;);&#10;                        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Enrollment - CourseID: &quot; + courseId + &quot;, Status: &quot; + status);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error debugging enrollments&quot;, e));&#10;&#10;        // Debug lesson_progress&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .get()&#10;                .addOnSuccessListener(querySnapshot -&gt; {&#10;                    android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Total lesson_progress records: &quot; + querySnapshot.size());&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : querySnapshot) {&#10;                        String courseId = doc.getString(&quot;courseId&quot;);&#10;                        Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                        android.util.Log.d(&quot;StudentMyCourses&quot;, &quot;Progress - CourseID: &quot; + courseId + &quot;, Completed: &quot; + isCompleted);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; android.util.Log.e(&quot;StudentMyCourses&quot;, &quot;Error debugging lesson_progress&quot;, e));&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Reload dữ liệu khi quay lại activity để cập nhật tiến độ mới nhất&#10;        if (currentStudentId != null) {&#10;            loadEnrolledCourses();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentNotification.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentNotification.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import java.util.Date;&#10;&#10;public class StudentNotification {&#10;    private String id;&#10;    private String title;&#10;    private String message;&#10;    private String type; // feedback_response, course_update, etc.&#10;    private String studentId;&#10;    private String feedbackId;&#10;    private String courseId;&#10;    private String courseName;&#10;    private String teacherResponse;&#10;    private Date createdAt;&#10;    private boolean isRead;&#10;&#10;    public StudentNotification() {&#10;        // Empty constructor for Firebase&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getMessage() {&#10;        return message;&#10;    }&#10;&#10;    public void setMessage(String message) {&#10;        this.message = message;&#10;    }&#10;&#10;    public String getType() {&#10;        return type;&#10;    }&#10;&#10;    public void setType(String type) {&#10;        this.type = type;&#10;    }&#10;&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getFeedbackId() {&#10;        return feedbackId;&#10;    }&#10;&#10;    public void setFeedbackId(String feedbackId) {&#10;        this.feedbackId = feedbackId;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getCourseName() {&#10;        return courseName;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.courseName = courseName;&#10;    }&#10;&#10;    public String getTeacherResponse() {&#10;        return teacherResponse;&#10;    }&#10;&#10;    public void setTeacherResponse(String teacherResponse) {&#10;        this.teacherResponse = teacherResponse;&#10;    }&#10;&#10;    public Date getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public boolean isRead() {&#10;        return isRead;&#10;    }&#10;&#10;    public void setRead(boolean read) {&#10;        isRead = read;&#10;    }&#10;&#10;    // Helper methods&#10;    public String getFormattedDate() {&#10;        if (createdAt != null) {&#10;            return android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, createdAt).toString();&#10;        }&#10;        return &quot;&quot;;&#10;    }&#10;&#10;    public String getTimeAgo() {&#10;        if (createdAt == null) return &quot;&quot;;&#10;        &#10;        long diff = System.currentTimeMillis() - createdAt.getTime();&#10;        long minutes = diff / (60 * 1000);&#10;        long hours = diff / (60 * 60 * 1000);&#10;        long days = diff / (24 * 60 * 60 * 1000);&#10;        &#10;        if (minutes &lt; 60) {&#10;            return minutes + &quot; phút trước&quot;;&#10;        } else if (hours &lt; 24) {&#10;            return hours + &quot; giờ trước&quot;;&#10;        } else {&#10;            return days + &quot; ngày trước&quot;;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentNotificationActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentNotificationActivity.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.Query;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class StudentNotificationActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvNotifications;&#10;    private TextView tvNoNotifications;&#10;    &#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;StudentNotification&gt; notificationList;&#10;    private StudentNotificationAdapter notificationAdapter;&#10;    private String currentStudentId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_notification);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        notificationList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadCurrentStudentInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvNotifications = findViewById(R.id.rv_notifications);&#10;        tvNoNotifications = findViewById(R.id.tv_no_notifications);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Thông báo&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        notificationAdapter = new StudentNotificationAdapter(notificationList, this::onNotificationClick);&#10;        rvNotifications.setLayoutManager(new LinearLayoutManager(this));&#10;        rvNotifications.setAdapter(notificationAdapter);&#10;    }&#10;&#10;    private void loadCurrentStudentInfo() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;&#10;        // Get student info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentStudentId = documentSnapshot.getString(&quot;id&quot;);&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#10;&#10;                        if (!&quot;student&quot;.equals(role)) {&#10;                            Toast.makeText(this, &quot;Chỉ học viên mới có thể xem thông báo&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentStudentId != null) {&#10;                            loadNotifications();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin học viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentNotification&quot;, &quot;Error loading student info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadNotifications() {&#10;        android.util.Log.d(&quot;StudentNotification&quot;, &quot;Loading notifications for student: &quot; + currentStudentId);&#10;&#10;        // Load notifications từ Firebase - sắp xếp theo thời gian mới nhất&#10;        db.collection(&quot;notifications&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, currentStudentId)&#10;                .orderBy(&quot;createdAt&quot;, Query.Direction.DESCENDING)&#10;                .get()&#10;                .addOnSuccessListener(notificationSnapshot -&gt; {&#10;                    notificationList.clear();&#10;&#10;                    android.util.Log.d(&quot;StudentNotification&quot;, &quot;Found &quot; + notificationSnapshot.size() + &quot; notifications&quot;);&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot notificationDoc : notificationSnapshot) {&#10;                        StudentNotification notification = new StudentNotification();&#10;                        notification.setId(notificationDoc.getId());&#10;                        notification.setTitle(notificationDoc.getString(&quot;title&quot;));&#10;                        notification.setMessage(notificationDoc.getString(&quot;message&quot;));&#10;                        notification.setType(notificationDoc.getString(&quot;type&quot;));&#10;                        notification.setStudentId(notificationDoc.getString(&quot;studentId&quot;));&#10;                        notification.setFeedbackId(notificationDoc.getString(&quot;feedbackId&quot;));&#10;                        notification.setCourseId(notificationDoc.getString(&quot;courseId&quot;));&#10;                        notification.setCourseName(notificationDoc.getString(&quot;courseName&quot;));&#10;                        notification.setTeacherResponse(notificationDoc.getString(&quot;teacherResponse&quot;));&#10;&#10;                        // Safely get timestamp&#10;                        com.google.firebase.Timestamp timestamp = notificationDoc.getTimestamp(&quot;createdAt&quot;);&#10;                        if (timestamp != null) {&#10;                            notification.setCreatedAt(timestamp.toDate());&#10;                        }&#10;&#10;                        // Get read status&#10;                        Boolean isRead = notificationDoc.getBoolean(&quot;isRead&quot;);&#10;                        notification.setRead(isRead != null ? isRead : false);&#10;&#10;                        notificationList.add(notification);&#10;                    }&#10;&#10;                    updateUI();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentNotification&quot;, &quot;Error loading notifications&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông báo: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (notificationList.isEmpty()) {&#10;            showEmptyState();&#10;        } else {&#10;            rvNotifications.setVisibility(View.VISIBLE);&#10;            tvNoNotifications.setVisibility(View.GONE);&#10;            notificationAdapter.notifyDataSetChanged();&#10;&#10;            android.util.Log.d(&quot;StudentNotification&quot;, &quot;Displaying &quot; + notificationList.size() + &quot; notifications&quot;);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        rvNotifications.setVisibility(View.GONE);&#10;        tvNoNotifications.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    private void onNotificationClick(StudentNotification notification) {&#10;        // Đánh dấu là đã đọc&#10;        markAsRead(notification);&#10;&#10;        // Hiển thị chi tiết thông báo&#10;        if (&quot;feedback_response&quot;.equals(notification.getType())) {&#10;            showFeedbackResponseDialog(notification);&#10;        }&#10;    }&#10;&#10;    private void markAsRead(StudentNotification notification) {&#10;        if (!notification.isRead()) {&#10;            db.collection(&quot;notifications&quot;).document(notification.getId())&#10;                    .update(&quot;isRead&quot;, true)&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        notification.setRead(true);&#10;                        notificationAdapter.notifyDataSetChanged();&#10;                        android.util.Log.d(&quot;StudentNotification&quot;, &quot;Marked notification as read: &quot; + notification.getId());&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;StudentNotification&quot;, &quot;Error marking notification as read&quot;, e);&#10;                    });&#10;        }&#10;    }&#10;&#10;    private void showFeedbackResponseDialog(StudentNotification notification) {&#10;        androidx.appcompat.app.AlertDialog.Builder builder = new androidx.appcompat.app.AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;Phản hồi từ giáo viên&quot;);&#10;        &#10;        String message = &quot;Khóa học: &quot; + notification.getCourseName() + &quot;\n\n&quot; +&#10;                        &quot;Phản hồi của giáo viên:\n&quot; + notification.getTeacherResponse();&#10;                        &#10;        builder.setMessage(message);&#10;        builder.setPositiveButton(&quot;Đóng&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        if (currentStudentId != null) {&#10;            loadNotifications(); // Refresh data when returning&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentNotificationAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentNotificationAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class StudentNotificationAdapter extends RecyclerView.Adapter&lt;StudentNotificationAdapter.NotificationViewHolder&gt; {&#10;&#10;    private List&lt;StudentNotification&gt; notificationList;&#10;    private OnNotificationClickListener listener;&#10;&#10;    public interface OnNotificationClickListener {&#10;        void onNotificationClick(StudentNotification notification);&#10;    }&#10;&#10;    public StudentNotificationAdapter(List&lt;StudentNotification&gt; notificationList, OnNotificationClickListener listener) {&#10;        this.notificationList = notificationList;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public NotificationViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_student_notification, parent, false);&#10;        return new NotificationViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull NotificationViewHolder holder, int position) {&#10;        StudentNotification notification = notificationList.get(position);&#10;        holder.bind(notification);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return notificationList.size();&#10;    }&#10;&#10;    public class NotificationViewHolder extends RecyclerView.ViewHolder {&#10;        private CardView cardNotification;&#10;        private TextView tvTitle;&#10;        private TextView tvMessage;&#10;        private TextView tvTimeAgo;&#10;        private TextView tvCourseName;&#10;        private View viewUnreadIndicator;&#10;&#10;        public NotificationViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardNotification = itemView.findViewById(R.id.card_notification);&#10;            tvTitle = itemView.findViewById(R.id.tv_title);&#10;            tvMessage = itemView.findViewById(R.id.tv_message);&#10;            tvTimeAgo = itemView.findViewById(R.id.tv_time_ago);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            viewUnreadIndicator = itemView.findViewById(R.id.view_unread_indicator);&#10;&#10;            cardNotification.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onNotificationClick(notificationList.get(getAdapterPosition()));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(StudentNotification notification) {&#10;            tvTitle.setText(notification.getTitle());&#10;            tvMessage.setText(notification.getMessage());&#10;            tvTimeAgo.setText(notification.getTimeAgo());&#10;            &#10;            if (notification.getCourseName() != null) {&#10;                tvCourseName.setText(notification.getCourseName());&#10;                tvCourseName.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvCourseName.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Hiển thị trạng thái đã đọc/chưa đọc&#10;            if (notification.isRead()) {&#10;                viewUnreadIndicator.setVisibility(View.GONE);&#10;                cardNotification.setAlpha(0.7f);&#10;                tvTitle.setTextColor(itemView.getContext().getColor(android.R.color.darker_gray));&#10;            } else {&#10;                viewUnreadIndicator.setVisibility(View.VISIBLE);&#10;                cardNotification.setAlpha(1.0f);&#10;                tvTitle.setTextColor(itemView.getContext().getColor(android.R.color.black));&#10;            }&#10;&#10;            // Màu sắc theo loại thông báo&#10;            if (&quot;feedback_response&quot;.equals(notification.getType())) {&#10;                viewUnreadIndicator.setBackgroundColor(&#10;                    itemView.getContext().getColor(android.R.color.holo_green_dark)&#10;                );&#10;            } else {&#10;                viewUnreadIndicator.setBackgroundColor(&#10;                    itemView.getContext().getColor(android.R.color.holo_blue_dark)&#10;                );&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentProgressDetailActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/StudentProgressDetailActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentProgressDetailActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TextView tvStudentName, tvCourseTitle, tvStudentEmail;&#10;    private TextView tvLessonProgress, tvEnrollmentDate, tvNoTestResults, tvNoLessons;&#10;    private ProgressBar progressBarLessons;&#10;    private LinearLayout layoutTestResults;&#10;    private RecyclerView rvLessonProgress;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String studentId, studentName, courseId, courseName;&#10;    private List&lt;LessonProgressItem&gt; lessonProgressList;&#10;    private LessonProgressAdapter progressAdapter;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_progress_detail);&#10;&#10;        // Get data from intent&#10;        studentId = getIntent().getStringExtra(&quot;studentId&quot;);&#10;        studentName = getIntent().getStringExtra(&quot;studentName&quot;);&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Received data:&quot;);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;StudentId: &quot; + studentId);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;StudentName: &quot; + studentName);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;CourseId: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;CourseName: &quot; + courseName);&#10;&#10;        if (studentId == null || courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin học viên hoặc khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        lessonProgressList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadStudentInfo();&#10;        loadProgressData();&#10;        loadTestResults();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvStudentName = findViewById(R.id.tv_student_name);&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        tvStudentEmail = findViewById(R.id.tv_student_email);&#10;        tvLessonProgress = findViewById(R.id.tv_lesson_progress);&#10;        tvEnrollmentDate = findViewById(R.id.tv_enrollment_date);&#10;        tvNoTestResults = findViewById(R.id.tv_no_test_results);&#10;        tvNoLessons = findViewById(R.id.tv_no_lessons);&#10;        progressBarLessons = findViewById(R.id.progress_bar_lessons);&#10;        layoutTestResults = findViewById(R.id.layout_test_results);&#10;        rvLessonProgress = findViewById(R.id.rv_lesson_progress);&#10;&#10;        // Set initial data&#10;        if (studentName != null) {&#10;            tvStudentName.setText(studentName);&#10;        }&#10;        if (courseName != null) {&#10;            tvCourseTitle.setText(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chi tiết tiến độ học viên&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        progressAdapter = new LessonProgressAdapter(lessonProgressList);&#10;        rvLessonProgress.setLayoutManager(new LinearLayoutManager(this));&#10;        rvLessonProgress.setAdapter(progressAdapter);&#10;    }&#10;&#10;    private void loadStudentInfo() {&#10;        // Load thông tin chi tiết của học viên&#10;        db.collection(&quot;users&quot;)&#10;                .whereEqualTo(&quot;id&quot;, studentId)&#10;                .whereEqualTo(&quot;role&quot;, &quot;student&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        QueryDocumentSnapshot studentDoc = (QueryDocumentSnapshot) queryDocumentSnapshots.getDocuments().get(0);&#10;                        String email = studentDoc.getString(&quot;email&quot;);&#10;                        String name = studentDoc.getString(&quot;name&quot;);&#10;&#10;                        if (email != null) {&#10;                            tvStudentEmail.setText(email);&#10;                        }&#10;                        if (name != null &amp;&amp; tvStudentName != null) {&#10;                            tvStudentName.setText(name);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Student info loaded: &quot; + name + &quot; (&quot; + email + &quot;)&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading student info&quot;, e);&#10;                });&#10;&#10;        // Load ngày đăng ký từ enrollments&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, studentId)&#10;                .whereEqualTo(&quot;courseID&quot;, courseId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        QueryDocumentSnapshot enrollmentDoc = (QueryDocumentSnapshot) queryDocumentSnapshots.getDocuments().get(0);&#10;                        com.google.firebase.Timestamp enrollmentDate = enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;);&#10;&#10;                        if (enrollmentDate != null) {&#10;                            String dateStr = android.text.format.DateFormat.format(&quot;dd/MM/yyyy&quot;, enrollmentDate.toDate()).toString();&#10;                            tvEnrollmentDate.setText(&quot;Ngày đăng ký: &quot; + dateStr);&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading enrollment date&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void loadProgressData() {&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Loading progress data for student: &quot; + studentId + &quot;, course: &quot; + courseId);&#10;&#10;        // Load tất cả lessons của khóa học&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    List&lt;Lesson&gt; allLessons = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        Lesson lesson = document.toObject(Lesson.class);&#10;                        lesson.setId(document.getId());&#10;                        allLessons.add(lesson);&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Found &quot; + allLessons.size() + &quot; lessons&quot;);&#10;&#10;                    if (allLessons.isEmpty()) {&#10;                        tvNoLessons.setVisibility(View.VISIBLE);&#10;                        rvLessonProgress.setVisibility(View.GONE);&#10;                        updateProgressSummary(0, 0);&#10;                        return;&#10;                    }&#10;&#10;                    // Load tiến độ của học viên cho từng bài học&#10;                    loadLessonProgress(allLessons);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lessons&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải danh sách bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadLessonProgress(List&lt;Lesson&gt; allLessons) {&#10;        // Load lesson_progress từ Firebase&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    Map&lt;String, Boolean&gt; progressMap = new HashMap&lt;&gt;();&#10;                    Map&lt;String, com.google.firebase.Timestamp&gt; completionTimeMap = new HashMap&lt;&gt;();&#10;&#10;                    // Tạo map tiến độ hoàn thành&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        String lessonId = doc.getString(&quot;lessonId&quot;);&#10;                        Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                        com.google.firebase.Timestamp completedAt = doc.getTimestamp(&quot;completedAt&quot;);&#10;&#10;                        if (lessonId != null &amp;&amp; isCompleted != null) {&#10;                            progressMap.put(lessonId, isCompleted);&#10;                            if (completedAt != null) {&#10;                                completionTimeMap.put(lessonId, completedAt);&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Tạo danh sách LessonProgressItem&#10;                    lessonProgressList.clear();&#10;                    int completedCount = 0;&#10;&#10;                    for (Lesson lesson : allLessons) {&#10;                        LessonProgressItem progressItem = new LessonProgressItem();&#10;                        progressItem.setLessonId(lesson.getId());&#10;                        progressItem.setLessonTitle(lesson.getTitle());&#10;                        progressItem.setLessonOrder(lesson.getOrder());&#10;&#10;                        boolean isCompleted = progressMap.getOrDefault(lesson.getId(), false);&#10;                        progressItem.setCompleted(isCompleted);&#10;&#10;                        if (isCompleted) {&#10;                            completedCount++;&#10;                            com.google.firebase.Timestamp completedAt = completionTimeMap.get(lesson.getId());&#10;                            if (completedAt != null) {&#10;                                String dateStr = android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, completedAt.toDate()).toString();&#10;                                progressItem.setCompletedAt(dateStr);&#10;                            }&#10;                        }&#10;&#10;                        lessonProgressList.add(progressItem);&#10;                    }&#10;&#10;                    // Sắp xếp theo thứ tự bài học&#10;                    lessonProgressList.sort((a, b) -&gt; Integer.compare(a.getLessonOrder(), b.getLessonOrder()));&#10;&#10;                    // Cập nhật UI&#10;                    updateProgressSummary(completedCount, allLessons.size());&#10;                    progressAdapter.notifyDataSetChanged();&#10;&#10;                    if (lessonProgressList.isEmpty()) {&#10;                        tvNoLessons.setVisibility(View.VISIBLE);&#10;                        rvLessonProgress.setVisibility(View.GONE);&#10;                    } else {&#10;                        tvNoLessons.setVisibility(View.GONE);&#10;                        rvLessonProgress.setVisibility(View.VISIBLE);&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Progress loaded: &quot; + completedCount + &quot;/&quot; + allLessons.size() + &quot; completed&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lesson progress&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải tiến độ học tập: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateProgressSummary(int completedLessons, int totalLessons) {&#10;        int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;        tvLessonProgress.setText(completedLessons + &quot;/&quot; + totalLessons + &quot; (&quot; + progressPercentage + &quot;%)&quot;);&#10;        progressBarLessons.setMax(100);&#10;        progressBarLessons.setProgress(progressPercentage);&#10;&#10;        // Đổi màu progress bar theo tiến độ&#10;        if (progressPercentage == 100) {&#10;            progressBarLessons.getProgressDrawable().setColorFilter(&#10;                getColor(android.R.color.holo_green_dark), android.graphics.PorterDuff.Mode.SRC_IN);&#10;        } else if (progressPercentage &gt;= 50) {&#10;            progressBarLessons.getProgressDrawable().setColorFilter(&#10;                getColor(android.R.color.holo_orange_light), android.graphics.PorterDuff.Mode.SRC_IN);&#10;        } else {&#10;            progressBarLessons.getProgressDrawable().setColorFilter(&#10;                getColor(android.R.color.holo_red_light), android.graphics.PorterDuff.Mode.SRC_IN);&#10;        }&#10;    }&#10;&#10;    private void loadTestResults() {&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Loading test results for student: &quot; + studentId + &quot;, course: &quot; + courseId);&#10;&#10;        // Load kết quả bài kiểm tra từ collection &quot;testResults&quot;&#10;        db.collection(&quot;testResults&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;No test results found&quot;);&#10;                        showNoTestResults();&#10;                        return;&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; test results&quot;);&#10;&#10;                    // Ẩn thông báo &quot;chưa làm bài kiểm tra&quot;&#10;                    tvNoTestResults.setVisibility(View.GONE);&#10;                    layoutTestResults.setVisibility(View.VISIBLE);&#10;                    layoutTestResults.removeAllViews();&#10;&#10;                    // Sắp xếp kết quả theo thời gian (mới nhất trước)&#10;                    List&lt;QueryDocumentSnapshot&gt; sortedResults = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        sortedResults.add(doc);&#10;                    }&#10;                    sortedResults.sort((a, b) -&gt; {&#10;                        com.google.firebase.Timestamp timeA = a.getTimestamp(&quot;completedAt&quot;);&#10;                        com.google.firebase.Timestamp timeB = b.getTimestamp(&quot;completedAt&quot;);&#10;                        if (timeA == null &amp;&amp; timeB == null) return 0;&#10;                        if (timeA == null) return 1;&#10;                        if (timeB == null) return -1;&#10;                        return timeB.compareTo(timeA); // Mới nhất trước&#10;                    });&#10;&#10;                    // Hiển thị từng kết quả bài kiểm tra&#10;                    for (int i = 0; i &lt; sortedResults.size(); i++) {&#10;                        QueryDocumentSnapshot doc = sortedResults.get(i);&#10;                        addTestResultView(doc, i + 1);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading test results&quot;, e);&#10;                    showNoTestResults();&#10;                    Toast.makeText(this, &quot;Lỗi tải kết quả bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void addTestResultView(QueryDocumentSnapshot testResult, int attemptNumber) {&#10;        // Tạo view cho mỗi kết quả bài kiểm tra&#10;        View testResultView = getLayoutInflater().inflate(android.R.layout.simple_list_item_2, layoutTestResults, false);&#10;&#10;        TextView text1 = testResultView.findViewById(android.R.id.text1);&#10;        TextView text2 = testResultView.findViewById(android.R.id.text2);&#10;&#10;        // Lấy dữ liệu từ document&#10;        Object scoreObj = testResult.get(&quot;score&quot;);&#10;        Object correctAnswersObj = testResult.get(&quot;correctAnswers&quot;);&#10;        Object totalQuestionsObj = testResult.get(&quot;totalQuestions&quot;);&#10;        com.google.firebase.Timestamp completedAt = testResult.getTimestamp(&quot;completedAt&quot;);&#10;&#10;        // Xử lý score&#10;        double score = 0;&#10;        if (scoreObj instanceof Number) {&#10;            score = ((Number) scoreObj).doubleValue();&#10;        }&#10;&#10;        // Xử lý correctAnswers và totalQuestions&#10;        int correctAnswers = 0;&#10;        int totalQuestions = 0;&#10;&#10;        if (correctAnswersObj instanceof Number) {&#10;            correctAnswers = ((Number) correctAnswersObj).intValue();&#10;        }&#10;        if (totalQuestionsObj instanceof Number) {&#10;            totalQuestions = ((Number) totalQuestionsObj).intValue();&#10;        }&#10;&#10;        // Xử lý thời gian&#10;        String timeStr = &quot;Thời gian: --&quot;;&#10;        if (completedAt != null) {&#10;            timeStr = &quot;Thời gian: &quot; + android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, completedAt.toDate()).toString();&#10;        }&#10;&#10;        // Thiết lập nội dung&#10;        String title = &quot;Lần &quot; + attemptNumber + &quot;: &quot; + String.format(&quot;%.1f/100 điểm&quot;, score);&#10;        if (totalQuestions &gt; 0) {&#10;            title += &quot; (&quot; + correctAnswers + &quot;/&quot; + totalQuestions + &quot; câu đúng)&quot;;&#10;        }&#10;&#10;        text1.setText(title);&#10;        text1.setTextSize(16);&#10;        text1.setTextStyle(android.graphics.Typeface.BOLD);&#10;&#10;        text2.setText(timeStr);&#10;        text2.setTextSize(14);&#10;&#10;        // Đổi màu theo điểm số&#10;        if (score &gt;= 80) {&#10;            text1.setTextColor(getColor(android.R.color.holo_green_dark));&#10;        } else if (score &gt;= 60) {&#10;            text1.setTextColor(getColor(android.R.color.holo_orange_dark));&#10;        } else {&#10;            text1.setTextColor(getColor(android.R.color.holo_red_dark));&#10;        }&#10;&#10;        // Thêm margin&#10;        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT&#10;        );&#10;        params.setMargins(0, 0, 0, 16);&#10;        testResultView.setLayoutParams(params);&#10;&#10;        layoutTestResults.addView(testResultView);&#10;&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Added test result: &quot; + score + &quot; points&quot;);&#10;    }&#10;&#10;    private void showNoTestResults() {&#10;        tvNoTestResults.setVisibility(View.VISIBLE);&#10;        layoutTestResults.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // Inner class for lesson progress item&#10;    public static class LessonProgressItem {&#10;        private String lessonId;&#10;        private String lessonTitle;&#10;        private int lessonOrder;&#10;        private boolean isCompleted;&#10;        private String completedAt;&#10;&#10;        // Getters and setters&#10;        public String getLessonId() { return lessonId; }&#10;        public void setLessonId(String lessonId) { this.lessonId = lessonId; }&#10;        public String getLessonTitle() { return lessonTitle; }&#10;        public void setLessonTitle(String lessonTitle) { this.lessonTitle = lessonTitle; }&#10;        public int getLessonOrder() { return lessonOrder; }&#10;        public void setLessonOrder(int lessonOrder) { this.lessonOrder = lessonOrder; }&#10;        public boolean isCompleted() { return isCompleted; }&#10;        public void setCompleted(boolean completed) { isCompleted = completed; }&#10;        public String getCompletedAt() { return completedAt; }&#10;        public void setCompletedAt(String completedAt) { this.completedAt = completedAt; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class StudentProgressDetailActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TextView tvStudentName, tvCourseTitle, tvStudentEmail;&#10;    private TextView tvLessonProgress, tvEnrollmentDate, tvNoTestResults, tvNoLessons;&#10;    private ProgressBar progressBarLessons;&#10;    private LinearLayout layoutTestResults;&#10;    private RecyclerView rvLessonProgress;&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private String studentId, studentName, courseId, courseName;&#10;    private List&lt;LessonProgressItem&gt; lessonProgressList;&#10;    private LessonProgressAdapter progressAdapter;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_student_progress_detail);&#10;&#10;        // Get data from intent&#10;        studentId = getIntent().getStringExtra(&quot;studentId&quot;);&#10;        studentName = getIntent().getStringExtra(&quot;studentName&quot;);&#10;        courseId = getIntent().getStringExtra(&quot;courseId&quot;);&#10;        courseName = getIntent().getStringExtra(&quot;courseName&quot;);&#10;&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Received data:&quot;);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;StudentId: &quot; + studentId);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;StudentName: &quot; + studentName);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;CourseId: &quot; + courseId);&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;CourseName: &quot; + courseName);&#10;&#10;        if (studentId == null || courseId == null) {&#10;            Toast.makeText(this, &quot;Lỗi: Không tìm thấy thông tin học viên hoặc khóa học&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        lessonProgressList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadStudentInfo();&#10;        loadProgressData();&#10;        loadTestResults();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvStudentName = findViewById(R.id.tv_student_name);&#10;        tvCourseTitle = findViewById(R.id.tv_course_title);&#10;        tvStudentEmail = findViewById(R.id.tv_student_email);&#10;        tvLessonProgress = findViewById(R.id.tv_lesson_progress);&#10;        tvEnrollmentDate = findViewById(R.id.tv_enrollment_date);&#10;        tvNoTestResults = findViewById(R.id.tv_no_test_results);&#10;        tvNoLessons = findViewById(R.id.tv_no_lessons);&#10;        progressBarLessons = findViewById(R.id.progress_bar_lessons);&#10;        layoutTestResults = findViewById(R.id.layout_test_results);&#10;        rvLessonProgress = findViewById(R.id.rv_lesson_progress);&#10;&#10;        // Set initial data&#10;        if (studentName != null) {&#10;            tvStudentName.setText(studentName);&#10;        }&#10;        if (courseName != null) {&#10;            tvCourseTitle.setText(courseName);&#10;        }&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Chi tiết tiến độ học viên&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        progressAdapter = new LessonProgressAdapter(lessonProgressList);&#10;        rvLessonProgress.setLayoutManager(new LinearLayoutManager(this));&#10;        rvLessonProgress.setAdapter(progressAdapter);&#10;    }&#10;&#10;    private void loadStudentInfo() {&#10;        // Load thông tin chi tiết của học viên&#10;        db.collection(&quot;users&quot;)&#10;                .whereEqualTo(&quot;id&quot;, studentId)&#10;                .whereEqualTo(&quot;role&quot;, &quot;student&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        QueryDocumentSnapshot studentDoc = (QueryDocumentSnapshot) queryDocumentSnapshots.getDocuments().get(0);&#10;                        String email = studentDoc.getString(&quot;email&quot;);&#10;                        String name = studentDoc.getString(&quot;name&quot;);&#10;&#10;                        if (email != null) {&#10;                            tvStudentEmail.setText(email);&#10;                        }&#10;                        if (name != null &amp;&amp; tvStudentName != null) {&#10;                            tvStudentName.setText(name);&#10;                        }&#10;&#10;                        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Student info loaded: &quot; + name + &quot; (&quot; + email + &quot;)&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading student info&quot;, e);&#10;                });&#10;&#10;        // Load ngày đăng ký từ enrollments&#10;        db.collection(&quot;enrollments&quot;)&#10;                .whereEqualTo(&quot;studentID&quot;, studentId)&#10;                .whereEqualTo(&quot;courseID&quot;, courseId)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (!queryDocumentSnapshots.isEmpty()) {&#10;                        QueryDocumentSnapshot enrollmentDoc = (QueryDocumentSnapshot) queryDocumentSnapshots.getDocuments().get(0);&#10;                        com.google.firebase.Timestamp enrollmentDate = enrollmentDoc.getTimestamp(&quot;enrollmentDate&quot;);&#10;&#10;                        if (enrollmentDate != null) {&#10;                            String dateStr = android.text.format.DateFormat.format(&quot;dd/MM/yyyy&quot;, enrollmentDate.toDate()).toString();&#10;                            tvEnrollmentDate.setText(&quot;Ngày đăng ký: &quot; + dateStr);&#10;                        }&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading enrollment date&quot;, e);&#10;                });&#10;    }&#10;&#10;    private void loadProgressData() {&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Loading progress data for student: &quot; + studentId + &quot;, course: &quot; + courseId);&#10;&#10;        // Load tất cả lessons của khóa học&#10;        db.collection(&quot;lessons&quot;)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    List&lt;Lesson&gt; allLessons = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        Lesson lesson = document.toObject(Lesson.class);&#10;                        lesson.setId(document.getId());&#10;                        allLessons.add(lesson);&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Found &quot; + allLessons.size() + &quot; lessons&quot;);&#10;&#10;                    if (allLessons.isEmpty()) {&#10;                        tvNoLessons.setVisibility(View.VISIBLE);&#10;                        rvLessonProgress.setVisibility(View.GONE);&#10;                        updateProgressSummary(0, 0);&#10;                        return;&#10;                    }&#10;&#10;                    // Load tiến độ của học viên cho từng bài học&#10;                    loadLessonProgress(allLessons);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lessons&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải danh sách bài học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadLessonProgress(List&lt;Lesson&gt; allLessons) {&#10;        // Load lesson_progress từ Firebase&#10;        db.collection(&quot;lesson_progress&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    Map&lt;String, Boolean&gt; progressMap = new HashMap&lt;&gt;();&#10;                    Map&lt;String, com.google.firebase.Timestamp&gt; completionTimeMap = new HashMap&lt;&gt;();&#10;&#10;                    // Tạo map tiến độ hoàn thành&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        String lessonId = doc.getString(&quot;lessonId&quot;);&#10;                        Boolean isCompleted = doc.getBoolean(&quot;isCompleted&quot;);&#10;                        com.google.firebase.Timestamp completedAt = doc.getTimestamp(&quot;completedAt&quot;);&#10;&#10;                        if (lessonId != null &amp;&amp; isCompleted != null) {&#10;                            progressMap.put(lessonId, isCompleted);&#10;                            if (completedAt != null) {&#10;                                completionTimeMap.put(lessonId, completedAt);&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Tạo danh sách LessonProgressItem&#10;                    lessonProgressList.clear();&#10;                    int completedCount = 0;&#10;&#10;                    for (Lesson lesson : allLessons) {&#10;                        LessonProgressItem progressItem = new LessonProgressItem();&#10;                        progressItem.setLessonId(lesson.getId());&#10;                        progressItem.setLessonTitle(lesson.getTitle());&#10;                        progressItem.setLessonOrder(lesson.getOrder());&#10;&#10;                        boolean isCompleted = progressMap.getOrDefault(lesson.getId(), false);&#10;                        progressItem.setCompleted(isCompleted);&#10;&#10;                        if (isCompleted) {&#10;                            completedCount++;&#10;                            com.google.firebase.Timestamp completedAt = completionTimeMap.get(lesson.getId());&#10;                            if (completedAt != null) {&#10;                                String dateStr = android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, completedAt.toDate()).toString();&#10;                                progressItem.setCompletedAt(dateStr);&#10;                            }&#10;                        }&#10;&#10;                        lessonProgressList.add(progressItem);&#10;                    }&#10;&#10;                    // Sắp xếp theo thứ tự bài học&#10;                    lessonProgressList.sort((a, b) -&gt; Integer.compare(a.getLessonOrder(), b.getLessonOrder()));&#10;&#10;                    // Cập nhật UI&#10;                    updateProgressSummary(completedCount, allLessons.size());&#10;                    progressAdapter.notifyDataSetChanged();&#10;&#10;                    if (lessonProgressList.isEmpty()) {&#10;                        tvNoLessons.setVisibility(View.VISIBLE);&#10;                        rvLessonProgress.setVisibility(View.GONE);&#10;                    } else {&#10;                        tvNoLessons.setVisibility(View.GONE);&#10;                        rvLessonProgress.setVisibility(View.VISIBLE);&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Progress loaded: &quot; + completedCount + &quot;/&quot; + allLessons.size() + &quot; completed&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading lesson progress&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải tiến độ học tập: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void updateProgressSummary(int completedLessons, int totalLessons) {&#10;        int progressPercentage = totalLessons &gt; 0 ? (completedLessons * 100) / totalLessons : 0;&#10;&#10;        tvLessonProgress.setText(completedLessons + &quot;/&quot; + totalLessons + &quot; (&quot; + progressPercentage + &quot;%)&quot;);&#10;        progressBarLessons.setMax(100);&#10;        progressBarLessons.setProgress(progressPercentage);&#10;&#10;        // Đổi màu progress bar theo tiến độ&#10;        if (progressPercentage == 100) {&#10;            progressBarLessons.getProgressDrawable().setColorFilter(&#10;                getColor(android.R.color.holo_green_dark), android.graphics.PorterDuff.Mode.SRC_IN);&#10;        } else if (progressPercentage &gt;= 50) {&#10;            progressBarLessons.getProgressDrawable().setColorFilter(&#10;                getColor(android.R.color.holo_orange_light), android.graphics.PorterDuff.Mode.SRC_IN);&#10;        } else {&#10;            progressBarLessons.getProgressDrawable().setColorFilter(&#10;                getColor(android.R.color.holo_red_light), android.graphics.PorterDuff.Mode.SRC_IN);&#10;        }&#10;    }&#10;&#10;    private void loadTestResults() {&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Loading test results for student: &quot; + studentId + &quot;, course: &quot; + courseId);&#10;&#10;        // Load kết quả bài kiểm tra từ collection &quot;testResults&quot;&#10;        db.collection(&quot;testResults&quot;)&#10;                .whereEqualTo(&quot;studentId&quot;, studentId)&#10;                .whereEqualTo(&quot;courseId&quot;, courseId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    if (queryDocumentSnapshots.isEmpty()) {&#10;                        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;No test results found&quot;);&#10;                        showNoTestResults();&#10;                        return;&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Found &quot; + queryDocumentSnapshots.size() + &quot; test results&quot;);&#10;&#10;                    // Ẩn thông báo &quot;chưa làm bài kiểm tra&quot;&#10;                    tvNoTestResults.setVisibility(View.GONE);&#10;                    layoutTestResults.setVisibility(View.VISIBLE);&#10;                    layoutTestResults.removeAllViews();&#10;&#10;                    // Sắp xếp kết quả theo thời gian (mới nhất trước)&#10;                    List&lt;QueryDocumentSnapshot&gt; sortedResults = new ArrayList&lt;&gt;();&#10;                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {&#10;                        sortedResults.add(doc);&#10;                    }&#10;                    sortedResults.sort((a, b) -&gt; {&#10;                        com.google.firebase.Timestamp timeA = a.getTimestamp(&quot;completedAt&quot;);&#10;                        com.google.firebase.Timestamp timeB = b.getTimestamp(&quot;completedAt&quot;);&#10;                        if (timeA == null &amp;&amp; timeB == null) return 0;&#10;                        if (timeA == null) return 1;&#10;                        if (timeB == null) return -1;&#10;                        return timeB.compareTo(timeA); // Mới nhất trước&#10;                    });&#10;&#10;                    // Hiển thị từng kết quả bài kiểm tra&#10;                    for (int i = 0; i &lt; sortedResults.size(); i++) {&#10;                        QueryDocumentSnapshot doc = sortedResults.get(i);&#10;                        addTestResultView(doc, i + 1);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;StudentProgressDetail&quot;, &quot;Error loading test results&quot;, e);&#10;                    showNoTestResults();&#10;                    Toast.makeText(this, &quot;Lỗi tải kết quả bài kiểm tra: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void addTestResultView(QueryDocumentSnapshot testResult, int attemptNumber) {&#10;        // Tạo view cho mỗi kết quả bài kiểm tra&#10;        View testResultView = getLayoutInflater().inflate(android.R.layout.simple_list_item_2, layoutTestResults, false);&#10;&#10;        TextView text1 = testResultView.findViewById(android.R.id.text1);&#10;        TextView text2 = testResultView.findViewById(android.R.id.text2);&#10;&#10;        // Lấy dữ liệu từ document&#10;        Object scoreObj = testResult.get(&quot;score&quot;);&#10;        Object correctAnswersObj = testResult.get(&quot;correctAnswers&quot;);&#10;        Object totalQuestionsObj = testResult.get(&quot;totalQuestions&quot;);&#10;        com.google.firebase.Timestamp completedAt = testResult.getTimestamp(&quot;completedAt&quot;);&#10;&#10;        // Xử lý score&#10;        double score = 0;&#10;        if (scoreObj instanceof Number) {&#10;            score = ((Number) scoreObj).doubleValue();&#10;        }&#10;&#10;        // Xử lý correctAnswers và totalQuestions&#10;        int correctAnswers = 0;&#10;        int totalQuestions = 0;&#10;&#10;        if (correctAnswersObj instanceof Number) {&#10;            correctAnswers = ((Number) correctAnswersObj).intValue();&#10;        }&#10;        if (totalQuestionsObj instanceof Number) {&#10;            totalQuestions = ((Number) totalQuestionsObj).intValue();&#10;        }&#10;&#10;        // Xử lý thời gian&#10;        String timeStr = &quot;Thời gian: --&quot;;&#10;        if (completedAt != null) {&#10;            timeStr = &quot;Thời gian: &quot; + android.text.format.DateFormat.format(&quot;dd/MM/yyyy HH:mm&quot;, completedAt.toDate()).toString();&#10;        }&#10;&#10;        // Thiết lập nội dung&#10;        String title = &quot;Lần &quot; + attemptNumber + &quot;: &quot; + String.format(&quot;%.1f/100 điểm&quot;, score);&#10;        if (totalQuestions &gt; 0) {&#10;            title += &quot; (&quot; + correctAnswers + &quot;/&quot; + totalQuestions + &quot; câu đúng)&quot;;&#10;        }&#10;&#10;        text1.setText(title);&#10;        text1.setTextSize(16);&#10;        text1.setTypeface(null, android.graphics.Typeface.BOLD); // Sửa từ setTextStyle thành setTypeface&#10;&#10;        text2.setText(timeStr);&#10;        text2.setTextSize(14);&#10;&#10;        // Đổi màu theo điểm số&#10;        if (score &gt;= 80) {&#10;            text1.setTextColor(getColor(android.R.color.holo_green_dark));&#10;        } else if (score &gt;= 60) {&#10;            text1.setTextColor(getColor(android.R.color.holo_orange_dark));&#10;        } else {&#10;            text1.setTextColor(getColor(android.R.color.holo_red_dark));&#10;        }&#10;&#10;        // Thêm margin&#10;        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT,&#10;            LinearLayout.LayoutParams.WRAP_CONTENT&#10;        );&#10;        params.setMargins(0, 0, 0, 16);&#10;        testResultView.setLayoutParams(params);&#10;&#10;        layoutTestResults.addView(testResultView);&#10;&#10;        android.util.Log.d(&quot;StudentProgressDetail&quot;, &quot;Added test result: &quot; + score + &quot; points&quot;);&#10;    }&#10;&#10;    private void showNoTestResults() {&#10;        tvNoTestResults.setVisibility(View.VISIBLE);&#10;        layoutTestResults.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    // Inner class for lesson progress item&#10;    public static class LessonProgressItem {&#10;        private String lessonId;&#10;        private String lessonTitle;&#10;        private int lessonOrder;&#10;        private boolean isCompleted;&#10;        private String completedAt;&#10;&#10;        // Getters and setters&#10;        public String getLessonId() { return lessonId; }&#10;        public void setLessonId(String lessonId) { this.lessonId = lessonId; }&#10;        public String getLessonTitle() { return lessonTitle; }&#10;        public void setLessonTitle(String lessonTitle) { this.lessonTitle = lessonTitle; }&#10;        public int getLessonOrder() { return lessonOrder; }&#10;        public void setLessonOrder(int lessonOrder) { this.lessonOrder = lessonOrder; }&#10;        public boolean isCompleted() { return isCompleted; }&#10;        public void setCompleted(boolean completed) { isCompleted = completed; }&#10;        public String getCompletedAt() { return completedAt; }&#10;        public void setCompletedAt(String completedAt) { this.completedAt = completedAt; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherDashboardActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherDashboardActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.utils.RealtimeManager;&#10;&#10;public class TeacherDashboardActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TextView tvWelcome, tvCoursesCount, tvStudentsCount, tvPendingRequestsCount;&#10;    private Button btnManageCourses, btnViewRequests, btnCreateQuiz, btnCreateCourse;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private RealtimeManager realtimeManager;&#10;    private String currentTeacherId; // Đổi từ currentTeacherName sang currentTeacherId&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_teacher_dashboard);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        loadDashboardData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvWelcome = findViewById(R.id.tv_welcome);&#10;        tvCoursesCount = findViewById(R.id.tv_courses_count);&#10;        tvStudentsCount = findViewById(R.id.tv_students_count);&#10;        tvPendingRequestsCount = findViewById(R.id.tv_pending_requests_count);&#10;&#10;        btnManageCourses = findViewById(R.id.btn_manage_courses);&#10;        btnViewRequests = findViewById(R.id.btn_view_requests);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnCreateCourse = findViewById(R.id.btn_create_course);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bảng điều khiển giáo viên&quot;);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        realtimeManager = RealtimeManager.getInstance();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnManageCourses.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseManagementActivity.class));&#10;        });&#10;&#10;        // Thêm click listener cho nút &quot;View Requests&quot;&#10;        btnViewRequests.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseRequestManagementActivity.class));&#10;        });&#10;&#10;        btnCreateQuiz.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, SelectCourseForQuizActivity.class));&#10;        });&#10;&#10;        // Nút &quot;Quản lý đăng ký&quot; - chuyển đến EnrollmentManagementActivity&#10;        btnCreateCourse.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, EnrollmentManagementActivity.class);&#10;            // Truyền teacherId để activity có thể lọc dữ liệu theo giáo viên&#10;            intent.putExtra(&quot;teacherId&quot;, currentTeacherId);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    private void loadDashboardData() {&#10;        String teacherId = mAuth.getCurrentUser().getUid();&#10;        currentTeacherId = teacherId; // Lưu teacherId trực tiếp&#10;&#10;        // Load teacher info&#10;        db.collection(&quot;users&quot;).document(teacherId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String fullName = documentSnapshot.getString(&quot;fullName&quot;);&#10;                        tvWelcome.setText(&quot;Xin chào, &quot; + fullName);&#10;&#10;                        // Load counts với teacherId&#10;                        loadCoursesCount(teacherId);&#10;                        loadStudentsCount(teacherId);&#10;                        setupRealTimePendingRequestsCount(); // Sử dụng teacherId&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Toast.makeText(this, &quot;Lỗi khi tải thông tin&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadCoursesCount(String teacherId) {&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int count = queryDocumentSnapshots.size();&#10;                    tvCoursesCount.setText(String.valueOf(count));&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    tvCoursesCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    private void loadStudentsCount(String teacherId) {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;Starting loadStudentsCount for teacherId: &quot; + teacherId);&#10;&#10;        // Kiểm tra tất cả enrollments trong database trước&#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(approvedRequests -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + approvedRequests.size() + &quot; approved requests total&quot;);&#10;&#10;                    if (approvedRequests.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;No approved requests found, setting students count to 0&quot;);&#10;                        tvStudentsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    // Lấy danh sách courseIds của teacher này&#10;                    db.collection(&quot;courses&quot;)&#10;                            .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .addOnSuccessListener(allEnrollments -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Total enrollments in database: &quot; + allEnrollments.size());&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : allEnrollments) {&#10;                        String courseID = doc.getString(&quot;courseID&quot;);&#10;                        String studentID = doc.getString(&quot;studentID&quot;);&#10;                        String fullName = doc.getString(&quot;fullName&quot;);&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Enrollment found - CourseID: &quot; + courseID + &quot;, StudentID: &quot; + studentID + &quot;, Name: &quot; + fullName);&#10;                            .addOnSuccessListener(teacherCourses -&gt; {&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Teacher has &quot; + teacherCourses.size() + &quot; courses&quot;);&#10;        // Lấy tất cả courses của teacher trước&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(courseSnapshots -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + courseSnapshots.size() + &quot; courses for teacher&quot;);&#10;                    if (courseSnapshots.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;No courses found, setting students count to 0&quot;);&#10;                        tvStudentsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;                    // Tạo Set để lưu unique studentID&#10;                    java.util.Set&lt;String&gt; uniqueStudentIds = new java.util.HashSet&lt;&gt;();&#10;                    java.util.concurrent.atomic.AtomicInteger coursesProcessed = new java.util.concurrent.atomic.AtomicInteger(0);&#10;                    int totalCourses = courseSnapshots.size();&#10;                    // Duyệt qua từng khóa học của teacher&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot courseDoc : courseSnapshots) {&#10;                        String courseId = courseDoc.getId();&#10;                        String courseName = courseDoc.getString(&quot;courseName&quot;);&#10;                        // Lấy enrollments cho khóa học này&#10;                        db.collection(&quot;enrollments&quot;)&#10;                                    // Kiểm tra xem đã xử lý hết tất cả courses chưa&#10;                                    if (coursesProcessed.incrementAndGet() &gt;= totalCourses) {&#10;                                        Log.d(&quot;TeacherDashboard&quot;, &quot;Finished processing all courses. Final unique students count: &quot; + uniqueStudentIds.size());&#10;                                        // Cập nhật UI với số lượng học viên unique&#10;                                        runOnUiThread(() -&gt; {&#10;                                            tvStudentsCount.setText(String.valueOf(uniqueStudentIds.size()));&#10;                                        });&#10;                                    }&#10;                                })&#10;                                .addOnFailureListener(e -&gt; {&#10;                                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading enrollments for course: &quot; + courseId, e);&#10;                                    if (coursesProcessed.incrementAndGet() &gt;= totalCourses) {&#10;                                        Log.d(&quot;TeacherDashboard&quot;, &quot;Finished processing all courses (with some errors). Final unique students count: &quot; + uniqueStudentIds.size());&#10;                                        runOnUiThread(() -&gt; {&#10;                                            tvStudentsCount.setText(String.valueOf(uniqueStudentIds.size()));&#10;                                });&#10;                    }&#10;&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading courses&quot;, e);&#10;                                int finalCount = uniqueStudentIds.size();&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Final unique students count for teacher: &quot; + finalCount);&#10;&#10;                                runOnUiThread(() -&gt; {&#10;                                    tvStudentsCount.setText(String.valueOf(finalCount));&#10;                                });&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading teacher courses&quot;, e);&#10;                                tvStudentsCount.setText(&quot;0&quot;);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading approved requests&quot;, e);&#10;                    tvStudentsCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    // Sửa để hiển thị TẤT CẢ pending requests (không filter theo teacherId)&#10;    private void setupRealTimePendingRequestsCount() {&#10;        // Đơn giản hóa - đếm tất cả pending requests&#10;        db.collection(&quot;courseRequests&quot;)&#10;                                btnViewRequests.setText(&quot;Xem yêu cầu (&quot; + count + &quot;)&quot;);&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)&#10;                .addSnapshotListener((queryDocumentSnapshots, e) -&gt; {&#10;                    if (e != null) {&#10;                        Log.e(&quot;TeacherDashboard&quot;, &quot;Error listening to pending requests&quot;, e);&#10;                        tvPendingRequestsCount.setText(&quot;0&quot;);&#10;                        });&#10;                    }&#10;                });&#10;    }&#10;&#10;    // Thêm method debug để kiểm tra enrollments&#10;    private void debugEnrollments() {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;=== DEBUG: Checking all enrollments ===&quot;);&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(snapshots -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Total enrollments in database: &quot; + snapshots.size());&#10;&#10;                    if (snapshots.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;❌ NO ENROLLMENTS FOUND - This is why student count is 0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : snapshots) {&#10;                        String courseID = doc.getString(&quot;courseID&quot;);&#10;                        String studentID = doc.getString(&quot;studentID&quot;);&#10;                        String fullName = doc.getString(&quot;fullName&quot;);&#10;&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Enrollment: &quot; + fullName + &quot; → Course: &quot; + courseID + &quot; (StudentID: &quot; + studentID + &quot;)&quot;);&#10;        getMenuInflater().inflate(R.menu.teacher_toolbar_menu, menu);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error checking enrollments&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.teacher_dashboard_menu, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int id = item.getItemId();&#10;        &#10;        if (id == R.id.action_data_migration) {&#10;            // Mở tool migration dữ liệu&#10;            Intent intent = new Intent(this, DataMigrationActivity.class);&#10;            startActivity(intent);&#10;            return true;&#10;        } else if (id == R.id.action_logout) {&#10;            mAuth.signOut();&#10;            Intent intent = new Intent(this, MainActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return true;&#10;        }&#10;        &#10;        int itemId = item.getItemId();&#10;        if (itemId == R.id.action_logout) {&#10;            logout();&#10;        super.onResume();&#10;        // Refresh data khi quay lại activity&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Cleanup listeners khi destroy activity&#10;        if (realtimeManager != null) {&#10;            realtimeManager.removeAllListeners();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.vantinh.tienganh.utils.RealtimeManager;&#10;&#10;public class TeacherDashboardActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private TextView tvWelcome, tvCoursesCount, tvStudentsCount, tvPendingRequestsCount;&#10;    private LinearLayout btnManageCourses, btnViewRequests, btnCreateQuiz, btnCreateCourse, btnManageFeedback; // Thêm btnManageFeedback&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private RealtimeManager realtimeManager;&#10;    private String currentTeacherId; // Đổi từ currentTeacherName sang currentTeacherId&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_teacher_dashboard);&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        initFirebase();&#10;        loadDashboardData();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        tvWelcome = findViewById(R.id.tv_welcome);&#10;        tvCoursesCount = findViewById(R.id.tv_courses_count);&#10;        tvStudentsCount = findViewById(R.id.tv_students_count);&#10;        tvPendingRequestsCount = findViewById(R.id.tv_pending_requests_count);&#10;&#10;        btnManageCourses = findViewById(R.id.btn_manage_courses);&#10;        btnViewRequests = findViewById(R.id.btn_view_requests);&#10;        btnCreateQuiz = findViewById(R.id.btn_create_quiz);&#10;        btnCreateCourse = findViewById(R.id.btn_create_course);&#10;        btnManageFeedback = findViewById(R.id.btn_manage_feedback); // Khởi tạo btnManageFeedback&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Bảng điều khiển giáo viên&quot;);&#10;        }&#10;    }&#10;&#10;    private void initFirebase() {&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        realtimeManager = RealtimeManager.getInstance();&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnManageCourses.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseManagementActivity.class));&#10;        });&#10;&#10;        // Thêm click listener cho nút &quot;View Requests&quot;&#10;        btnViewRequests.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, CourseRequestManagementActivity.class));&#10;        });&#10;&#10;        btnCreateQuiz.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(this, SelectCourseForQuizActivity.class));&#10;        });&#10;&#10;        // Nút &quot;Quản lý đăng ký&quot; - chuyển đến EnrollmentStatusSelectionActivity&#10;        btnCreateCourse.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, EnrollmentStatusSelectionActivity.class);&#10;            // Truyền teacherId để activity có thể lọc dữ liệu theo giáo viên&#10;            intent.putExtra(&quot;teacherId&quot;, currentTeacherId);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Thêm sự kiện click cho btnManageFeedback&#10;        btnManageFeedback.setOnClickListener(v -&gt; {&#10;            // Mở activity quản lý phản hồi&#10;            startActivity(new Intent(this, TeacherFeedbackManagementActivity.class));&#10;        });&#10;    }&#10;&#10;    private void loadDashboardData() {&#10;        String teacherId = mAuth.getCurrentUser().getUid();&#10;        currentTeacherId = teacherId; // Lưu teacherId trực tiếp&#10;&#10;        // Thêm debug enrollments&#10;        debugEnrollments();&#10;&#10;        // Load teacher info&#10;        db.collection(&quot;users&quot;).document(teacherId)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        String fullName = documentSnapshot.getString(&quot;fullName&quot;);&#10;                        tvWelcome.setText(&quot;Xin chào, &quot; + fullName);&#10;&#10;                        // Load counts với teacherId&#10;                        loadCoursesCount(teacherId);&#10;                        loadStudentsCount(teacherId);&#10;                        setupRealTimePendingRequestsCount(); // Sử dụng teacherId&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Toast.makeText(this, &quot;Lỗi khi tải thông tin&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void loadCoursesCount(String teacherId) {&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    int count = queryDocumentSnapshots.size();&#10;                    tvCoursesCount.setText(String.valueOf(count));&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    tvCoursesCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    private void loadStudentsCount(String teacherId) {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;Starting loadStudentsCount for teacherId: &quot; + teacherId);&#10;&#10;        // Lấy tất cả approved requests từ courseRequests&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;approved&quot;)&#10;                .get()&#10;                .addOnSuccessListener(approvedRequests -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Found &quot; + approvedRequests.size() + &quot; approved requests total&quot;);&#10;&#10;                    if (approvedRequests.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;No approved requests found, setting students count to 0&quot;);&#10;                        tvStudentsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    // Lấy danh sách courseIds của teacher này&#10;                    db.collection(&quot;courses&quot;)&#10;                            .whereEqualTo(&quot;teacherId&quot;, teacherId)&#10;                            .get()&#10;                            .addOnSuccessListener(teacherCourses -&gt; {&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Teacher has &quot; + teacherCourses.size() + &quot; courses&quot;);&#10;&#10;                                // Tạo Set chứa courseIds của teacher&#10;                                java.util.Set&lt;String&gt; teacherCourseIds = new java.util.HashSet&lt;&gt;();&#10;                                for (com.google.firebase.firestore.QueryDocumentSnapshot courseDoc : teacherCourses) {&#10;                                    teacherCourseIds.add(courseDoc.getId());&#10;                                    Log.d(&quot;TeacherDashboard&quot;, &quot;Teacher course ID: &quot; + courseDoc.getId());&#10;                                }&#10;&#10;                                // Tạo Set để lưu unique studentId của teacher này&#10;                                java.util.Set&lt;String&gt; uniqueStudentIds = new java.util.HashSet&lt;&gt;();&#10;&#10;                                // Duyệt qua tất cả approved requests&#10;                                for (com.google.firebase.firestore.QueryDocumentSnapshot requestDoc : approvedRequests) {&#10;                                    String studentName = requestDoc.getString(&quot;studentName&quot;);&#10;                                    String studentId = requestDoc.getString(&quot;studentId&quot;);&#10;                                    String courseId = requestDoc.getString(&quot;courseId&quot;);&#10;                                    String courseName = requestDoc.getString(&quot;courseName&quot;);&#10;&#10;                                    Log.d(&quot;TeacherDashboard&quot;, &quot;Processing approved request - Student: &quot; + studentName +&#10;                                            &quot;, StudentId: &quot; + studentId + &quot;, CourseId: &quot; + courseId + &quot;, Course: &quot; + courseName);&#10;&#10;                                    // Chỉ đếm nếu courseId thuộc về teacher này&#10;                                    if (teacherCourseIds.contains(courseId)) {&#10;                                        if (studentId != null &amp;&amp; !studentId.isEmpty()) {&#10;                                            uniqueStudentIds.add(studentId);&#10;                                            Log.d(&quot;TeacherDashboard&quot;, &quot;Added studentId: &quot; + studentId +&#10;                                                    &quot; for teacher's course: &quot; + courseName + &quot;. Total unique students: &quot; + uniqueStudentIds.size());&#10;                                        }&#10;                                    } else {&#10;                                        Log.d(&quot;TeacherDashboard&quot;, &quot;Skipping request for course not belonging to this teacher: &quot; + courseName);&#10;                                    }&#10;                                }&#10;&#10;                                // Cập nhật UI&#10;                                int finalCount = uniqueStudentIds.size();&#10;                                Log.d(&quot;TeacherDashboard&quot;, &quot;Final unique students count for teacher: &quot; + finalCount);&#10;&#10;                                runOnUiThread(() -&gt; {&#10;                                    tvStudentsCount.setText(String.valueOf(finalCount));&#10;                                });&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading teacher courses&quot;, e);&#10;                                tvStudentsCount.setText(&quot;0&quot;);&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error loading approved requests&quot;, e);&#10;                    tvStudentsCount.setText(&quot;0&quot;);&#10;                });&#10;    }&#10;&#10;    // Sửa để hiển thị TẤT CẢ pending requests (không filter theo teacherId)&#10;    private void setupRealTimePendingRequestsCount() {&#10;        // Đơn giản hóa - đếm tất cả pending requests&#10;        db.collection(&quot;courseRequests&quot;)&#10;                .whereEqualTo(&quot;status&quot;, &quot;pending&quot;)&#10;                .addSnapshotListener((queryDocumentSnapshots, e) -&gt; {&#10;                    if (e != null) {&#10;                        Log.e(&quot;TeacherDashboard&quot;, &quot;Error listening to pending requests&quot;, e);&#10;                        tvPendingRequestsCount.setText(&quot;0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    if (queryDocumentSnapshots != null) {&#10;                        int count = queryDocumentSnapshots.size();&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Real-time update: &quot; + count + &quot; pending requests total&quot;);&#10;&#10;                        runOnUiThread(() -&gt; {&#10;                            tvPendingRequestsCount.setText(String.valueOf(count));&#10;&#10;                            if (count &gt; 0) {&#10;                                // Animation nhấp nháy khi có yêu cầu mới&#10;                                btnViewRequests.animate()&#10;                                        .scaleX(1.1f)&#10;                                        .scaleY(1.1f)&#10;                                        .setDuration(200)&#10;                                        .withEndAction(() -&gt; {&#10;                                            btnViewRequests.animate()&#10;                                                    .scaleX(1f)&#10;                                                    .scaleY(1f)&#10;                                                    .setDuration(200)&#10;                                                    .start();&#10;                                        })&#10;                                        .start();&#10;                            }&#10;                        });&#10;                    }&#10;                });&#10;    }&#10;&#10;    // Thêm method debug để kiểm tra enrollments&#10;    private void debugEnrollments() {&#10;        Log.d(&quot;TeacherDashboard&quot;, &quot;=== DEBUG: Checking all enrollments ===&quot;);&#10;&#10;        db.collection(&quot;enrollments&quot;)&#10;                .get()&#10;                .addOnSuccessListener(snapshots -&gt; {&#10;                    Log.d(&quot;TeacherDashboard&quot;, &quot;Total enrollments in database: &quot; + snapshots.size());&#10;&#10;                    if (snapshots.isEmpty()) {&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;❌ NO ENROLLMENTS FOUND - This is why student count is 0&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot doc : snapshots) {&#10;                        String courseID = doc.getString(&quot;courseID&quot;);&#10;                        String studentID = doc.getString(&quot;studentID&quot;);&#10;                        String fullName = doc.getString(&quot;fullName&quot;);&#10;&#10;                        Log.d(&quot;TeacherDashboard&quot;, &quot;Enrollment: &quot; + fullName + &quot; → Course: &quot; + courseID + &quot; (StudentID: &quot; + studentID + &quot;)&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    Log.e(&quot;TeacherDashboard&quot;, &quot;Error checking enrollments&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.teacher_dashboard_menu, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int id = item.getItemId();&#10;        &#10;        if (id == R.id.action_data_migration) {&#10;            // Mở tool migration dữ liệu&#10;            Intent intent = new Intent(this, DataMigrationActivity.class);&#10;            startActivity(intent);&#10;            return true;&#10;        } else if (id == R.id.action_logout) {&#10;            mAuth.signOut();&#10;            Intent intent = new Intent(this, MainActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return true;&#10;        }&#10;        &#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    private void logout() {&#10;        mAuth.signOut();&#10;        Intent intent = new Intent(this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh data khi quay lại activity&#10;        loadDashboardData();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Cleanup listeners khi destroy activity&#10;        if (realtimeManager != null) {&#10;            realtimeManager.removeAllListeners();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherFeedbackAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherFeedbackAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import java.util.List;&#10;&#10;public class TeacherFeedbackAdapter extends RecyclerView.Adapter&lt;TeacherFeedbackAdapter.FeedbackViewHolder&gt; {&#10;&#10;    private List&lt;Feedback&gt; feedbackList;&#10;    private OnFeedbackClickListener listener;&#10;&#10;    public interface OnFeedbackClickListener {&#10;        void onFeedbackClick(Feedback feedback);&#10;    }&#10;&#10;    public TeacherFeedbackAdapter(List&lt;Feedback&gt; feedbackList, OnFeedbackClickListener listener) {&#10;        this.feedbackList = feedbackList;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public FeedbackViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_teacher_feedback, parent, false);&#10;        return new FeedbackViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull FeedbackViewHolder holder, int position) {&#10;        Feedback feedback = feedbackList.get(position);&#10;        holder.bind(feedback);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return feedbackList.size();&#10;    }&#10;&#10;    public class FeedbackViewHolder extends RecyclerView.ViewHolder {&#10;        private CardView cardFeedback;&#10;        private TextView tvStudentName;&#10;        private TextView tvCourseName;&#10;        private TextView tvFeedbackDate;&#10;        private TextView tvFeedbackMessage;&#10;        private TextView tvStatus;&#10;        private TextView tvResponsePreview;&#10;&#10;        public FeedbackViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            cardFeedback = itemView.findViewById(R.id.card_feedback);&#10;            tvStudentName = itemView.findViewById(R.id.tv_student_name);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            tvFeedbackDate = itemView.findViewById(R.id.tv_feedback_date);&#10;            tvFeedbackMessage = itemView.findViewById(R.id.tv_feedback_message);&#10;            tvStatus = itemView.findViewById(R.id.tv_status);&#10;            tvResponsePreview = itemView.findViewById(R.id.tv_response_preview);&#10;&#10;            cardFeedback.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onFeedbackClick(feedbackList.get(getAdapterPosition()));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(Feedback feedback) {&#10;            tvStudentName.setText(feedback.getStudentName());&#10;            tvCourseName.setText(feedback.getCourseName());&#10;            tvFeedbackDate.setText(feedback.getFormattedDate());&#10;            &#10;            // Hiển thị preview của feedback message (tối đa 100 ký tự)&#10;            String message = feedback.getMessage();&#10;            if (message != null &amp;&amp; message.length() &gt; 100) {&#10;                message = message.substring(0, 100) + &quot;...&quot;;&#10;            }&#10;            tvFeedbackMessage.setText(message);&#10;&#10;            // Set status và màu sắc&#10;            boolean hasResponse = feedback.hasResponse();&#10;            if (hasResponse) {&#10;                tvStatus.setText(&quot;Đã phản hồi&quot;);&#10;                tvStatus.setTextColor(itemView.getContext().getColor(android.R.color.holo_green_dark));&#10;                tvStatus.setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        itemView.getContext().getColor(android.R.color.holo_green_light)&#10;                    )&#10;                );&#10;&#10;                // Hiển thị preview phản hồi&#10;                String response = feedback.getTeacherResponse();&#10;                if (response != null &amp;&amp; response.length() &gt; 80) {&#10;                    response = response.substring(0, 80) + &quot;...&quot;;&#10;                }&#10;                tvResponsePreview.setText(&quot;Phản hồi: &quot; + response);&#10;                tvResponsePreview.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvStatus.setText(&quot;Chưa phản hồi&quot;);&#10;                tvStatus.setTextColor(itemView.getContext().getColor(android.R.color.holo_orange_dark));&#10;                tvStatus.setBackgroundTintList(&#10;                    android.content.res.ColorStateList.valueOf(&#10;                        itemView.getContext().getColor(android.R.color.holo_orange_light)&#10;                    )&#10;                );&#10;                tvResponsePreview.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Style status TextView&#10;            tvStatus.setPadding(16, 8, 16, 8);&#10;            tvStatus.setTextSize(12);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherFeedbackManagementActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/TeacherFeedbackManagementActivity.java" />
              <option name="originalContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.Query;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TeacherFeedbackManagementActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvFeedbacks;&#10;    private LinearLayout tvNoFeedbacks; // Đổi từ TextView thành LinearLayout&#10;&#10;    private TextView tvNoFeedbacks;&#10;    private FirebaseFirestore db;&#10;    private List&lt;Feedback&gt; feedbackList;&#10;    private TeacherFeedbackAdapter feedbackAdapter;&#10;    private String currentTeacherId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_teacher_feedback_management);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        feedbackList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadCurrentTeacherInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvFeedbacks = findViewById(R.id.rv_feedbacks);&#10;        tvNoFeedbacks = findViewById(R.id.tv_no_feedbacks);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Quản lý phản hồi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        feedbackAdapter = new TeacherFeedbackAdapter(feedbackList, this::onFeedbackClick);&#10;        rvFeedbacks.setLayoutManager(new LinearLayoutManager(this));&#10;        rvFeedbacks.setAdapter(feedbackAdapter);&#10;    }&#10;&#10;    private void loadCurrentTeacherInfo() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;&#10;        // Get teacher info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentTeacherId = documentSnapshot.getString(&quot;id&quot;);&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#10;&#10;                        if (!&quot;teacher&quot;.equals(role)) {&#10;                            Toast.makeText(this, &quot;Chỉ giáo viên mới có thể truy cập&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentTeacherId != null) {&#10;                            loadFeedbacks();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin giáo viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error loading teacher info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadFeedbacks() {&#10;        android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Loading feedbacks for teacher: &quot; + currentTeacherId);&#10;&#10;        // Load tất cả feedback cho các khóa học của giáo viên này&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, currentTeacherId)&#10;                .get()&#10;                .addOnSuccessListener(coursesSnapshot -&gt; {&#10;                    if (coursesSnapshot.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    List&lt;String&gt; teacherCourseIds = new ArrayList&lt;&gt;();&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot courseDoc : coursesSnapshot) {&#10;                        teacherCourseIds.add(courseDoc.getId());&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Found &quot; + teacherCourseIds.size() + &quot; courses for teacher&quot;);&#10;&#10;                    // Load feedbacks cho các khóa học này&#10;                    loadFeedbacksForCourses(teacherCourseIds);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error loading teacher courses&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadFeedbacksForCourses(List&lt;String&gt; courseIds) {&#10;        if (courseIds.isEmpty()) {&#10;            showEmptyState();&#10;            return;&#10;        }&#10;&#10;        // Load feedbacks từ Firebase - sắp xếp theo thời gian mới nhất&#10;        db.collection(&quot;feedbacks&quot;)&#10;                .whereIn(&quot;courseId&quot;, courseIds)&#10;                .orderBy(&quot;feedbackRequest&quot;, Query.Direction.DESCENDING)&#10;                .get()&#10;                .addOnSuccessListener(feedbackSnapshot -&gt; {&#10;                    feedbackList.clear();&#10;&#10;                    android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Found &quot; + feedbackSnapshot.size() + &quot; feedbacks&quot;);&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot feedbackDoc : feedbackSnapshot) {&#10;                        Feedback feedback = new Feedback();&#10;                        feedback.setId(feedbackDoc.getId());&#10;                        feedback.setCourseId(feedbackDoc.getString(&quot;courseId&quot;));&#10;                        feedback.setCourseName(feedbackDoc.getString(&quot;courseName&quot;));&#10;                        feedback.setMessage(feedbackDoc.getString(&quot;message&quot;));&#10;                        feedback.setStudentId(feedbackDoc.getString(&quot;studentId&quot;));&#10;                        feedback.setStudentName(feedbackDoc.getString(&quot;studentName&quot;));&#10;                        feedback.setStudentEmail(feedbackDoc.getString(&quot;studentEmail&quot;));&#10;                        feedback.setStatus(feedbackDoc.getString(&quot;status&quot;));&#10;&#10;                        // Safely get timestamp&#10;                        com.google.firebase.Timestamp timestamp = feedbackDoc.getTimestamp(&quot;feedbackRequest&quot;);&#10;                        if (timestamp != null) {&#10;                            feedback.setFeedbackRequest(timestamp.toDate());&#10;                        }&#10;&#10;                        // Get teacher response if exists&#10;                        feedback.setTeacherResponse(feedbackDoc.getString(&quot;teacherResponse&quot;));&#10;                        com.google.firebase.Timestamp responseTimestamp = feedbackDoc.getTimestamp(&quot;responseDate&quot;);&#10;                        if (responseTimestamp != null) {&#10;                            feedback.setResponseDate(responseTimestamp.toDate());&#10;                        }&#10;&#10;                        feedbackList.add(feedback);&#10;                    }&#10;&#10;                    updateUI();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error loading feedbacks&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải phản hồi: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (feedbackList.isEmpty()) {&#10;            showEmptyState();&#10;        } else {&#10;            rvFeedbacks.setVisibility(View.VISIBLE);&#10;            tvNoFeedbacks.setVisibility(View.GONE);&#10;            feedbackAdapter.notifyDataSetChanged();&#10;&#10;            android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Displaying &quot; + feedbackList.size() + &quot; feedbacks&quot;);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        rvFeedbacks.setVisibility(View.GONE);&#10;        tvNoFeedbacks.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    private void onFeedbackClick(Feedback feedback) {&#10;        // Mở dialog hoặc activity để phản hồi&#10;        FeedbackResponseDialog dialog = new FeedbackResponseDialog(this, feedback, new FeedbackResponseDialog.OnResponseListener() {&#10;            @Override&#10;            public void onResponseSent(String response) {&#10;                updateFeedbackResponse(feedback, response);&#10;            }&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    private void updateFeedbackResponse(Feedback feedback, String response) {&#10;        android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Updating feedback response for: &quot; + feedback.getId());&#10;&#10;        // Update feedback in Firebase&#10;        db.collection(&quot;feedbacks&quot;).document(feedback.getId())&#10;                .update(&#10;                    &quot;teacherResponse&quot;, response,&#10;                    &quot;responseDate&quot;, com.google.firebase.Timestamp.now(),&#10;                    &quot;status&quot;, &quot;responded&quot;&#10;                )&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Toast.makeText(this, &quot;Đã gửi phản hồi thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                    // Update local data&#10;                    feedback.setTeacherResponse(response);&#10;                    feedback.setResponseDate(new java.util.Date());&#10;                    feedback.setStatus(&quot;responded&quot;);&#10;                    feedbackAdapter.notifyDataSetChanged();&#10;&#10;                    // Tạo notification cho học viên&#10;                    createNotificationForStudent(feedback, response);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error updating feedback response&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi gửi phản hồi: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void createNotificationForStudent(Feedback feedback, String response) {&#10;        // Tạo notification cho học viên về phản hồi từ giáo viên&#10;        java.util.Map&lt;String, Object&gt; notification = new java.util.HashMap&lt;&gt;();&#10;        notification.put(&quot;studentId&quot;, feedback.getStudentId());&#10;        notification.put(&quot;title&quot;, &quot;Phản hồi từ giáo viên&quot;);&#10;        notification.put(&quot;message&quot;, &quot;Giáo viên đã phản hồi đánh giá của bạn về khóa học: &quot; + feedback.getCourseName());&#10;        notification.put(&quot;type&quot;, &quot;feedback_response&quot;);&#10;        notification.put(&quot;feedbackId&quot;, feedback.getId());&#10;        notification.put(&quot;courseId&quot;, feedback.getCourseId());&#10;        notification.put(&quot;courseName&quot;, feedback.getCourseName());&#10;        notification.put(&quot;teacherResponse&quot;, response);&#10;        notification.put(&quot;createdAt&quot;, com.google.firebase.Timestamp.now());&#10;        notification.put(&quot;isRead&quot;, false);&#10;&#10;        db.collection(&quot;notifications&quot;)&#10;                .add(notification)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Notification created for student: &quot; + feedback.getStudentId());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error creating notification&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        if (currentTeacherId != null) {&#10;            loadFeedbacks(); // Refresh data when returning&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh;&#10;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.Query;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class TeacherFeedbackManagementActivity extends AppCompatActivity {&#10;&#10;    private Toolbar toolbar;&#10;    private RecyclerView rvFeedbacks;&#10;    private LinearLayout tvNoFeedbacks; // Đổi từ TextView thành LinearLayout&#10;&#10;    private FirebaseAuth mAuth;&#10;    private FirebaseFirestore db;&#10;    private List&lt;Feedback&gt; feedbackList;&#10;    private TeacherFeedbackAdapter feedbackAdapter;&#10;    private String currentTeacherId;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_teacher_feedback_management);&#10;&#10;        mAuth = FirebaseAuth.getInstance();&#10;        db = FirebaseFirestore.getInstance();&#10;        feedbackList = new ArrayList&lt;&gt;();&#10;&#10;        initViews();&#10;        setupToolbar();&#10;        setupRecyclerView();&#10;        loadCurrentTeacherInfo();&#10;    }&#10;&#10;    private void initViews() {&#10;        toolbar = findViewById(R.id.toolbar);&#10;        rvFeedbacks = findViewById(R.id.rv_feedbacks);&#10;        tvNoFeedbacks = findViewById(R.id.tv_no_feedbacks);&#10;    }&#10;&#10;    private void setupToolbar() {&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setTitle(&quot;Quản lý phản hồi&quot;);&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        feedbackAdapter = new TeacherFeedbackAdapter(feedbackList, this::onFeedbackClick);&#10;        rvFeedbacks.setLayoutManager(new LinearLayoutManager(this));&#10;        rvFeedbacks.setAdapter(feedbackAdapter);&#10;    }&#10;&#10;    private void loadCurrentTeacherInfo() {&#10;        if (mAuth.getCurrentUser() == null) {&#10;            Toast.makeText(this, &quot;Vui lòng đăng nhập&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        String firebaseUid = mAuth.getCurrentUser().getUid();&#10;&#10;        // Get teacher info từ users collection&#10;        db.collection(&quot;users&quot;).document(firebaseUid)&#10;                .get()&#10;                .addOnSuccessListener(documentSnapshot -&gt; {&#10;                    if (documentSnapshot.exists()) {&#10;                        currentTeacherId = documentSnapshot.getString(&quot;id&quot;);&#10;                        String role = documentSnapshot.getString(&quot;role&quot;);&#10;&#10;                        if (!&quot;teacher&quot;.equals(role)) {&#10;                            Toast.makeText(this, &quot;Chỉ giáo viên mới có thể truy cập&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                            return;&#10;                        }&#10;&#10;                        if (currentTeacherId != null) {&#10;                            loadFeedbacks();&#10;                        } else {&#10;                            Toast.makeText(this, &quot;Không tìm thấy thông tin giáo viên&quot;, Toast.LENGTH_SHORT).show();&#10;                            finish();&#10;                        }&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không tìm thấy thông tin người dùng&quot;, Toast.LENGTH_SHORT).show();&#10;                        finish();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error loading teacher info&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải thông tin: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    finish();&#10;                });&#10;    }&#10;&#10;    private void loadFeedbacks() {&#10;        android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Loading feedbacks for teacher: &quot; + currentTeacherId);&#10;&#10;        // Load tất cả feedback cho các khóa học của giáo viên này&#10;        db.collection(&quot;courses&quot;)&#10;                .whereEqualTo(&quot;teacherId&quot;, currentTeacherId)&#10;                .get()&#10;                .addOnSuccessListener(coursesSnapshot -&gt; {&#10;                    if (coursesSnapshot.isEmpty()) {&#10;                        showEmptyState();&#10;                        return;&#10;                    }&#10;&#10;                    List&lt;String&gt; teacherCourseIds = new ArrayList&lt;&gt;();&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot courseDoc : coursesSnapshot) {&#10;                        teacherCourseIds.add(courseDoc.getId());&#10;                    }&#10;&#10;                    android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Found &quot; + teacherCourseIds.size() + &quot; courses for teacher&quot;);&#10;&#10;                    // Load feedbacks cho các khóa học này&#10;                    loadFeedbacksForCourses(teacherCourseIds);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error loading teacher courses&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải khóa học: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void loadFeedbacksForCourses(List&lt;String&gt; courseIds) {&#10;        if (courseIds.isEmpty()) {&#10;            showEmptyState();&#10;            return;&#10;        }&#10;&#10;        // Load feedbacks từ Firebase - không sắp xếp để tránh composite index&#10;        db.collection(&quot;feedbacks&quot;)&#10;                .whereIn(&quot;courseId&quot;, courseIds)&#10;                .get()&#10;                .addOnSuccessListener(feedbackSnapshot -&gt; {&#10;                    feedbackList.clear();&#10;&#10;                    android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Found &quot; + feedbackSnapshot.size() + &quot; feedbacks&quot;);&#10;&#10;                    for (com.google.firebase.firestore.QueryDocumentSnapshot feedbackDoc : feedbackSnapshot) {&#10;                        Feedback feedback = new Feedback();&#10;                        feedback.setId(feedbackDoc.getId());&#10;                        feedback.setCourseId(feedbackDoc.getString(&quot;courseId&quot;));&#10;                        feedback.setCourseName(feedbackDoc.getString(&quot;courseName&quot;));&#10;                        feedback.setMessage(feedbackDoc.getString(&quot;message&quot;));&#10;                        feedback.setStudentId(feedbackDoc.getString(&quot;studentId&quot;));&#10;                        feedback.setStudentName(feedbackDoc.getString(&quot;studentName&quot;));&#10;                        feedback.setStudentEmail(feedbackDoc.getString(&quot;studentEmail&quot;));&#10;                        feedback.setStatus(feedbackDoc.getString(&quot;status&quot;));&#10;&#10;                        // Safely get timestamp&#10;                        com.google.firebase.Timestamp timestamp = feedbackDoc.getTimestamp(&quot;feedbackRequest&quot;);&#10;                        if (timestamp != null) {&#10;                            feedback.setFeedbackRequest(timestamp.toDate());&#10;                        }&#10;&#10;                        // Get teacher response if exists&#10;                        feedback.setTeacherResponse(feedbackDoc.getString(&quot;teacherResponse&quot;));&#10;                        com.google.firebase.Timestamp responseTimestamp = feedbackDoc.getTimestamp(&quot;responseDate&quot;);&#10;                        if (responseTimestamp != null) {&#10;                            feedback.setResponseDate(responseTimestamp.toDate());&#10;                        }&#10;&#10;                        feedbackList.add(feedback);&#10;                    }&#10;&#10;                    // Sắp xếp trong code thay vì Firebase query&#10;                    feedbackList.sort((f1, f2) -&gt; {&#10;                        if (f1.getFeedbackRequest() == null &amp;&amp; f2.getFeedbackRequest() == null) return 0;&#10;                        if (f1.getFeedbackRequest() == null) return 1;&#10;                        if (f2.getFeedbackRequest() == null) return -1;&#10;                        return f2.getFeedbackRequest().compareTo(f1.getFeedbackRequest()); // Mới nhất trước&#10;                    });&#10;&#10;                    updateUI();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error loading feedbacks&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi tải phản hồi: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                    showEmptyState();&#10;                });&#10;    }&#10;&#10;    private void updateUI() {&#10;        if (feedbackList.isEmpty()) {&#10;            showEmptyState();&#10;        } else {&#10;            rvFeedbacks.setVisibility(View.VISIBLE);&#10;            tvNoFeedbacks.setVisibility(View.GONE);&#10;            feedbackAdapter.notifyDataSetChanged();&#10;&#10;            android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Displaying &quot; + feedbackList.size() + &quot; feedbacks&quot;);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState() {&#10;        rvFeedbacks.setVisibility(View.GONE);&#10;        tvNoFeedbacks.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    private void onFeedbackClick(Feedback feedback) {&#10;        // Mở dialog hoặc activity để phản hồi&#10;        FeedbackResponseDialog dialog = new FeedbackResponseDialog(this, feedback, new FeedbackResponseDialog.OnResponseListener() {&#10;            @Override&#10;            public void onResponseSent(String response) {&#10;                updateFeedbackResponse(feedback, response);&#10;            }&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    private void updateFeedbackResponse(Feedback feedback, String response) {&#10;        android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Updating feedback response for: &quot; + feedback.getId());&#10;&#10;        // Update feedback in Firebase&#10;        db.collection(&quot;feedbacks&quot;).document(feedback.getId())&#10;                .update(&#10;                    &quot;teacherResponse&quot;, response,&#10;                    &quot;responseDate&quot;, com.google.firebase.Timestamp.now(),&#10;                    &quot;status&quot;, &quot;responded&quot;&#10;                )&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Toast.makeText(this, &quot;Đã gửi phản hồi thành công!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;                    // Update local data&#10;                    feedback.setTeacherResponse(response);&#10;                    feedback.setResponseDate(new java.util.Date());&#10;                    feedback.setStatus(&quot;responded&quot;);&#10;                    feedbackAdapter.notifyDataSetChanged();&#10;&#10;                    // Tạo notification cho học viên&#10;                    createNotificationForStudent(feedback, response);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error updating feedback response&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi gửi phản hồi: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void createNotificationForStudent(Feedback feedback, String response) {&#10;        // Tạo notification cho học viên về phản hồi từ giáo viên&#10;        java.util.Map&lt;String, Object&gt; notification = new java.util.HashMap&lt;&gt;();&#10;        notification.put(&quot;studentId&quot;, feedback.getStudentId());&#10;        notification.put(&quot;title&quot;, &quot;Phản hồi từ giáo viên&quot;);&#10;        notification.put(&quot;message&quot;, &quot;Giáo viên đã phản hồi đánh giá của bạn về khóa học: &quot; + feedback.getCourseName());&#10;        notification.put(&quot;type&quot;, &quot;feedback_response&quot;);&#10;        notification.put(&quot;feedbackId&quot;, feedback.getId());&#10;        notification.put(&quot;courseId&quot;, feedback.getCourseId());&#10;        notification.put(&quot;courseName&quot;, feedback.getCourseName());&#10;        notification.put(&quot;teacherResponse&quot;, response);&#10;        notification.put(&quot;createdAt&quot;, com.google.firebase.Timestamp.now());&#10;        notification.put(&quot;isRead&quot;, false);&#10;&#10;        db.collection(&quot;notifications&quot;)&#10;                .add(notification)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    android.util.Log.d(&quot;TeacherFeedback&quot;, &quot;Notification created for student: &quot; + feedback.getStudentId());&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;TeacherFeedback&quot;, &quot;Error creating notification&quot;, e);&#10;                });&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        if (currentTeacherId != null) {&#10;            loadFeedbacks(); // Refresh data when returning&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            finish();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/CourseSelectAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/CourseSelectAdapter.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.adapters;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.vantinh.tienganh.R;&#10;import com.vantinh.tienganh.models.Course;&#10;import java.util.List;&#10;&#10;public class CourseSelectAdapter extends RecyclerView.Adapter&lt;CourseSelectAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;Course&gt; courses;&#10;    private OnCourseSelectListener listener;&#10;&#10;    public interface OnCourseSelectListener {&#10;        void onCourseSelected(Course course);&#10;    }&#10;&#10;    public CourseSelectAdapter(List&lt;Course&gt; courses, OnCourseSelectListener listener) {&#10;        this.courses = courses;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_course_select, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        Course course = courses.get(position);&#10;        holder.bind(course);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return courses.size();&#10;    }&#10;&#10;    class ViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvCourseName, tvCourseDescription;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvCourseName = itemView.findViewById(R.id.tv_course_name);&#10;            tvCourseDescription = itemView.findViewById(R.id.tv_course_description);&#10;&#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onCourseSelected(courses.get(getAdapterPosition()));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(Course course) {&#10;            tvCourseName.setText(course.getCourseName());&#10;            tvCourseDescription.setText(course.getDescription());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/EditTestQuestionAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/adapters/EditTestQuestionAdapter.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh.adapters;&#13;&#10;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.TextView;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;import com.vantinh.tienganh.R;&#13;&#10;import com.vantinh.tienganh.models.SimpleTestQuestion;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class EditTestQuestionAdapter extends RecyclerView.Adapter&lt;EditTestQuestionAdapter.ViewHolder&gt; {&#13;&#10;&#13;&#10;    private List&lt;SimpleTestQuestion&gt; questions;&#13;&#10;    private OnQuestionClickListener editListener;&#13;&#10;    private OnQuestionClickListener deleteListener;&#13;&#10;&#13;&#10;    public interface OnQuestionClickListener {&#13;&#10;        void onQuestionClick(SimpleTestQuestion question);&#13;&#10;    }&#13;&#10;&#13;&#10;    public EditTestQuestionAdapter(List&lt;SimpleTestQuestion&gt; questions, &#13;&#10;                                  OnQuestionClickListener editListener,&#13;&#10;                                  OnQuestionClickListener deleteListener) {&#13;&#10;        this.questions = questions;&#13;&#10;        this.editListener = editListener;&#13;&#10;        this.deleteListener = deleteListener;&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(parent.getContext())&#13;&#10;                .inflate(R.layout.item_edit_test_question, parent, false);&#13;&#10;        return new ViewHolder(view);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#13;&#10;        SimpleTestQuestion question = questions.get(position);&#13;&#10;        &#13;&#10;        holder.tvQuestionNumber.setText(&quot;Câu &quot; + (position + 1));&#13;&#10;        holder.tvQuestion.setText(question.getQuestion());&#13;&#10;        &#13;&#10;        // Hiển thị các lựa chọn - SỬA: options là array&#13;&#10;        List&lt;String&gt; options = question.getOptions(); // Sửa từ getCorrectAnswer() thành getOptions()&#13;&#10;        if (options != null &amp;&amp; options.size() &gt;= 4) {&#13;&#10;            holder.tvOptionA.setText(&quot;A. &quot; + options.get(0));&#13;&#10;            holder.tvOptionB.setText(&quot;B. &quot; + options.get(1));&#13;&#10;            holder.tvOptionC.setText(&quot;C. &quot; + options.get(2));&#13;&#10;            holder.tvOptionD.setText(&quot;D. &quot; + options.get(3));&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Hiển thị đáp án đúng - SỬA: correctAnswer là number&#13;&#10;        int correctIndex = question.getCorrectAnswer(); // Sửa từ getOptions() thành getCorrectAnswer()&#13;&#10;        String correctLabel = &quot;&quot;;&#13;&#10;        switch (correctIndex) {&#13;&#10;            case 0: correctLabel = &quot;A&quot;; break;&#13;&#10;            case 1: correctLabel = &quot;B&quot;; break;&#13;&#10;            case 2: correctLabel = &quot;C&quot;; break;&#13;&#10;            case 3: correctLabel = &quot;D&quot;; break;&#13;&#10;        }&#13;&#10;        holder.tvCorrectAnswer.setText(&quot;Đáp án: &quot; + correctLabel);&#13;&#10;        &#13;&#10;        // Set click listeners&#13;&#10;        holder.btnEdit.setOnClickListener(v -&gt; {&#13;&#10;            if (editListener != null) {&#13;&#10;                editListener.onQuestionClick(question);&#13;&#10;            }&#13;&#10;        });&#13;&#10;        &#13;&#10;        holder.btnDelete.setOnClickListener(v -&gt; {&#13;&#10;            if (deleteListener != null) {&#13;&#10;                deleteListener.onQuestionClick(question);&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return questions.size();&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        TextView tvQuestionNumber, tvQuestion, tvOptionA, tvOptionB, tvOptionC, tvOptionD, tvCorrectAnswer;&#13;&#10;        Button btnEdit, btnDelete;&#13;&#10;&#13;&#10;        public ViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            tvQuestionNumber = itemView.findViewById(R.id.tv_question_number);&#13;&#10;            tvQuestion = itemView.findViewById(R.id.tv_question);&#13;&#10;            tvOptionA = itemView.findViewById(R.id.tv_option_a);&#13;&#10;            tvOptionB = itemView.findViewById(R.id.tv_option_b);&#13;&#10;            tvOptionC = itemView.findViewById(R.id.tv_option_c);&#13;&#10;            tvOptionD = itemView.findViewById(R.id.tv_option_d);&#13;&#10;            tvCorrectAnswer = itemView.findViewById(R.id.tv_correct_answer);&#13;&#10;            btnEdit = itemView.findViewById(R.id.btn_edit);&#13;&#10;            btnDelete = itemView.findViewById(R.id.btn_delete);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Course.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Course.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class Course {&#10;    private String id;&#10;    private String title;&#10;    private String description;&#10;    private String teacherId;&#10;    private String imageUrl;&#10;    private String level; // Beginner, Intermediate, Advanced&#10;    private String category; // Grammar, Vocabulary, Listening, Speaking&#10;    private int duration; // in hours&#10;    private Date createdAt;&#10;    private Date updatedAt;&#10;    private boolean isActive;&#10;    private int enrolledStudents;&#10;    private double rating;&#10;    private List&lt;String&gt; tags;&#10;&#10;    public Course() {&#10;        // Required empty constructor for Firebase&#10;    }&#10;&#10;    public Course(String title, String description, String teacherId,&#10;                  String level, String category, int duration) {&#10;        this.title = title;&#10;        this.description = description;&#10;        this.teacherId = teacherId;&#10;        this.level = level;&#10;        this.category = category;&#10;        this.duration = duration;&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;        this.isActive = true;&#10;        this.enrolledStudents = 0;&#10;        this.rating = 0.0;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public void setId(String id) { this.id = id; }&#10;&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;&#10;    public String getTeacherId() { return teacherId; }&#10;    public void setTeacherId(String teacherId) { this.teacherId = teacherId; }&#10;&#10;    public String getImageUrl() { return imageUrl; }&#10;    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }&#10;&#10;    public String getLevel() { return level; }&#10;    public void setLevel(String level) { this.level = level; }&#10;&#10;    public String getCategory() { return category; }&#10;    public void setCategory(String category) { this.category = category; }&#10;&#10;    public int getDuration() { return duration; }&#10;    public void setDuration(int duration) { this.duration = duration; }&#10;&#10;    public Date getCreatedAt() { return createdAt; }&#10;    public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }&#10;&#10;    public Date getUpdatedAt() { return updatedAt; }&#10;    public void setUpdatedAt(Date updatedAt) { this.updatedAt = updatedAt; }&#10;&#10;    public boolean isActive() { return isActive; }&#10;    public void setActive(boolean active) { isActive = active; }&#10;&#10;    public int getEnrolledStudents() { return enrolledStudents; }&#10;    public void setEnrolledStudents(int enrolledStudents) { this.enrolledStudents = enrolledStudents; }&#10;&#10;    public double getRating() { return rating; }&#10;    public void setRating(double rating) { this.rating = rating; }&#10;&#10;    public List&lt;String&gt; getTags() { return tags; }&#10;    public void setTags(List&lt;String&gt; tags) { this.tags = tags; }&#10;&#10;    // Thêm phương thức getCourseName() để tương thích với code hiện tại&#10;    public String getCourseName() {&#10;        return this.title;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.title = courseName;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/LessonProgress.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/LessonProgress.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.Date;&#10;&#10;public class LessonProgress {&#10;    private String id;&#10;    private String studentId;&#10;    private String courseId;&#10;    private String lessonId;&#10;    private boolean isCompleted;&#10;    private Date completedAt;&#10;    private Date createdAt;&#10;    private Date updatedAt;&#10;&#10;    public LessonProgress() {&#10;        // Constructor mặc định cho Firestore&#10;    }&#10;&#10;    public LessonProgress(String studentId, String courseId, String lessonId, boolean isCompleted) {&#10;        this.studentId = studentId;&#10;        this.courseId = courseId;&#10;        this.lessonId = lessonId;&#10;        this.isCompleted = isCompleted;&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;        if (isCompleted) {&#10;            this.completedAt = new Date();&#10;        }&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getStudentId() {&#10;        return studentId;&#10;    }&#10;&#10;    public void setStudentId(String studentId) {&#10;        this.studentId = studentId;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getLessonId() {&#10;        return lessonId;&#10;    }&#10;&#10;    public void setLessonId(String lessonId) {&#10;        this.lessonId = lessonId;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return isCompleted;&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        isCompleted = completed;&#10;        this.updatedAt = new Date();&#10;        if (completed &amp;&amp; this.completedAt == null) {&#10;            this.completedAt = new Date();&#10;        }&#10;    }&#10;&#10;    public Date getCompletedAt() {&#10;        return completedAt;&#10;    }&#10;&#10;    public void setCompletedAt(Date completedAt) {&#10;        this.completedAt = completedAt;&#10;    }&#10;&#10;    public Date getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public Date getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(Date updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Quiz.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/Quiz.java" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class Quiz {&#10;    private String id;&#10;    private String title;&#10;    private String courseId;&#10;    private String courseName;&#10;    private String teacherId;&#10;    private List&lt;QuizQuestion&gt; questions;&#10;    private Date createdAt;&#10;    private boolean active;&#10;&#10;    public Quiz() {&#10;        // Empty constructor required for Firestore&#10;    }&#10;&#10;    public Quiz(String title, String courseId, String courseName, String teacherId, &#10;                List&lt;QuizQuestion&gt; questions, Date createdAt, boolean active) {&#10;        this.title = title;&#10;        this.courseId = courseId;&#10;        this.courseName = courseName;&#10;        this.teacherId = teacherId;&#10;        this.questions = questions;&#10;        this.createdAt = createdAt;&#10;        this.active = active;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public String getCourseName() {&#10;        return courseName;&#10;    }&#10;&#10;    public void setCourseName(String courseName) {&#10;        this.courseName = courseName;&#10;    }&#10;&#10;    public String getTeacherId() {&#10;        return teacherId;&#10;    }&#10;&#10;    public void setTeacherId(String teacherId) {&#10;        this.teacherId = teacherId;&#10;    }&#10;&#10;    public List&lt;QuizQuestion&gt; getQuestions() {&#10;        return questions;&#10;    }&#10;&#10;    public void setQuestions(List&lt;QuizQuestion&gt; questions) {&#10;        this.questions = questions;&#10;    }&#10;&#10;    public Date getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public boolean isActive() {&#10;        return active;&#10;    }&#10;&#10;    public void setActive(boolean active) {&#10;        this.active = active;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/SimpleTestQuestion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vantinh/tienganh/models/SimpleTestQuestion.java" />
              <option name="originalContent" value="package com.vantinh.tienganh.models;&#10;&#10;import java.util.List;&#10;&#10;public class SimpleTestQuestion {&#10;    private String documentId;          // ID document Firebase (để edit/delete)&#10;    private String courseId;            // ID khóa học (trường mới)&#10;    private List&lt;String&gt; correctAnswer; // Array - 4 đáp án A,B,C,D&#10;    private int options;                // Number - Index của đáp án đúng (0-3)&#10;    private String question;            // String - Nội dung câu hỏi&#10;&#10;    public SimpleTestQuestion() {&#10;        // Empty constructor required for Firestore&#10;    }&#10;&#10;    public SimpleTestQuestion(String documentId, String courseId, List&lt;String&gt; correctAnswer, int options, String question) {&#10;        this.documentId = documentId;&#10;        this.courseId = courseId;&#10;        this.correctAnswer = correctAnswer;&#10;        this.options = options;&#10;        this.question = question;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getDocumentId() {&#10;        return documentId;&#10;    }&#10;&#10;    public void setDocumentId(String documentId) {&#10;        this.documentId = documentId;&#10;    }&#10;&#10;    public String getCourseId() {&#10;        return courseId;&#10;    }&#10;&#10;    public void setCourseId(String courseId) {&#10;        this.courseId = courseId;&#10;    }&#10;&#10;    public List&lt;String&gt; getCorrectAnswer() {&#10;        return correctAnswer;&#10;    }&#10;&#10;    public void setCorrectAnswer(List&lt;String&gt; correctAnswer) {&#10;        this.correctAnswer = correctAnswer;&#10;    }&#10;&#10;    public int getOptions() {&#10;        return options;&#10;    }&#10;&#10;    public void setOptions(int options) {&#10;        this.options = options;&#10;    }&#10;&#10;    public String getQuestion() {&#10;        return question;&#10;    }&#10;&#10;    public void setQuestion(String question) {&#10;        this.question = question;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;SimpleTestQuestion{&quot; +&#10;                &quot;documentId='&quot; + documentId + '\'' +&#10;                &quot;, courseId='&quot; + courseId + '\'' +&#10;                &quot;, question='&quot; + question + '\'' +&#10;                &quot;, correctAnswer=&quot; + correctAnswer +&#10;                &quot;, options=&quot; + options +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vantinh.tienganh.models;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class SimpleTestQuestion {&#13;&#10;    private String documentId;          // ID document Firebase (để edit/delete)&#13;&#10;    private String courseId;            // ID khóa học&#13;&#10;    private int correctAnswer;          // Number - Index của đáp án đúng (0-3) - SỬA ĐỔI&#13;&#10;    private List&lt;String&gt; options;       // Array - 4 đáp án A,B,C,D - SỬA ĐỔI&#13;&#10;    private String question;            // String - Nội dung câu hỏi&#13;&#10;&#13;&#10;    public SimpleTestQuestion() {&#13;&#10;        // Empty constructor required for Firestore&#13;&#10;    }&#13;&#10;&#13;&#10;    public SimpleTestQuestion(String documentId, String courseId, int correctAnswer, List&lt;String&gt; options, String question) {&#13;&#10;        this.documentId = documentId;&#13;&#10;        this.courseId = courseId;&#13;&#10;        this.correctAnswer = correctAnswer;&#13;&#10;        this.options = options;&#13;&#10;        this.question = question;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Getters and Setters&#13;&#10;    public String getDocumentId() {&#13;&#10;        return documentId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setDocumentId(String documentId) {&#13;&#10;        this.documentId = documentId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getCourseId() {&#13;&#10;        return courseId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setCourseId(String courseId) {&#13;&#10;        this.courseId = courseId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getCorrectAnswer() {&#13;&#10;        return correctAnswer;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setCorrectAnswer(int correctAnswer) {&#13;&#10;        this.correctAnswer = correctAnswer;&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getOptions() {&#13;&#10;        return options;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setOptions(List&lt;String&gt; options) {&#13;&#10;        this.options = options;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getQuestion() {&#13;&#10;        return question;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setQuestion(String question) {&#13;&#10;        this.question = question;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;SimpleTestQuestion{&quot; +&#13;&#10;                &quot;documentId='&quot; + documentId + '\'' +&#13;&#10;                &quot;, courseId='&quot; + courseId + '\'' +&#13;&#10;                &quot;, correctAnswer=&quot; + correctAnswer +&#13;&#10;                &quot;, options=&quot; + options +&#13;&#10;                &quot;, question='&quot; + question + '\'' +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/animated_indicator.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/animated_indicator.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:endColor=&quot;#764ba2&quot;&#10;        android:angle=&quot;90&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;2dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_avatar_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_avatar_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ffffff&quot;&#10;        android:endColor=&quot;#f0f0f0&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#20000000&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_white_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_white_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@android:color/white&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#20FFFFFF&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/glass_toolbar_bg.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/glass_toolbar_bg.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#20FFFFFF&quot;&#10;        android:centerColor=&quot;#10FFFFFF&quot;&#10;        android:endColor=&quot;#05FFFFFF&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_approved.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_approved.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#56ab2f&quot;&#10;        android:centerColor=&quot;#a8e6cf&quot;&#10;        android:endColor=&quot;#00b09b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;20dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background_light.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_background_light.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#e3ffe7&quot;&#10;        android:centerColor=&quot;#d9ffdb&quot;&#10;        android:endColor=&quot;#b3ffb3&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_courses.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_courses.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4facfe&quot;&#10;        android:centerColor=&quot;#00f2fe&quot;&#10;        android:endColor=&quot;#43e97b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_enrollment.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_enrollment.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_feedback.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_feedback.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;gradient&#10;        android:startColor=&quot;#FF9C27B0&quot;&#10;        android:endColor=&quot;#FF673AB7&quot;&#10;        android:angle=&quot;45&quot; /&gt;&#10;    &#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#40FFFFFF&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_quiz.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_quiz.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#a8edea&quot;&#10;        android:centerColor=&quot;#fed6e3&quot;&#10;        android:endColor=&quot;#ffecd2&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_requests.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_button_requests.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff6b6b&quot;&#10;        android:centerColor=&quot;#ee5a52&quot;&#10;        android:endColor=&quot;#ff9a9e&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_courses.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_courses.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4facfe&quot;&#10;        android:centerColor=&quot;#00f2fe&quot;&#10;        android:endColor=&quot;#43e97b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_requests.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_requests.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff6b6b&quot;&#10;        android:centerColor=&quot;#ee5a52&quot;&#10;        android:endColor=&quot;#ff9a9e&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_students.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_card_students.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_dashboard_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_dashboard_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;135&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_header_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_header_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4facfe&quot;&#10;        android:centerColor=&quot;#00f2fe&quot;&#10;        android:endColor=&quot;#43e97b&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_line_accent.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_line_accent.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff9a9e&quot;&#10;        android:centerColor=&quot;#fecfef&quot;&#10;        android:endColor=&quot;#fecfef&quot;&#10;        android:angle=&quot;0&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;2dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_rejected.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_rejected.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#ff416c&quot;&#10;        android:centerColor=&quot;#ff4b2b&quot;&#10;        android:endColor=&quot;#ff8a80&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;20dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/gradient_student_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/gradient_student_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#667eea&quot;&#10;        android:centerColor=&quot;#764ba2&quot;&#10;        android:endColor=&quot;#f093fb&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_book_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_book_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M18,2H6c-1.1,0 -2,0.9 -2,2v16c0,1.1 0.89,2 2,2h12c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zM6,4h5v8l-2.5,-1.5L6,12V4z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_check_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_check_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41,-1.41z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_circle.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_circle.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_cross_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_cross_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_diamond.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_diamond.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2l2,6h6l-5,4 2,6-5-4-5,4 2-6-5-4h6z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_education_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_education_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,3L1,9l11,6l9,-4.91V17h2V9M5,13.18v4L12,21l7,-3.82v-4L12,17&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_empty_state.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_empty_state.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-6h2v6zM13,9h-2L11,7h2v2z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_management.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_management.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M16,9V4H8v5H2v11h20V9H16zM10,4h4v5h-4V4zM20,18H4v-7h16V18z&quot; /&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M6,13h2v2H6zM9,13h6v2H9z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_star.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_star.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2l3.09,6.26L22,9.27l-5,4.87L18.18,22L12,18.77L5.82,22L7,14.14L2,9.27l6.91,-1.01L12,2z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_student_pattern.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_student_pattern.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,12c2.21,0 4,-1.79 4,-4s-1.79,-4 -4,-4 -4,1.79 -4,4 1.79,4 4,4zM12,14c-2.67,0 -8,1.34 -8,4v2h16v-2c0,-2.66 -5.33,-4 -8,-4z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_green.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_green.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &#10;    &lt;solid android:color=&quot;@android:color/holo_green_light&quot; /&gt;&#10;    &#10;    &lt;size&#10;        android:width=&quot;12dp&quot;&#10;        android:height=&quot;12dp&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_red.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/pulse_indicator_red.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/radio_button_selector_d.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/radio_button_selector_d.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item android:state_checked=&quot;true&quot;&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;solid android:color=&quot;#dc3545&quot; /&gt;&#10;            &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;            &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#bd2130&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;    &lt;item android:state_checked=&quot;false&quot;&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;solid android:color=&quot;#f8d7da&quot; /&gt;&#10;            &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;            &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;#ff6b6b&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;&lt;/selector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/radio_text_color_d.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/radio_text_color_d.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item android:state_checked=&quot;true&quot; android:color=&quot;@android:color/holo_blue_dark&quot; /&gt;&#10;    &lt;item android:state_checked=&quot;false&quot; android:color=&quot;@android:color/darker_gray&quot; /&gt;&#10;    &lt;item android:color=&quot;@android:color/darker_gray&quot; /&gt;&#10;&lt;/selector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/shine_overlay.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/shine_overlay.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#40FFFFFF&quot;&#10;        android:centerColor=&quot;#20FFFFFF&quot;&#10;        android:endColor=&quot;#00FFFFFF&quot;&#10;        android:angle=&quot;45&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/status_indicator.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/status_indicator.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;gradient&#10;        android:startColor=&quot;#4CAF50&quot;&#10;        android:endColor=&quot;#8BC34A&quot;&#10;        android:angle=&quot;90&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;3dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_student_lesson_learning.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_student_lesson_learning.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_light&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#10;            app:title=&quot;Học bài&quot;&#10;            app:titleTextColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Lesson Header Card --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;6dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&#10;                    android:background=&quot;@drawable/gradient_card_background&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_lesson_title&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Tiêu đề bài học&quot;&#10;                        android:textSize=&quot;22sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@android:color/white&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_lesson_type&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot; Văn bản&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/white&quot;&#10;                            android:background=&quot;@drawable/bg_level_badge&quot;&#10;                            android:paddingHorizontal=&quot;12dp&quot;&#10;                            android:paddingVertical=&quot;4dp&quot;&#10;                            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_estimated_time&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;⏱ 30 phút&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@android:color/white&quot;&#10;                            android:alpha=&quot;0.9&quot; /&gt;&#10;&#10;                        &lt;View&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;1dp&quot;&#10;                            android:layout_weight=&quot;1&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_lesson_order&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Bài 1&quot;&#10;                            android:textSize=&quot;12sp&quot;&#10;                            android:textColor=&quot;@android:color/white&quot;&#10;                            android:background=&quot;@drawable/bg_level_badge&quot;&#10;                            android:paddingHorizontal=&quot;8dp&quot;&#10;                            android:paddingVertical=&quot;2dp&quot;&#10;                            android:alpha=&quot;0.8&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Lesson Content Card --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Nội dung bài học&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_lesson_content&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Nội dung bài học sẽ hiển thị ở đây...&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:lineSpacingExtra=&quot;4dp&quot;&#10;                        android:textIsSelectable=&quot;true&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Grammar Content (if applicable) --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card_grammar_content&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Ngữ pháp&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_grammar_rule&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Quy tắc ngữ pháp&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_grammar_explanation&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Giải thích ngữ pháp&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_grammar_examples&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Ví dụ:&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:textStyle=&quot;italic&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Vocabulary Content (if applicable) --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:id=&quot;@+id/card_vocabulary_content&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Từ vựng&quot;&#10;                        android:textSize=&quot;18sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Từ: &quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@color/text_primary&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_vocabulary_word&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;word&quot;&#10;                            android:textSize=&quot;16sp&quot;&#10;                            android:textColor=&quot;@color/colorPrimary&quot;&#10;                            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Phiên âm: &quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@color/text_primary&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_vocabulary_pronunciation&quot;&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;/wɜːrd/&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@color/text_secondary&quot;&#10;                            android:textStyle=&quot;italic&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                        &lt;TextView&#10;                            android:layout_width=&quot;wrap_content&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:text=&quot;Nghĩa: &quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textStyle=&quot;bold&quot;&#10;                            android:textColor=&quot;@color/text_primary&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_vocabulary_meaning&quot;&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:text=&quot;từ, từ ngữ&quot;&#10;                            android:textSize=&quot;14sp&quot;&#10;                            android:textColor=&quot;@color/text_primary&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_vocabulary_example&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Ví dụ: This is a new word.&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:textStyle=&quot;italic&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Progress and Action Buttons --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;20dp&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                        &lt;com.google.android.material.button.MaterialButton&#10;                            android:id=&quot;@+id/btn_previous_lesson&quot;&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;48dp&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:text=&quot;⬅️ Bài trước&quot;&#10;                            android:layout_marginEnd=&quot;8dp&quot;&#10;                            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; /&gt;&#10;&#10;                        &lt;com.google.android.material.button.MaterialButton&#10;                            android:id=&quot;@+id/btn_next_lesson&quot;&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;48dp&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:text=&quot;Bài tiếp ➡️&quot;&#10;                            android:layout_marginStart=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;/LinearLayout&gt;&#10;&#10;                    &lt;com.google.android.material.button.MaterialButton&#10;                        android:id=&quot;@+id/btn_mark_complete&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;56dp&quot;&#10;                        android:text=&quot;✅ Đánh dấu hoàn thành&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        style=&quot;@style/Widget.MaterialComponents.Button.UnelevatedButton&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#13;&#10;&#13;&#10;        &lt;androidx.appcompat.widget.Toolbar&#13;&#10;            android:id=&quot;@+id/toolbar&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#13;&#10;            android:background=&quot;?attr/colorPrimary&quot;&#13;&#10;            app:title=&quot;Học bài&quot;&#13;&#10;            app:titleTextColor=&quot;@android:color/white&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#13;&#10;&#13;&#10;    &lt;androidx.core.widget.NestedScrollView&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#13;&#10;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;!-- Lesson Header Card --&gt;&#13;&#10;            &lt;androidx.cardview.widget.CardView&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#13;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;                app:cardElevation=&quot;6dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;LinearLayout&#13;&#10;                    android:layout_width=&quot;match_parent&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:orientation=&quot;vertical&quot;&#13;&#10;                    android:padding=&quot;20dp&quot;&#13;&#10;                    android:background=&quot;@android:color/holo_blue_light&quot;&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:id=&quot;@+id/tv_lesson_title&quot;&#13;&#10;                        android:layout_width=&quot;wrap_content&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot;Tiêu đề bài học&quot;&#13;&#10;                        android:textSize=&quot;22sp&quot;&#13;&#10;                        android:textStyle=&quot;bold&quot;&#13;&#10;                        android:textColor=&quot;@android:color/white&quot;&#13;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;LinearLayout&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:id=&quot;@+id/tv_lesson_type&quot;&#13;&#10;                            android:layout_width=&quot;wrap_content&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot; Văn bản&quot;&#13;&#10;                            android:textSize=&quot;14sp&quot;&#13;&#10;                            android:textColor=&quot;@android:color/white&quot;&#13;&#10;                            android:background=&quot;@android:drawable/ic_menu_sort_by_size&quot;&#13;&#10;                            android:paddingHorizontal=&quot;12dp&quot;&#13;&#10;                            android:paddingVertical=&quot;4dp&quot;&#13;&#10;                            android:layout_marginEnd=&quot;12dp&quot; /&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:id=&quot;@+id/tv_estimated_time&quot;&#13;&#10;                            android:layout_width=&quot;wrap_content&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot;⏱ 30 phút&quot;&#13;&#10;                            android:textSize=&quot;14sp&quot;&#13;&#10;                            android:textColor=&quot;@android:color/white&quot;&#13;&#10;                            android:alpha=&quot;0.9&quot; /&gt;&#13;&#10;&#13;&#10;                        &lt;View&#13;&#10;                            android:layout_width=&quot;0dp&quot;&#13;&#10;                            android:layout_height=&quot;1dp&quot;&#13;&#10;                            android:layout_weight=&quot;1&quot; /&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:id=&quot;@+id/tv_lesson_order&quot;&#13;&#10;                            android:layout_width=&quot;wrap_content&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot;Bài 1&quot;&#13;&#10;                            android:textSize=&quot;12sp&quot;&#13;&#10;                            android:textColor=&quot;@android:color/white&quot;&#13;&#10;                            android:background=&quot;@android:drawable/ic_menu_sort_by_size&quot;&#13;&#10;                            android:paddingHorizontal=&quot;8dp&quot;&#13;&#10;                            android:paddingVertical=&quot;2dp&quot;&#13;&#10;                            android:alpha=&quot;0.8&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;                &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#13;&#10;&#13;&#10;            &lt;!-- Lesson Content Card --&gt;&#13;&#10;            &lt;androidx.cardview.widget.CardView&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#13;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;LinearLayout&#13;&#10;                    android:layout_width=&quot;match_parent&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:orientation=&quot;vertical&quot;&#13;&#10;                    android:padding=&quot;20dp&quot;&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:layout_width=&quot;wrap_content&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot; Nội dung bài học&quot;&#13;&#10;                        android:textSize=&quot;18sp&quot;&#13;&#10;                        android:textStyle=&quot;bold&quot;&#13;&#10;                        android:textColor=&quot;@android:color/black&quot;&#13;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:id=&quot;@+id/tv_lesson_content&quot;&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot;Nội dung bài học sẽ hiển thị ở đây...&quot;&#13;&#10;                        android:textSize=&quot;16sp&quot;&#13;&#10;                        android:textColor=&quot;@android:color/black&quot;&#13;&#10;                        android:lineSpacingExtra=&quot;4dp&quot;&#13;&#10;                        android:textIsSelectable=&quot;true&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#13;&#10;&#13;&#10;            &lt;!-- Grammar Content (if applicable) --&gt;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:id=&quot;@+id/card_grammar_content&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#13;&#10;                android:orientation=&quot;vertical&quot;&#13;&#10;                android:visibility=&quot;gone&quot;&gt;&#13;&#10;&#13;&#10;                &lt;androidx.cardview.widget.CardView&#13;&#10;                    android:layout_width=&quot;match_parent&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;                    app:cardElevation=&quot;4dp&quot;&gt;&#13;&#10;&#13;&#10;                    &lt;LinearLayout&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:orientation=&quot;vertical&quot;&#13;&#10;                        android:padding=&quot;20dp&quot;&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:layout_width=&quot;wrap_content&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot; Ngữ pháp&quot;&#13;&#10;                            android:textSize=&quot;18sp&quot;&#13;&#10;                            android:textStyle=&quot;bold&quot;&#13;&#10;                            android:textColor=&quot;@android:color/black&quot;&#13;&#10;                            android:layout_marginBottom=&quot;16dp&quot; /&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:id=&quot;@+id/tv_grammar_rule&quot;&#13;&#10;                            android:layout_width=&quot;match_parent&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot;Quy tắc ngữ pháp&quot;&#13;&#10;                            android:textSize=&quot;16sp&quot;&#13;&#10;                            android:textStyle=&quot;bold&quot;&#13;&#10;                            android:textColor=&quot;@android:color/black&quot;&#13;&#10;                            android:layout_marginBottom=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:id=&quot;@+id/tv_grammar_explanation&quot;&#13;&#10;                            android:layout_width=&quot;match_parent&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot;Giải thích ngữ pháp&quot;&#13;&#10;                            android:textSize=&quot;14sp&quot;&#13;&#10;                            android:textColor=&quot;@android:color/darker_gray&quot;&#13;&#10;                            android:layout_marginBottom=&quot;12dp&quot; /&gt;&#13;&#10;&#13;&#10;                        &lt;TextView&#13;&#10;                            android:id=&quot;@+id/tv_grammar_examples&quot;&#13;&#10;                            android:layout_width=&quot;match_parent&quot;&#13;&#10;                            android:layout_height=&quot;wrap_content&quot;&#13;&#10;                            android:text=&quot;Ví dụ:&quot;&#13;&#10;                            android:textSize=&quot;14sp&quot;&#13;&#10;                            android:textColor=&quot;@android:color/black&quot;&#13;&#10;                            android:textStyle=&quot;italic&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;                &lt;/androidx.cardview.widget.CardView&gt;&#13;&#10;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;!-- Vocabulary Content (if applicable) --&gt;&#13;&#10;            &lt;androidx.cardview.widget.CardView&#13;&#10;                android:id=&quot;@+id/card_vocabulary_content&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#13;&#10;                android:visibility=&quot;gone&quot;&#13;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#13;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#13;&#10;&#13;&#10;                &lt;LinearLayout&#13;&#10;                    android:layout_width=&quot;match_parent&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:orientation=&quot;vertical&quot;&#13;&#10;                    android:padding=&quot;20dp&quot;&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:layout_width=&quot;wrap_content&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot; Từ vựng&quot;&#13;&#10;                        android:textSize=&quot;18sp&quot;&#13;&#10;                        android:textStyle=&quot;bold&quot;&#13;&#10;                        android:textColor=&quot;@android:color/black&quot;&#13;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:id=&quot;@+id/tv_vocabulary_word&quot;&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot;Từ vựng&quot;&#13;&#10;                        android:textSize=&quot;16sp&quot;&#13;&#10;                        android:textStyle=&quot;bold&quot;&#13;&#10;                        android:textColor=&quot;@android:color/black&quot;&#13;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:id=&quot;@+id/tv_vocabulary_pronunciation&quot;&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot;Phát âm&quot;&#13;&#10;                        android:textSize=&quot;14sp&quot;&#13;&#10;                        android:textColor=&quot;@android:color/darker_gray&quot;&#13;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:id=&quot;@+id/tv_vocabulary_meaning&quot;&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot;Nghĩa&quot;&#13;&#10;                        android:textSize=&quot;14sp&quot;&#13;&#10;                        android:textColor=&quot;@android:color/black&quot;&#13;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                    &lt;TextView&#13;&#10;                        android:id=&quot;@+id/tv_vocabulary_example&quot;&#13;&#10;                        android:layout_width=&quot;match_parent&quot;&#13;&#10;                        android:layout_height=&quot;wrap_content&quot;&#13;&#10;                        android:text=&quot;Ví dụ&quot;&#13;&#10;                        android:textSize=&quot;14sp&quot;&#13;&#10;                        android:textColor=&quot;@android:color/black&quot;&#13;&#10;                        android:textStyle=&quot;italic&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#13;&#10;&#13;&#10;            &lt;!-- Action Buttons --&gt;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:layout_marginTop=&quot;16dp&quot;&#13;&#10;                android:gravity=&quot;center&quot;&gt;&#13;&#10;&#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btn_previous_lesson&quot;&#13;&#10;                    android:layout_width=&quot;0dp&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:layout_weight=&quot;1&quot;&#13;&#10;                    android:text=&quot;⬅ Trước&quot;&#13;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#13;&#10;                    android:enabled=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btn_mark_complete&quot;&#13;&#10;                    android:layout_width=&quot;0dp&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:layout_weight=&quot;2&quot;&#13;&#10;                    android:text=&quot;Đánh dấu hoàn thành&quot;&#13;&#10;                    android:backgroundTint=&quot;@android:color/holo_green_light&quot;&#13;&#10;                    android:textColor=&quot;@android:color/white&quot;&#13;&#10;                    android:layout_marginHorizontal=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btn_next_lesson&quot;&#13;&#10;                    android:layout_width=&quot;0dp&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:layout_weight=&quot;1&quot;&#13;&#10;                    android:text=&quot;Tiếp ➡&quot;&#13;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#13;&#10;                    android:enabled=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#13;&#10;&#13;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_quiz_question.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_quiz_question.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_marginBottom=&quot;24dp&quot;&#10;    android:background=&quot;@drawable/border_gray&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tv_question_number&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Câu hỏi 1:&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/holo_purple&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:hint=&quot;Nhập câu hỏi&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/et_question&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minLines=&quot;2&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Các lựa chọn:&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- Option A --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_a&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;A&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn A&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_a&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Option B --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_b&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;B&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn B&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_b&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Option C --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_c&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;C&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn C&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_c&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Option D --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;        &lt;RadioButton&#10;            android:id=&quot;@+id/rb_option_d&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;D&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:hint=&quot;Lựa chọn D&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_option_d&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Chọn đáp án đúng bằng cách tick vào radio button tương ứng&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textStyle=&quot;italic&quot;&#10;        android:textColor=&quot;@android:color/darker_gray&quot;&#10;        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_marginBottom=&quot;24dp&quot;&#10;    android:background=&quot;@drawable/border_gray&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tv_question_number&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Câu hỏi 1:&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/holo_purple&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:hint=&quot;Nhập câu hỏi&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/et_question&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minLines=&quot;2&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Các lựa chọn:&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- RadioGroup to properly group RadioButtons --&gt;&#10;    &lt;RadioGroup&#10;        android:id=&quot;@+id/rg_correct_answer&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Option A --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_a&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;A&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn A&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_a&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Option B --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_b&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;B&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn B&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_b&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Option C --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_c&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;C&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn C&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_c&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Option D --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rb_option_d&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;D&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:hint=&quot;Lựa chọn D&quot;&gt;&#10;&#10;                &lt;com.google.android.material.textfield.TextInputEditText&#10;                    android:id=&quot;@+id/et_option_d&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/RadioGroup&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Chọn đáp án đúng bằng cách tick vào radio button tương ứng&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        android:textStyle=&quot;italic&quot;&#10;        android:textColor=&quot;@android:color/darker_gray&quot;&#10;        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_student_lesson.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_student_lesson.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/card_lesson&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;6dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Left side: Lesson number and completion status --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_lesson_order&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;Bài 1&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:background=&quot;@drawable/circle_primary&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;!-- Completion Status Icon --&gt;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/iv_completion_status&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_agenda&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Main content --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Lesson title and type --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_lesson_title&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;Lesson Title&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:maxLines=&quot;2&quot;&#10;                    android:ellipsize=&quot;end&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_lesson_type&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Văn bản&quot;&#10;                    android:textSize=&quot;11sp&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:background=&quot;@drawable/bg_level_badge&quot;&#10;                    android:paddingHorizontal=&quot;6dp&quot;&#10;                    android:paddingVertical=&quot;2dp&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Estimated time --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_estimated_time&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;⏱ 30 phút&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@android:color/darker_gray&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Grammar preview (only for Grammar lessons) --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_grammar_preview&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot; Grammar structure&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@color/text_secondary&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;!-- Completion Status and Action Buttons --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;!-- Completion Status Text --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_completion_status&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;Chưa hoàn thành&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/holo_orange_dark&quot;&#10;                    android:textStyle=&quot;italic&quot; /&gt;&#10;&#10;                &lt;!-- Mark as Complete Button --&gt;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btn_mark_complete&quot;&#10;                    style=&quot;@style/Widget.Material3.Button.TextButton&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:text=&quot;Hoàn thành&quot;&#10;                    android:textSize=&quot;11sp&quot;&#10;                    android:textColor=&quot;@color/primary_color&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:minWidth=&quot;0dp&quot;&#10;                    android:paddingHorizontal=&quot;12dp&quot;&#10;                    android:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Right side: Play icon and favorite button --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&gt;&#10;&#10;            &lt;!-- Play Icon --&gt;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/iv_play_icon&quot;&#10;                android:layout_width=&quot;32dp&quot;&#10;                android:layout_height=&quot;32dp&quot;&#10;                android:src=&quot;@android:drawable/ic_media_play&quot;&#10;                android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Favorite Button --&gt;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btn_favorite&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_myplaces&quot;&#10;                android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/card_lesson&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;6dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&#10;    android:clickable=&quot;true&quot;&#10;    android:focusable=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Left side: Lesson number and completion status --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginEnd=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_lesson_order&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;Bài 1&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:background=&quot;@android:drawable/ic_menu_info_details&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;            &lt;!-- Completion Status Icon --&gt;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/iv_completion_status&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_agenda&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Main content --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Lesson title and type --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_lesson_title&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;Lesson Title&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:maxLines=&quot;2&quot;&#10;                    android:ellipsize=&quot;end&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_lesson_type&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Văn bản&quot;&#10;                    android:textSize=&quot;11sp&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:background=&quot;@android:drawable/ic_menu_sort_by_size&quot;&#10;                    android:paddingHorizontal=&quot;6dp&quot;&#10;                    android:paddingVertical=&quot;2dp&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Estimated time --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_estimated_time&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;⏱ 30 phút&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@android:color/darker_gray&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- Grammar preview (only for Grammar lessons) --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_grammar_preview&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot; Grammar structure&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;@android:color/darker_gray&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;!-- Completion Status and Action Buttons --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;!-- Completion Status Text --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_completion_status&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;Chưa hoàn thành&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;@android:color/holo_orange_dark&quot;&#10;                    android:textStyle=&quot;italic&quot; /&gt;&#10;&#10;                &lt;!-- Mark as Complete Button --&gt;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btn_mark_complete&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:text=&quot;Hoàn thành&quot;&#10;                    android:textSize=&quot;11sp&quot;&#10;                    android:textColor=&quot;@android:color/holo_blue_bright&quot;&#10;                    android:background=&quot;@android:drawable/btn_default&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:minWidth=&quot;0dp&quot;&#10;                    android:paddingHorizontal=&quot;12dp&quot;&#10;                    android:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Right side: Play icon and favorite button --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&gt;&#10;&#10;            &lt;!-- Play Icon --&gt;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/iv_play_icon&quot;&#10;                android:layout_width=&quot;32dp&quot;&#10;                android:layout_height=&quot;32dp&quot;&#10;                android:src=&quot;@android:drawable/ic_media_play&quot;&#10;                android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;4dp&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Favorite Button --&gt;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btn_favorite&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:src=&quot;@android:drawable/ic_menu_myplaces&quot;&#10;                android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>